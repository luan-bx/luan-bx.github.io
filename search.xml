<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>调用maven打的jar包</title>
      <link href="/2023/10/10/mavenjar/"/>
      <url>/2023/10/10/mavenjar/</url>
      
        <content type="html"><![CDATA[<h1 id="打jar包"><a href="#打jar包" class="headerlink" title="打jar包"></a>打jar包</h1><h2 id="更换打包方式"><a href="#更换打包方式" class="headerlink" title="更换打包方式"></a>更换打包方式</h2><p>不使用springboot自带的打包插件进行打包，因为springboot打包插件打出来的jar包第一目录为Boot-INF，会导致无法引用。</p><p>更改为maven打包方式：</p><pre class=" language-xml"><code class="language-xml">//pom文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>${project.artifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--指明源码用的Jdk版本--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--指明打包后的Jdk版本--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>整个pom.xml：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>untitled2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    //引入@Service注解        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>${project.artifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--指明源码用的Jdk版本--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--指明打包后的Jdk版本--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>先clean再install</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231010144248.png"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>写一个简单的类和方法，例如a + b函数，注意加上@Service等注解便于调用者可以扫描到类。<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231010144549.png"></p><h1 id="调用jar包"><a href="#调用jar包" class="headerlink" title="调用jar包"></a>调用jar包</h1><h2 id="配置pom"><a href="#配置pom" class="headerlink" title="配置pom"></a>配置pom</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231010145156.png"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>untitled2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>${pom.basedir}/untitled2.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>再加上：</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.shark.aio.AIOCompanyApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeSystemScope</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeSystemScope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>全部pom.xml文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>AIO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.shark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>AIO-company<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>untitled2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>${pom.basedir}/untitled2.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.shark.aio.AIOCompanyApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeSystemScope</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeSystemScope</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="启动类加注解"><a href="#启动类加注解" class="headerlink" title="启动类加注解"></a>启动类加注解</h2><p>把类加入bean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.shark.aio"</span><span class="token punctuation">,</span> <span class="token string">"hh"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>第一个参数为调用者代码路径，从java开始到分类结束</li><li>第二个参数为打包者代码路径，从java开始到分类结束</li></ul><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231010145846.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231010145935.png"></p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><ol><li>可以直接将jar内的类引入容器</li><li>调用即可</li><li>成功返回值</li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231010150113.png"></p><p>返回结果：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231010150314.png"></p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis监听Key失效</title>
      <link href="/2023/05/03/redis/redislistener/"/>
      <url>/2023/05/03/redis/redislistener/</url>
      
        <content type="html"><![CDATA[<h1 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h1><p>监听redis失效的key，在key过期的时刻，做一些列操作。</p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p>将两个文件的<code>notify-keyspace-events &quot; &quot; </code>  改为 <code>notify-keyspace-events “Ex”</code></p><p>重启redis-server</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230511141403.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>两种方案</p><ol><li>在client终端测试</li><li>服务器调用</li></ol><h2 id="client终端"><a href="#client终端" class="headerlink" title="client终端"></a>client终端</h2><p>打开两个client终端</p><p>第一个输入<code>PSUBSCRIBE __keyevent@*__:expired</code></p><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230511142108.png"></p><p>第二个创建key的时效，例如输入<code>setex lbx 10 true</code></p><p>十秒后，key为lbx的过期，并且在第一个client终端看见如下信息：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230511142422.png"></p><p>证明已经监测到失效的key，成功！</p><h2 id="服务器调用"><a href="#服务器调用" class="headerlink" title="服务器调用"></a>服务器调用</h2><h3 id="创建消息监听容器"><a href="#创建消息监听容器" class="headerlink" title="创建消息监听容器"></a>创建消息监听容器</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>RedisMessageListenerContainer<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Redis 消息监听器容器.     *     * @param redisConnectionFactory the redis connection factory     * @return the redis message listener container     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisMessageListenerContainer <span class="token function">redisMessageListenerContainer</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisMessageListenerContainer redisMessageListenerContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisMessageListenerContainer<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisMessageListenerContainer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Redis Key失效监听器注册为Bean.     *     * @param redisMessageListenerContainer the redis message listener container     * @return the redis event message listener     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisEventMessageListener <span class="token function">redisEventMessageListener</span><span class="token punctuation">(</span>RedisMessageListenerContainer redisMessageListenerContainer<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisEventMessageListener</span><span class="token punctuation">(</span>redisMessageListenerContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="重写doHandleMessage"><a href="#重写doHandleMessage" class="headerlink" title="重写doHandleMessage"></a>重写doHandleMessage</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>KeyExpirationEventMessageListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>RedisMessageListenerContainer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisEventMessageListener</span> <span class="token keyword">extends</span> <span class="token class-name">KeyExpirationEventMessageListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Creates new {@link MessageListener} for {@code __keyevent@*__:expired} messages.     *     * @param listenerContainer must not be {@literal null}.     */</span>    <span class="token keyword">public</span> <span class="token function">RedisEventMessageListener</span><span class="token punctuation">(</span>RedisMessageListenerContainer listenerContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>listenerContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doHandleMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个就是过期的key ，过期后，也就是事件触发后对应的value是拿不到的。</span>        <span class="token comment" spellcheck="true">// 这里实现业务逻辑，如果是服务器集群的话需要使用分布式锁进行抢占执行。</span>        String key <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end = "</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义错误处理类"><a href="#自定义错误处理类" class="headerlink" title="自定义错误处理类"></a>自定义错误处理类</h3><p>自定义一个ErrorHandle并注入到RedisMessageListenerContainer中，redia源码中默认没有此处理类，不注入会导致每次监听时打印error级别日志：Execution of message listener failed, and no ErrorHandler has been set.</p><p>自定义错误处理类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisListenerErrorHandle</span> <span class="token keyword">implements</span> <span class="token class-name">ErrorHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleError</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常监听"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注入错误处理类：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230512114454.png"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>RedisListenerErrorHandle redisListenerErrorHandle<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Redis 消息监听器容器. * * @param redisConnectionFactory the redis connection factory * @return the redis message listener container */</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> RedisMessageListenerContainer <span class="token function">redisMessageListenerContainer</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RedisMessageListenerContainer redisMessageListenerContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisMessageListenerContainer<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    redisMessageListenerContainer<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span>redisListenerErrorHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> redisMessageListenerContainer<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="key加入redis"><a href="#key加入redis" class="headerlink" title="key加入redis"></a>key加入redis</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自启动</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GradedAlarmController</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> allDevice <span class="token operator">=</span> <span class="token function">getDeviceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String id <span class="token operator">:</span>allDevice<span class="token punctuation">)</span><span class="token punctuation">{</span>            jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"已加入了redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每个延时半秒，防止一次性加入太多炸了</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="加入对象"><a href="#加入对象" class="headerlink" title="加入对象"></a>加入对象</h3><p>如果加入的value是对象，需要序列化</p><p>Entity实体类继承序列化接口，否则实例化结果为null</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230617233859.png"></p><p>加入jedis时，序列化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加入时</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>alarmEntity<span class="token punctuation">.</span><span class="token function">getMonitorValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SerializeUtil<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>alarmEntity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取value时</span> AlarmEntity alarmEntity <span class="token operator">=</span> <span class="token punctuation">(</span>AlarmEntity<span class="token punctuation">)</span> SerializeUtil<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取之前最好先判断是否存在</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="自定义线程池类"><a href="#自定义线程池类" class="headerlink" title="自定义线程池类"></a>自定义线程池类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisConnectionFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> JedisPool jedisPool<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        JedisPoolConfig jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大空闲连接</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最小空闲连接</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置最长等待时间， ms</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取 Jedis 对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jedisPool <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从连接池中获取Jedis对象</span>            jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> jedis<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>注意：一定要嵌套在try里调用，这样会自动释放资源</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Jedis jedis <span class="token operator">=</span> JedisConnectionFactory<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//相关操作</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis加入失败！"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> redis监听 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 监听 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2023/04/27/redis/redis/"/>
      <url>/2023/04/27/redis/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h2><ol><li>下载地址：<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></li><li>解压</li><li>先点击redis-server.exe启动Redis服务</li><li>再点击redis-cli.exel连接Redis<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/20210115103245463.png"></li><li>配置<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2021011510354034.png"></li></ol><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Redis（Remote Dictionary Server)，即远程字典服务</p><p>开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库</p><p>Redis作用：</p><ol><li>内存存储、持久化（rdb、aof） </li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量！）</li></ol><h1 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h1><ol><li>redis-server.exe，双击运行</li><li>redis-cli.exe，双击运行</li><li>切换数据库：select 1&#x2F;2&#x2F;3（切换数据库为1、2、3， 当前默认为数据库0）</li><li>查当前库的大小：dbsize</li><li>清空当前库：flushdb</li><li>清空全部库：flushall</li><li>再次查当前库的大小：dbsize （为0）</li></ol><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>Redis官方推荐的Java连接开发工具</p><p>SpringBoot2.×版本已经将Jedis换成了Lettuce</p><h2 id="导入Jedis和fastjson依赖"><a href="#导入Jedis和fastjson依赖" class="headerlink" title="导入Jedis和fastjson依赖"></a>导入Jedis和fastjson依赖</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>导入jedis的包<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>redis<span class="token punctuation">.</span>clients<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jedis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>fastjson<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">62</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>连接Redis测试,连接的是本地的Redis服务,连接远程需要更改配置文件和关闭防火墙。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1、 new Jedis 对象即可</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// jedis 所有的命令就是我们之前的所有指令</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>返回PONG,证明连接成功！</p><h2 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1、 new Jedis 对象即可</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空当前库的所有数据</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"dingyongjun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"high"</span><span class="token punctuation">,</span><span class="token string">"173"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\nage:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\nhigh"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"high"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/20210120223918886.png"></p><pre class=" language-java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list: "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/20210120224445882.png"></p><p>在Jedis中连接使用Redis，和Redis控制台命令完全一致。</p><h1 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h1><p>Jedis: 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池, 更像 BIO 模式！</p><p>Lettuce: 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况,可以减少线程数据了，更像 NIO 模式！</p><h2 id="POM依赖"><a href="#POM依赖" class="headerlink" title="POM依赖"></a>POM依赖</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>集成redis<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>序列化<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">54</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>lombok<span class="token punctuation">,</span>自动生成set、get等方法<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="配置application"><a href="#配置application" class="headerlink" title="配置application"></a>配置application</h2><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  redis<span class="token operator">:</span>    host<span class="token operator">:</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>    port<span class="token operator">:</span> <span class="token number">6379</span></code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">testRedis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"dadadingdada!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其他方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// redisTemplate  #操作不同的数据类型，api和我们的指令是一样的 </span><span class="token comment" spellcheck="true">// opsForValue  #操作字符串 类似String </span><span class="token comment" spellcheck="true">// opsForList  #操作List 类似List </span><span class="token comment" spellcheck="true">// opsForSet  #操作set</span><span class="token comment" spellcheck="true">// opsForHash  #操作hash</span><span class="token comment" spellcheck="true">// opsForZSet  #操作zset</span><span class="token comment" spellcheck="true">// opsForGeo   #操作geo</span><span class="token comment" spellcheck="true">// opsForHyperLogLog  #操作HyperLogLog</span><span class="token comment" spellcheck="true">// 除了进本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的 CRUD </span><span class="token comment" spellcheck="true">// 获取redis的连接对象 </span><span class="token comment" spellcheck="true">// RedisConnection connection = redisTemplate.getConnectionFactory().getConnection(); </span><span class="token comment" spellcheck="true">// connection.flushDb(); </span><span class="token comment" spellcheck="true">// connection.flushAll();</span></code></pre><p>对象的保存必须序列化，否则报错，因此自定义封装RedisTemplate类</p><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer high<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">setObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"dingdada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setHigh</span><span class="token punctuation">(</span><span class="token number">172</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="自定义封装RedisTemplate类"><a href="#自定义封装RedisTemplate类" class="headerlink" title="自定义封装RedisTemplate类"></a>自定义封装RedisTemplate类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span>    <span class="token comment" spellcheck="true">// 自己定义了一个RedisTemplate</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 我们为了自己开发方便，一般直接使用 &lt;String, Object></span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Json序列化配置</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String 的序列化</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="自定义封装RedisUtils类"><a href="#自定义封装RedisUtils类" class="headerlink" title="自定义封装RedisUtils类"></a>自定义封装RedisUtils类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>String keys<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     * @param key 键     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     * @param key 键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 普通缓存放入, 不存在放入，存在返回     * @param key 键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">setnx</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     * @param key 键     * @param value 值     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间,不存在放入，存在返回     * @param key 键     * @param value 值     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">setnx</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     * @param key 键     * @param delta 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     * @param key 键     * @param delta 要减少几(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashGet     * @param key 键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     * @param key 键     * @param map 对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     * @param key 键     * @param item 项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     * @param key 键     * @param item 项     * @param value 值     * @param time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     * @param key 键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     * @param key 键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     * @param key 键     * @param item 项     * @param by 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     * @param key 键     * @param item 项     * @param by 要减少记(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     * @param key 键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     * @param key 键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     * @param key 键     * @param time 时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     * @param key 键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     * @param key 键     * @param start 开始     * @param end 结束 0 到 -1代表所有值     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     * @param key 键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     * @param key 键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     * @param key 键     * @param value 值     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     * @param key 键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key 键     * @param value 值     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     * @param key 键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     * @param key 键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="持久化-RDB和AOF"><a href="#持久化-RDB和AOF" class="headerlink" title="持久化 RDB和AOF"></a>持久化 RDB和AOF</h1><p>RDB：把当前数据生成快照保存在硬盘上。</p><p>AOF：记录每次对数据的操作到硬盘上。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB（Redis DataBase）持久化是把当前Redis中全部数据生成快照保存在硬盘上。RDB持久化可以手动触发，也可以自动触发。</p><h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><p>save和bgsave命令都可以手动触发RDB持久化。</p><p>save：命令会阻塞Redis服务，不建议使用。</p><p>bgsave：执行fork操作创建子进程，RDB持久化由子进程负责，不会阻塞Redis服务进程。</p><h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p>采用bgsave方式，减少Redis进程的阻塞。</p><p>自动触发条件：</p><ol><li>在配置文件中设置了save的相关配置，如sava m n，它表示在m秒内数据被修改过n次时，自动触发bgsave操作。</li><li>当从节点做全量复制时，主节点会自动执行bgsave操作，并且把生成的RDB文件发送给从节点。</li><li>执行debug reload命令时，也会自动触发bgsave操作。</li><li>执行shutdown命令时，如果没有开启AOF持久化也会自动触发bgsave操作。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>RDB文件是一个紧凑的二进制压缩文件，是Redis在某个时间点的全部数据快照。所以使用RDB恢复数据的速度远远比AOF的快，非常适合备份、全量复制、灾难恢复等场景。</p><p>适合大规模的数据恢复。</p><p>对数据的完整性要求不高。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>每次进行bgsave操作都要执行fork操作创建子进程，属于重量级操作，频繁执行成本过高，所以无法做到实时持久化，或者秒级持久化。</p><p>需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了 </p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF（Append Only File）持久化是把每次写命令追加写入日志中，需要恢复数据时重新执行AOF文件中的命令就可以。解决了数据持久化的实时性，是目前主流的Redis持久化方式。</p><p>Redis默认使用的是RDB模式，所以需要手动开启AOF模式！</p><h3 id="手动触发：使用bgrewriteaof命令。"><a href="#手动触发：使用bgrewriteaof命令。" class="headerlink" title="手动触发：使用bgrewriteaof命令。"></a>手动触发：使用bgrewriteaof命令。</h3><h3 id="自动触发：AOF持久化默认是不开启的，需要修改配置文件"><a href="#自动触发：AOF持久化默认是不开启的，需要修改配置文件" class="headerlink" title="自动触发：AOF持久化默认是不开启的，需要修改配置文件"></a>自动触发：AOF持久化默认是不开启的，需要修改配置文件</h3><pre class=" language-redis"><code class="language-redis"># appendonly改为yes，开启AOFappendonly yes# AOF文件的名字appendfilename "appendonly.aof"# AOF文件的写入方式# everysec 每个一秒将缓存区内容写入文件 默认开启的写入方式appendfsync everysec# 运行AOF重写时AOF文件大小的增长率的最小值auto-aof-rewrite-percentage 100# 运行AOF重写时文件大小的最小值auto-aof-rewrite-min-size 64mb</code></pre><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>每一次修改都同步，文件的完整性会更加好<br>每秒同步一次，最多会丢失一秒的数据<br>从不同步，效率最高的</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>相对于数据文件来说，aof远远大于 rdb，修复的速度也比 rdb慢！<br>Aof 运行效率也要比 rdb 慢，所以我们redis默认的配置就是rdb持久化！</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>中文文档：<a href="http://www.redis.cn/">http://www.redis.cn/</a><br>学习资料：<a href="https://blog.csdn.net/weixin_43829443/article/details/112839985?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168352476716800188521183%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168352476716800188521183&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112839985-null-null.142%5Ev86%5Einsert_down1,239%5Ev2%5Einsert_chatgpt&utm_term=redis&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_43829443/article/details/112839985?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168352476716800188521183%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168352476716800188521183&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112839985-null-null.142^v86^insert_down1,239^v2^insert_chatgpt&amp;utm_term=redis&amp;spm=1018.2226.3001.4187</a></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session</title>
      <link href="/2023/04/06/module/cookiesession/"/>
      <url>/2023/04/06/module/cookiesession/</url>
      
        <content type="html"><![CDATA[<h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><p>cookie和session都是用来跟踪浏览器用户身份的会话方式。</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ol><li><p>浏览器端第一次发送请求到服务器端</p></li><li><p>服务器端创建Cookie，该Cookie中包含用户的信息，然后将该Cookie发送到浏览器端</p></li><li><p>浏览器端再次访问服务器端时会携带服务器端创建的Cookie</p></li><li><p>服务器端通过Cookie中携带的数据区分不同的用户</p></li></ol><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ol><li><p>浏览器端第一次发送请求到服务器端，服务器端创建一个Session，同时会创建一个<strong>特殊的Cookie</strong>（name为<strong>JSESSIONID</strong>的固定值，value为session对象的<strong>ID</strong>），然后将该Cookie发送至浏览器端</p></li><li><p>浏览器端发送第N（N&gt;1）次请求到服务器端,浏览器端访问服务器端时就会携带该name为JSESSIONID的Cookie对象</p></li><li><p>服务器端根据name为JSESSIONID的Cookie的value(sessionId),去查询Session对象，从而区分不同用户。</p></li></ol><blockquote><p>name为JSESSIONID的Cookie不存在（关闭或更换浏览器），返回1中重新去创建Session与特殊的Cookie<br>name为JSESSIONID的Cookie存在，根据value中的SessionId去寻找session对象<br>value为SessionId不存在<strong>Session对象默认存活30分钟</strong>，返回1中重新去创建Session与特殊的Cookie<br>value为SessionId存在，返回session对象</p></blockquote><h1 id="异同点："><a href="#异同点：" class="headerlink" title="异同点："></a>异同点：</h1><p>cookie数据保存在客户端，session数据保存在服务端。</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>sessionid是服务器和客户端连接时候随机分配的，如果浏览器使用的是cookie，那么所有数据都保存在浏览器端，比如你登陆以后，服务器设置了cookie用户名，那么当你再次请求服务器的时候，浏览器会将用户名一块发送给服务器，这些变量有一定的特殊标记。服务器会解释为cookie变量，所以只要不关闭浏览器，那么cookie变量一直是有效的，所以能够保证长时间不掉线。</p><p>如果你能够<strong>截获</strong>某个用户的cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用<strong>cookie被攻击</strong>的可能性比较大。</p><p>如果cookie设置了<strong>有效值</strong>，那么cookie会<strong>保存到客户端的硬盘上</strong>，下次在访问网站的时候，浏览器先检查有没有cookie，如果有的话，读取cookie，然后发送给服务器。</p><p>所以你在机器上面保存了某个论坛cookie，<strong>有效期是一年</strong>，如果有人入侵你的机器，将你的cookie<strong>拷走</strong>，放在他机器下面，那么他登陆该网站的时候就是用你的身份登陆的。当然，伪造的时候需要注意，直接copy cookie文件到cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器</p><p>两个都可以用来存私密的东西，<strong>session</strong>过期与否，取决于<strong>服务器</strong>的设定。<strong>cookie</strong>过期与否，可以在cookie生成的时候<strong>设置</strong>进去。</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>简单的说，当你登陆一个网站的时候，如果web服务器端使用的是session，那么所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登陆或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造。</p><h3 id="session常用方法"><a href="#session常用方法" class="headerlink" title="session常用方法"></a>session常用方法</h3><ol><li>resquest.getSession()：得到请求游览器(客户端)对应的session。如果没有，那么就创建应该新的session。如果有那么就返回对应的session</li><li>setAttribute(String s, Object o)：在session存放属性</li><li>getAttribute(String s)：从session中得到s所对应的属性</li><li>removeAttribute(String s)：从session中删除s对应的属性</li><li>getId()：得到session所对应的id</li><li>invalidate()：使session立即无效</li><li>setMaxInactiveInterval(int i)：设置session最大的有效时间。注意，这个有效时间是两次访问服务器所间隔的最大时间，如果超过最大的有效时间，那么这个session就失效了。当传一个等于0或小于0的数时，session对象会永远有效，所以尽量不给他设置负值。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到session</span>HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置最长访问间隔时间(一天)</span>session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将用户名存入session</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><ol><li>cookie数据存放在客户的<strong>浏览器</strong>上，session数据放在<strong>服务器</strong>上</li><li>cookie<strong>不是很安全</strong>，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,如果主要考虑到安全应当使用session</li><li><strong>session</strong>会在一定时间内保存在服务器上。当访问增多，会比较<strong>占用服务器的性能</strong>，如果主要考虑到减轻服务器性能方面，应当使用COOKIE</li><li>单个cookie在客户端的限制是<strong>3K</strong>，就是说一个站点在客户端存放的COOKIE不能3K。</li><li>所以：将登陆信息等<strong>重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中。</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cookie和Session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端交互</title>
      <link href="/2023/03/30/module/html2/"/>
      <url>/2023/03/30/module/html2/</url>
      
        <content type="html"><![CDATA[<h1 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h1><p>前端显示数据库查询的默认值，并且可以在输入框修改信息并提交</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230412203525.png"></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>th:value是input输入框默认值，用来接后端数据。<br>name命名参数，用于后端接受修改的字段。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/updataInformationEntity}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal form-label-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group row <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>control-label col-md-3 col-sm-3 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>企业名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 col-sm-9 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>company<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${informationEntity.company}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group row <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>control-label col-md-3 col-sm-3 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>行业：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 col-sm-9 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>industry<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${informationEntity.industry}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group row <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>control-label col-md-3 col-sm-3 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>企业描述：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 col-sm-9 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${informationEntity.description}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group row <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>control-label col-md-3 col-sm-3 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>监测点：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 col-sm-9 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-6 col-sm-6 <span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mc:${allMonitor}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mc}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>badge badge-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 col-sm-9  offset-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>复位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateInformation"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updateInformation</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    InformationEntity informationEntity <span class="token operator">=</span> informationMapping<span class="token punctuation">.</span><span class="token function">getInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> allMonitor <span class="token operator">=</span> MonitorDeviceService<span class="token punctuation">.</span><span class="token function">getAllMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>ALLMONITOR<span class="token punctuation">,</span> allMonitor<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"informationEntity"</span><span class="token punctuation">,</span> informationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入企业信息修改页面成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"updateInformation"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updataInformationEntity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updataInformationEntity</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> InformationEntity informationEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        informationMapping<span class="token punctuation">.</span><span class="token function">updateInformation</span><span class="token punctuation">(</span>informationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"企业信息修改失败！"</span> <span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">updateInformation</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"企业信息修改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"企业信息修改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">indexWeb</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InformationMapping</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE `information` SET `company`=#{company}, `industry`=#{industry},"</span> <span class="token operator">+</span>            <span class="token string">"`description`=#{description}  WHERE `id`= 1;"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">updateInformation</span><span class="token punctuation">(</span>InformationEntity informationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from `information` WHERE `id`= 1;"</span><span class="token punctuation">)</span>    InformationEntity <span class="token function">getInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签属性 </tag>
            
            <tag> 交互数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下MySQL命令</title>
      <link href="/2023/03/21/mysql/mysql/"/>
      <url>/2023/03/21/mysql/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>每条命令后面加上分号“；”，否则认为命令未输完。</p><h1 id="进入MySQL"><a href="#进入MySQL" class="headerlink" title="进入MySQL"></a>进入MySQL</h1><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230411134725.png"></p><h1 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230411135124.png"></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> XXXX<span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230411172840.png"></p><h1 id="执行sql文件（数据库迁移）"><a href="#执行sql文件（数据库迁移）" class="headerlink" title="执行sql文件（数据库迁移）"></a>执行sql文件（数据库迁移）</h1><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//先选择数据库 </span><span class="token keyword">use</span> XXX<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行sql文件</span>source 绝对路径</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230411173015.png"></p><h1 id="查看数据库所有表"><a href="#查看数据库所有表" class="headerlink" title="查看数据库所有表"></a>查看数据库所有表</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230411173500.png"></p><h1 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">describe</span> 表名<span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230411173346.png"></p><h1 id="查看表记录"><a href="#查看表记录" class="headerlink" title="查看表记录"></a>查看表记录</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230411173713.png"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p><a href="https://blog.csdn.net/weixin_43423484/article/details/124408565?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168541701816800184193260%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168541701816800184193260&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-124408565-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=windows%E5%AE%89%E8%A3%85mysql&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_43423484/article/details/124408565?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168541701816800184193260%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168541701816800184193260&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-124408565-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=windows%E5%AE%89%E8%A3%85mysql&amp;spm=1018.2226.3001.4187</a></p><p>错误处理</p><p><a href="https://blog.csdn.net/quTMD/article/details/129186741?ops_request_misc=&request_id=&biz_id=102&utm_term=ERROR%201045%20(28000):%20Access%20den&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-129186741.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">https://blog.csdn.net/quTMD/article/details/129186741?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ERROR%201045%20(28000):%20Access%20den&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-129186741.142^v88^control_2,239^v2^insert_chatgpt&amp;spm=1018.2226.3001.4187</a></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>先切换到root用户下：</p><pre class=" language-sql"><code class="language-sql">sudo su</code></pre><p>本文档中使用的操作系统是ubuntu20.04，默认使用apt下载mysql默认版本可能是mysql5，所以先去官网<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a>下载mysql8的源：<br><img src="/./mysql8%E5%AE%89%E8%A3%851.png" alt="img"><br><img src="/./mysql8%E5%AE%89%E8%A3%852.png" alt="img"><br>我们将下载到的<code>mysql-apt-config_0.8.24-1_all.deb</code>文件放到用户主目录下，执行下面的命令：</p><pre class=" language-sql"><code class="language-sql">dpkg <span class="token operator">-</span>i mysql<span class="token operator">-</span>apt<span class="token operator">-</span>config_0<span class="token number">.8</span><span class="token punctuation">.</span><span class="token number">24</span><span class="token operator">-</span>1_all<span class="token number">.deb</span></code></pre><p>会出现下面的界面，选择<code>mysql server -&gt; mysql-8.0 -&gt; ok</code><br><img src="/./mysql8%E5%AE%89%E8%A3%853.png" alt="img"><br>之后我们使用下面的命令安装mysql：</p><pre class=" language-sql"><code class="language-sql">apt<span class="token operator">-</span>get upgradeapt<span class="token operator">-</span>get install mysql<span class="token operator">-</span>server</code></pre><p>安装过程中会让你设置初始密码：<br><img src="/./mysql8%E5%AE%89%E8%A3%854.png" alt="img"><br>若是没出错就已经安装好了，可以尝试登录一下：</p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p</code></pre><p>输入刚才的初始密码即可。<br><img src="/./mysql8%E5%AE%89%E8%A3%855.png" alt="img"></p><h3 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h3><p>防火墙这里先不提，需要提前配置好防火墙，开放端口。<br>mysql8默认只有本机可以访问，如果需要从其他机器远程访问数据库，需要进行配置。<br>登录数据库，查看权限表：</p><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>pmysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><p>会查询到如下结果：</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment" spellcheck="true">------+-----------------+</span><span class="token operator">|</span> <span class="token keyword">user</span> <span class="token operator">|</span> host            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+-----------------+</span><span class="token operator">|</span>root  <span class="token operator">|</span> localhost       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+-----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00sec<span class="token punctuation">)</span></code></pre><p>这里可以看到root用户的host字段是localhost，代表root用户只有本机可以访问。把它改成%即可远程访问：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><p>然后mysql就允许远程主机访问了。</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>如果安装时未提示创建密码，则用sudo命令，用户root进入密码123456后，可以创建一个新用户，并用root用户赋予新建用户的权限。</p><h2 id="远程连接不上"><a href="#远程连接不上" class="headerlink" title="远程连接不上"></a>远程连接不上</h2><ol><li>修改端口</li></ol><pre class=" language-sql"><code class="language-sql">sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>cnf</code></pre><p>&#x2F;etc&#x2F;mysql&#x2F;下面有个mysql.cnf类似的文件。修改端口127.0.0.1为0.0.0.0</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230427160412.png"></p><p>2.修改host</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> <span class="token keyword">user</span>             <span class="token operator">|</span> host      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> root             <span class="token operator">|</span> localhost<span class="token operator">|</span><span class="token operator">|</span> admin            <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>infoschema <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span><span class="token keyword">session</span>    <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>sys        <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span> mysql<span class="token operator">></span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host <span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> <span class="token keyword">user</span>             <span class="token operator">|</span> host      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> root             <span class="token operator">|</span> <span class="token operator">%</span>         <span class="token operator">|</span><span class="token operator">|</span> admin            <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>infoschema <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span><span class="token keyword">session</span>    <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>sys        <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span></code></pre><ol start="3"><li>修改加密方式</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' identified with mysql_native_password by '</span>你的密码'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新权限</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><pre class=" language-sql"><code class="language-sql">sudo cat <span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>debian<span class="token punctuation">.</span>cnf</code></pre><p>复制密码<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230622143904(1)(1).png"></p><pre class=" language-sql"><code class="language-sql">sudo service mysql <span class="token keyword">start</span>mysql <span class="token operator">-</span>udebian<span class="token operator">-</span>sys<span class="token operator">-</span>maint <span class="token operator">-</span>刚才复制的密码<span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token keyword">exit</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRUD</title>
      <link href="/2023/03/21/mysql/crud/"/>
      <url>/2023/03/21/mysql/crud/</url>
      
        <content type="html"><![CDATA[<h1 id="增-Insert"><a href="#增-Insert" class="headerlink" title="增@Insert"></a>增@Insert</h1><pre class=" language-sql"><code class="language-sql"><span class="token variable">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO `user`(`user_name`, `password`, `phone`, `email`, `gender`,`icon`, `number`, `post_id`, `post_name`) "</span>        <span class="token operator">+</span> "<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#{userName}, #{password}, #{phone}, #{email}, #{gender}, #{icon}, #{number}, #{postId}, #{postName});")</span>void <span class="token keyword">insert</span><span class="token punctuation">(</span>UserEntity customerUserEntity<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="删-Delete"><a href="#删-Delete" class="headerlink" title="删@Delete"></a>删@Delete</h1><pre class=" language-sql"><code class="language-sql"><span class="token variable">@Delete</span><span class="token punctuation">(</span>"<span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">where</span> user_name <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{userName}")</span>void deleteUserByUserName<span class="token punctuation">(</span>String userName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="查-Select"><a href="#查-Select" class="headerlink" title="查@Select"></a>查@Select</h1><h2 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//查全表</span><span class="token variable">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `alarm_records`"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>AlarmRecordEntity<span class="token operator">></span> getAllAlarmRecords<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查某列（某字段）</span><span class="token variable">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT name FROM `user`"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>AlarmRecordEntity<span class="token operator">></span> getAllAlarmRecords<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据某字段查所有符合条件的</span><span class="token variable">@Select</span><span class="token punctuation">(</span>"<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">WHERE</span> number <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{number};")</span>UserEntity queryUserByNumber<span class="token punctuation">(</span><span class="token variable">@Param</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span> String number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多条件查询</span><span class="token variable">@Select</span><span class="token punctuation">(</span>"<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">WHERE</span> number <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{number} and name = #{name};")</span>UserEntity queryUserByNumber<span class="token punctuation">(</span><span class="token variable">@Param</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span> String number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="重复的只取一次"><a href="#重复的只取一次" class="headerlink" title="重复的只取一次"></a>重复的只取一次</h2><p>遍历某个字段，重复的只取一个（时间戳最近的一个）</p><p>把company换成*，即取出整条记录</p><p>示例为alarm_records_company表中，company重复的按alarm_time时间最近的取值。</p><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><pre class=" language-sql"><code class="language-sql"><span class="token variable">@Select</span><span class="token punctuation">(</span><span class="token string">" select classtab.company FROM (SELECT company, MAX(alarm_time) alarm_time FROM alarm_records_company GROUP BY company) "</span> <span class="token operator">+</span>        <span class="token string">"tmp LEFT JOIN alarm_records_company classtab ON "</span> <span class="token operator">+</span>        <span class="token string">"classtab.company = tmp.company AND classtab.alarm_time = tmp.alarm_time;"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> getAllCompany<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230421125439.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230421125501.png"></p><h2 id="条件查询-SelectProvider"><a href="#条件查询-SelectProvider" class="headerlink" title="条件查询@SelectProvider"></a>条件查询@SelectProvider</h2><p>适用不能提前预知哪个条件来查询</p><p>前端返回需要查询的参数，AlarmService.class层做逻辑判断，不为空的参数即为要查询的</p><h3 id="mapper-1"><a href="#mapper-1" class="headerlink" title="mapper"></a>mapper</h3><pre class=" language-sql"><code class="language-sql"><span class="token variable">@SelectProvider</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> AlarmService<span class="token punctuation">.</span>class<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"selectRecordsByDynamicSql"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>AlarmRecordEntity<span class="token operator">></span> getAlarmRecordsByFeature<span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> features<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="AlarmService-class"><a href="#AlarmService-class" class="headerlink" title="AlarmService.class"></a>AlarmService.class</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">selectRecordsByDynamicSql</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> features<span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span>            <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">"alarm_records"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isEmptyString</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"monitor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"monitor = '"</span><span class="token operator">+</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"monitor"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isEmptyString</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"monitorClass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"monitor_class = '"</span><span class="token operator">+</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"monitorClass"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isEmptyString</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"monitorValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"monitor_value = '"</span><span class="token operator">+</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"monitorValue"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isEmptyString</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"startTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"alarm_time >= '"</span><span class="token operator">+</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"startTime"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isEmptyString</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"endTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"alarm_time &lt;= '"</span><span class="token operator">+</span>features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"endTime"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sql<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230421130700.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230421131608.png"></p><h1 id="改-Update"><a href="#改-Update" class="headerlink" title="改@Update"></a>改@Update</h1><p>&#96;&#96;&#96;sql<br>&#x2F;&#x2F;根据某个字段更新该记录的另一个字段<br>@Update(“UPDATE <code>user</code> SET <code>icon</code>&#x3D;#{icon} WHERE <code>user_name</code>&#x3D;#{userName};”)<br>void updateIconByUserName(@Param(“userName”) String userName, @Param(“icon”) String icon);</p><p>&#x2F;&#x2F;在整条记录上修改各个字段（id主键不会变）<br>@Update(“UPDATE <code>alarm_settings</code> “ +<br>        “SET “ +<br>        “<code>monitor_class</code> &#x3D; #{monitorClass}, “ +<br>        “<code>monitor_value</code> &#x3D; #{monitorValue}, “ +<br>        “<code>lower_limit</code> &#x3D; #{lowerLimit}, “ +<br>        “<code>upper_limit</code> &#x3D; #{upperLimit}, “ +<br>        “<code>message</code> &#x3D; #{message} “ +<br>        “WHERE <code>id</code>&#x3D;#{id}”)<br>public int updateAlarmSetting(AlarmSettingsEntity alarmSettingsEntity);</p><h1 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h1><p>分组查询：<a href="https://blog.csdn.net/weixin_41885239/article/details/115933896?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168204908516800180666125%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168204908516800180666125&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-115933896-null-null.142%5Ev86%5Einsert_down1,239%5Ev2%5Einsert_chatgpt&utm_term=sql%20GROUP%20BY&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_41885239/article/details/115933896?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168204908516800180666125%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168204908516800180666125&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-115933896-null-null.142^v86^insert_down1,239^v2^insert_chatgpt&amp;utm_term=sql%20GROUP%20BY&amp;spm=1018.2226.3001.4187</a></p>]]></content>
      
      
      <categories>
          
          <category> CRUD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRUD </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rtsp视频流快照</title>
      <link href="/2023/03/15/module/rtspphoto/"/>
      <url>/2023/03/15/module/rtspphoto/</url>
      
        <content type="html"><![CDATA[<h1 id="对rtsp视频流快速截图"><a href="#对rtsp视频流快速截图" class="headerlink" title="对rtsp视频流快速截图"></a>对rtsp视频流快速截图</h1><p>可以连续截图，也可以覆盖截图</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>shark<span class="token punctuation">.</span>aio<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Constants<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>ffmpeg<span class="token punctuation">.</span>global<span class="token punctuation">.</span>avutil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FFmpegFrameGrabber<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FFmpegFrameRecorder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>Frame<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FrameRecorder<span class="token punctuation">.</span>Exception<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lbx * @date 2023/2/27 - 15:04 **/</span><span class="token comment" spellcheck="true">/** * 连续截图，覆盖截图 * @author eguid */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageRecorderService</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String input<span class="token punctuation">;</span>    <span class="token keyword">private</span> String output<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer width<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer height<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SimpleDateFormat DataFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url <span class="token operator">=</span> Constants<span class="token punctuation">.</span>IMGOUTPUTPATH<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//该方法监测的文件夹路径</span>    <span class="token keyword">private</span> String PARENT_DIR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 视频快照，连续截图，覆盖截图     * @author eguid     * @param input 可以是动态图片(apng,gif等等)，视频文件（mp4,flv,avi等等）,流媒体地址（http-flv,rtmp，rtsp等等）     * @param width 图像宽度     * @param height 图像高度     * @param mode 模式（1-覆盖模式，0-连续截图，根据文件名称模板顺序生成）     */</span><span class="token comment" spellcheck="true">//    public static void record(String input,String output,Integer width,Integer height,String mode) throws Exception, org.bytedeco.javacv.FrameGrabber.Exception{</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token keyword">public</span> <span class="token function">ImageRecorderService</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span>Integer width<span class="token punctuation">,</span>Integer height<span class="token punctuation">,</span>String mode<span class="token punctuation">,</span>String monitorName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>output <span class="token operator">=</span> url  <span class="token operator">+</span> monitorName <span class="token operator">+</span> <span class="token string">"\\%Y-%m-%d_%H-%M-%S.jpg"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>PARENT_DIR <span class="token operator">=</span> url  <span class="token operator">+</span> monitorName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File localPath1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>PARENT_DIR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localPath1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获得文件目录，判断目录是否存在，不存在就新建一个</span>            localPath1<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        FFmpegFrameGrabber grabber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FFmpegFrameGrabber</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//虽然rtsp本身是协议，但是对于ffmpeg来说，rtsp只是个多路复用器/解复用器。可以支持普通的rtp传输，也可以支持RDT传输的Real-RTSP协议</span>        grabber<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token string">"rtsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置要从服务器接受的媒体类型，为空默认支持所有媒体类型，支持的媒体类型：[video，audio，data]</span>        grabber<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"allowed_media_types"</span><span class="token punctuation">,</span> <span class="token string">"video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置RTSP传输协议为tcp传输模式</span>        grabber<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"rtsp_transport"</span><span class="token punctuation">,</span> <span class="token string">"tcp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * rtsp_flags:[filter_src,prefer_tcp,listen]         * filter_src:仅接受来自协商对等地址和端口的数据包。         * prefer_tcp:如果TCP可用作RTSP RTP传输，请首先尝试使用TCP进行RTP传输。         * listen:充当rtsp服务器，监听rtsp连接         * rtp传输首选使用tcp传输模式         */</span>        grabber<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"rtsp_flags"</span><span class="token punctuation">,</span> <span class="token string">"prefer_tcp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//socket网络超时时间</span>        grabber<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"stimeout"</span><span class="token punctuation">,</span><span class="token string">"3000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置要缓冲以处理重新排序的数据包的数据包数量</span><span class="token comment" spellcheck="true">//grabber.setOption("reorder_queue_size","");</span>        <span class="token comment" spellcheck="true">//设置本地最小的UDP端口，默认为5000端口。</span><span class="token comment" spellcheck="true">//grabber.setOption("min_port","5000");</span>        <span class="token comment" spellcheck="true">//设置本地最大的UDP端口，默认为65000端口。</span><span class="token comment" spellcheck="true">//grabber.setOption("max_port","65000");</span>        grabber<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>width<span class="token operator">==</span>null<span class="token operator">||</span>height<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            width<span class="token operator">=</span>grabber<span class="token punctuation">.</span><span class="token function">getImageWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            height<span class="token operator">=</span>grabber<span class="token punctuation">.</span><span class="token function">getImageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        FFmpegFrameRecorder recorder <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FFmpegFrameRecorder</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//过滤掉日志</span>        avutil<span class="token punctuation">.</span><span class="token function">av_log_set_level</span><span class="token punctuation">(</span>avutil<span class="token punctuation">.</span>AV_LOG_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token string">"image2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mode<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认连续截图</span>        <span class="token punctuation">}</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"strftime"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据日期生成文件名</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            recorder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        CanvasFrame canvas = new CanvasFrame("图像预览");// 新建一个窗口</span><span class="token comment" spellcheck="true">//        canvas.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span>        Frame frame <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只抓取图像画面</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">(</span>frame <span class="token operator">=</span> grabber<span class="token punctuation">.</span><span class="token function">grabImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                显示画面</span><span class="token comment" spellcheck="true">//                canvas.showImage(frame);</span>                <span class="token comment" spellcheck="true">//录制/推流</span>                recorder<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                Thread.sleep(1000);</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FrameRecorder<span class="token punctuation">.</span>Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        recorder<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//close包含stop和release方法。录制文件必须保证最后执行stop()方法，才能保证文件头写入完整，否则文件损坏。</span>        grabber<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//close包含stop和release方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> rtsp视频流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> module </tag>
            
            <tag> rtsp视频流 </tag>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rtsp视频流存储</title>
      <link href="/2023/03/14/module/rtspsave/"/>
      <url>/2023/03/14/module/rtspsave/</url>
      
        <content type="html"><![CDATA[<h1 id="对rtsp视频流存储"><a href="#对rtsp视频流存储" class="headerlink" title="对rtsp视频流存储"></a>对rtsp视频流存储</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>ffmpeg<span class="token punctuation">.</span>global<span class="token punctuation">.</span>avcodec<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>ffmpeg<span class="token punctuation">.</span>global<span class="token punctuation">.</span>avutil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FFmpegFrameGrabber<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FFmpegFrameRecorder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>Frame<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lbx * @date 2023/2/23 - 16:11 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoRecorderService</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> SimpleDateFormat DataFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span>  SimpleDateFormat TimeFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH-mm-ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String inputFile <span class="token operator">=</span> Constants<span class="token punctuation">.</span>LBXINPUT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据当前日期+时间命名</span>    <span class="token keyword">private</span> String outputFile <span class="token operator">=</span>  Constants<span class="token punctuation">.</span>VIDEOOUTPUTPATH <span class="token operator">+</span> <span class="token string">"\\%Y-%m-%d_%H-%M-%S.mp4"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startRecordVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String url <span class="token operator">=</span> <span class="token string">"D:\\项目\\AIO\\recorder\\"</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        File localPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获得文件目录，判断目录是否存在，不存在就新建一个</span>            localPath<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// %03d表示长度为3位，缺位的补零</span>        <span class="token function">frameRecord</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">,</span> outputFile<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按帧录制视频     * @param inputFile-该地址可以是网络直播/录播地址，也可以是远程/本地文件路径     * @param outputFile-文件地址     * @param audioChannel     * @throws Exception     * @throws org.bytedeco.javacv.FrameRecorder.Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">frameRecord</span><span class="token punctuation">(</span>String inputFile<span class="token punctuation">,</span> String outputFile<span class="token punctuation">,</span> <span class="token keyword">int</span> audioChannel<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Exception<span class="token punctuation">,</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FrameRecorder<span class="token punctuation">.</span>Exception <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isStart<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该变量建议设置为全局控制变量，用于控制录制结束</span>        <span class="token comment" spellcheck="true">// 获取视频源</span>        FFmpegFrameGrabber grabber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FFmpegFrameGrabber</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果不设置成tcp连接时，默认使用UDP，丢包现象比较严重</span>        grabber<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"rtsp_transport"</span><span class="token punctuation">,</span> <span class="token string">"tcp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置成tcp以后比较稳定</span>        <span class="token comment" spellcheck="true">//socket网络超时时间</span>        grabber<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"stimeout"</span><span class="token punctuation">,</span><span class="token string">"3000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grabber<span class="token punctuation">.</span><span class="token function">setImageWidth</span><span class="token punctuation">(</span><span class="token number">1280</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grabber<span class="token punctuation">.</span><span class="token function">setImageHeight</span><span class="token punctuation">(</span><span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grabber<span class="token punctuation">.</span><span class="token function">setImageScalingFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        grabber.setPixelFormat(avutil.AV_PIX_FMT_YUV420P);</span>        <span class="token comment" spellcheck="true">// 一般来说摄像头的帧率是25</span>        grabber<span class="token punctuation">.</span><span class="token function">setFrameRate</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 流媒体输出地址，分辨率（长，高），是否录制音频（0:不录制/1:录制）</span>        FFmpegFrameRecorder recorder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FFmpegFrameRecorder</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> <span class="token number">1280</span><span class="token punctuation">,</span><span class="token number">720</span><span class="token punctuation">,</span> audioChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置视频编码H264</span>        recorder<span class="token punctuation">.</span><span class="token function">setVideoCodec</span><span class="token punctuation">(</span>avcodec<span class="token punctuation">.</span>AV_CODEC_ID_H264<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置音频编码</span>        recorder<span class="token punctuation">.</span><span class="token function">setAudioCodec</span><span class="token punctuation">(</span>avcodec<span class="token punctuation">.</span>AV_CODEC_ID_AAC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2000 kb/s, reasonable "sane" area for 720</span><span class="token comment" spellcheck="true">//        recorder.setVideoBitrate(4000000);</span><span class="token comment" spellcheck="true">//        recorder.setPixelFormat(avutil.AV_PIX_FMT_YUV420P);</span><span class="token comment" spellcheck="true">//        recorder.setPixelFormat(0);</span>        <span class="token comment" spellcheck="true">//过滤掉日志</span>        avutil<span class="token punctuation">.</span><span class="token function">av_log_set_level</span><span class="token punctuation">(</span>avutil<span class="token punctuation">.</span>AV_LOG_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"strftime"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据日期生成文件名</span>        recorder<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token string">"segment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//十秒钟一切</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"segment_time"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"segment_filename"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成模式：live（实时生成）、cache（边缓存边生成，只支持m3u8清单文件缓存）</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"segment_list_flags"</span><span class="token punctuation">,</span> <span class="token string">"live"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//强制锁定切片时长</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"segment_atclocktime"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使得每段视频都是从零开始计时</span>        recorder<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">"reset_timestamps"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置帧率</span>        recorder<span class="token punctuation">.</span><span class="token function">setFrameRate</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为是直播，如果需要保证最小延迟，gop最好设置成帧率相同或者帧率*2</span>        <span class="token comment" spellcheck="true">//一个gop表示关键帧间隔，假设25帧/秒视频，gop是50，</span>        <span class="token comment" spellcheck="true">//则每隔两秒有一个关键帧，播放器必须加载到关键帧才能开始解码播放，就是说直播流最多两秒延迟</span>        recorder<span class="token punctuation">.</span><span class="token function">setGopSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置gop</span>        recorder<span class="token punctuation">.</span><span class="token function">setVideoQuality</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频质量</span>        recorder<span class="token punctuation">.</span><span class="token function">setVideoBitrate</span><span class="token punctuation">(</span><span class="token number">2000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//码率，10kb/s</span>        <span class="token comment" spellcheck="true">// 在视频质量和编码速度之间选择适合自己的方案，包括这些选项：</span>        <span class="token comment" spellcheck="true">// ultrafast,superfast, veryfast, faster, fast, medium, slow, slower, veryslow</span>        <span class="token comment" spellcheck="true">// ultrafast offers us the least amount of compression (lower encoder CPU) at the cost of a larger stream size</span>        <span class="token comment" spellcheck="true">// at the other end, veryslow provides the best compression (high encoder CPU) while lowering the stream size</span>        <span class="token comment" spellcheck="true">// (see: https://trac.ffmpeg.org/wiki/Encode/H.264)</span>        <span class="token comment" spellcheck="true">// ultrafast对CPU消耗最低</span>        <span class="token comment" spellcheck="true">// recorder.setVideoOption("preset", "veryslow");</span>        <span class="token comment" spellcheck="true">// 开始取视频源</span>        <span class="token function">recordByFrame</span><span class="token punctuation">(</span>grabber<span class="token punctuation">,</span> recorder<span class="token punctuation">,</span> isStart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recordByFrame</span><span class="token punctuation">(</span>FFmpegFrameGrabber grabber<span class="token punctuation">,</span> FFmpegFrameRecorder recorder<span class="token punctuation">,</span> Boolean status<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Exception<span class="token punctuation">,</span> org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FrameRecorder<span class="token punctuation">.</span>Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建议在线程中使用该方法</span>            grabber<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            recorder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Frame frame <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>status<span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>frame <span class="token operator">=</span> grabber<span class="token punctuation">.</span><span class="token function">grabFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                recorder<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1.用线程sleep</span>                <span class="token comment" spellcheck="true">//2.获取当前时间，做时间差</span>                <span class="token comment" spellcheck="true">//3.@Scheduled</span>            <span class="token punctuation">}</span>            recorder<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            grabber<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FrameRecorder<span class="token punctuation">.</span>Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"录制器启动失败，正在重新启动..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>recorder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尝试关闭录制器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    recorder<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    grabber<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尝试重新开启录制器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                    recorder.start();</span>                    <span class="token function">frameRecord</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">,</span>outputFile<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacv<span class="token punctuation">.</span>FrameRecorder<span class="token punctuation">.</span>Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grabber <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                grabber<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> rtsp视频流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> module </tag>
            
            <tag> rtsp视频流 </tag>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普通类@Autowired注入为null</title>
      <link href="/2023/02/26/developmentproblem/"/>
      <url>/2023/02/26/developmentproblem/</url>
      
        <content type="html"><![CDATA[<p>在普通类里或工具类里注入service或mapper，那么我们直接使用@Autowired注入，注入的service或mapper在方法里是不能直接使用，会报null。</p><p>如果是工具类，工具类里一般都是静态方法，更是无法使用。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方法一：构造器传参"><a href="#方法一：构造器传参" class="headerlink" title="方法一：构造器传参"></a>方法一：构造器传参</h2><p>如果该工具类或普通类是被其他Controller&#x2F;Service层调用的</p><ol><li>可以在Controller&#x2F;Service层@Autowired注入类</li><li>并创造被调用类的构造器</li><li>将对象传到被调用的类</li></ol><p>调用的类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">protected</span> ReceiveAlarmMapping receiveAlarmMapping<span class="token punctuation">;</span>Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread serverHandleThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHandleThread</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> receiveAlarmMapping<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serverHandleThread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serverHandleThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>被调用的类</p><pre class=" language-java"><code class="language-java">Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>ReceiveAlarmMapping receiveAlarmMapping <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">ServerHandleThread</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">,</span> ReceiveAlarmMapping receiveAlarmMapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiveAlarmMapping <span class="token operator">=</span> receiveAlarmMapping<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="方法二：-PostConstruct"><a href="#方法二：-PostConstruct" class="headerlink" title="方法二：@PostConstruct"></a>方法二：@PostConstruct</h2><p>第一步：在java类上添加@Component注解，将java类实例到spring容器中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HJ212ServerHandler</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>第二步：使用@Autowired注入service或mapper。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HJ212ServerHandler</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 需要注入的 service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> ConditionService conditionService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第三步：使用@PostConstruct注解初始化java类和service或mapper。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HJ212ServerHandler</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 需要注入的 service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> ConditionService conditionService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当前类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HJ212ServerHandler hJ212ServerHandler<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 初始化     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        hJ212ServerHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        hJ212ServerHandler<span class="token punctuation">.</span>conditionService <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>conditionService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第四步：以上三步完成后，在方法里就可以使用注入的service或mapper了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HJ212ServerHandler</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 需要注入的 service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> ConditionService conditionService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当前类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HJ212ServerHandler hJ212ServerHandler<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 初始化     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        hJ212ServerHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        hJ212ServerHandler<span class="token punctuation">.</span>conditionService <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>conditionService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 需要使用 serive 的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用查询方法</span>        String monitorName <span class="token operator">=</span> hJ212ServerHandler<span class="token punctuation">.</span>conditionService<span class="token punctuation">.</span><span class="token function">getMonitorName</span><span class="token punctuation">(</span>mn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发常见问题 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提交-确认/取消-弹窗</title>
      <link href="/2023/02/26/html/confirm/"/>
      <url>/2023/02/26/html/confirm/</url>
      
        <content type="html"><![CDATA[<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>在一些“删除”功能按钮处，需要添加一些确认弹窗，避免误触导致数据丢失。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240126145903.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240126150056.png"></p><h1 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h1><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>后端请求地址<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return deleteInfo()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">deleteInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定删除此信息？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>举例</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return deleteVideo()<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/videoDelete(rtsp<span class="token punctuation">=</span>${video.rtsp})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">deleteInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定删除此信息？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 弹窗 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听器</title>
      <link href="/2023/02/25/module/filelistener/"/>
      <url>/2023/02/25/module/filelistener/</url>
      
        <content type="html"><![CDATA[<h1 id="监听器：文件-x2F-文件夹"><a href="#监听器：文件-x2F-文件夹" class="headerlink" title="监听器：文件&#x2F;文件夹"></a>监听器：文件&#x2F;文件夹</h1><blockquote><p>当文件&#x2F;文件夹发生新增或删除就会出发监听器<br>并可以设置相关操作<br>比如视频快照，每个照片都要进行算法识别，可以监听该文件夹，一旦有新照片创建，自动调用算法接口。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>FileAlterationListenerAdaptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>FileAlterationMonitor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>FileAlterationObserver<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ApplicationReadyEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolTaskExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitFFmpeg</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ApplicationReadyEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationReadyEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">runExample</span><span class="token punctuation">(</span><span class="token string">"需要监听的 文件/文件夹 URL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runExample</span><span class="token punctuation">(</span>String PARENT_DIR<span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Exception <span class="token punctuation">{</span>        File parentDir <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>PARENT_DIR<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileAlterationObserver observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileAlterationObserver</span><span class="token punctuation">(</span>parentDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        observer<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileAlterationListenerAdaptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFileCreate</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFileDelete</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDirectoryCreate</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Directory created: "</span> <span class="token operator">+</span> dir<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDirectoryDelete</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Directory deleted: "</span> <span class="token operator">+</span> dir<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileAlterationMonitor monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileAlterationMonitor</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 监听器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件操作 </tag>
            
            <tag> module </tag>
            
            <tag> 监听器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类常用方法</title>
      <link href="/2023/02/12/string/"/>
      <url>/2023/02/12/string/</url>
      
        <content type="html"><![CDATA[<h1 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h1><pre class=" language-java"><code class="language-java">msg<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">";CP="</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span></code></pre><p>replace将此字符串中与目标序列匹配的每个子字符串替换为指定的文字替换序列。</p><p>替换从字符串的开始一直进行到结束</p><p>例如，在字符串“aaa”中，将“aa”替换为“b”将导致“ba”而不是“ab”。</p><p>形参:</p><p>target -要替换的字符值的序列replace -字符值的替换序列</p><h1 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h1><p>substring返回该字符串的子字符串。</p><p>以索引处的字符开始，并扩展到该字符串的末尾。</p><p>例子:</p><ol><li>“unhappy” .substring(2)返回”happy”</li><li>“Harbison”.substring(3)返回”bison”</li><li>“empty”.substring(9)返回””(空字符串)</li></ol><p>以索引1的字符开始，并扩展到该字符串的索引2,但不包含索引2。</p><p>例子:</p><ol><li>“123456”.substring(2,5)返回”345”</li></ol><h1 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"DataTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>当且仅当此字符串包含指定的char值序列时返回true。</p><p>形参:</p><p>S -要搜索的序列</p><p>返回值:</p><p>如果字符串包含s则为True，否则为false</p><h1 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h1><pre class=" language-java"><code class="language-java">data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span></code></pre><p>返回该字符串中指定子字符串第一次出现的索引。</p><p>返回值:</p><p>指定子字符串的第一个出现项的索引，如果没有出现项，则为-1。</p><p>例子:</p><ol><li>“123456”.indexOf(“2”)返回”1”</li></ol>]]></content>
      
      
      <categories>
          
          <category> String类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限管理</title>
      <link href="/2023/02/11/module/authority/"/>
      <url>/2023/02/11/module/authority/</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>将每个岗位对应的操作权限记录于数据库——权限表</li><li>在用户登录时，cookie和login两种方式都设置一下session，通过user查userEntity，进而得到userEntity.postId，用岗位id去权限表查询该岗位的权限authorityEntity</li><li>将authorityEntity传到前端</li><li>前端侧边栏每项操作的标签设置判断<code>th:if=&quot;$&#123;session.authorityEntity.authority6 == &#39;on&#39;&#125;&quot;</code></li></ol><h1 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>两个方法：查询和更新</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.shark.aio.base.authority"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorityController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    AuthorityMapping authorityMapping<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/authorityManagement"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">authority</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            AuthorityEntity park <span class="token operator">=</span> authorityMapping<span class="token punctuation">.</span><span class="token function">getPark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            AuthorityEntity free <span class="token operator">=</span> authorityMapping<span class="token punctuation">.</span><span class="token function">getFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            AuthorityEntity company <span class="token operator">=</span> authorityMapping<span class="token punctuation">.</span><span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">,</span> park<span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"free"</span><span class="token punctuation">,</span> free<span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入权限管理页面成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"authorityManagement"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"进入权限管理页面失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"进入权限管理页面失败！"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/authorityUpdate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">authorityUpdate</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> AuthorityEntity object<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            authorityMapping<span class="token punctuation">.</span><span class="token function">updateAuthority</span><span class="token punctuation">(</span>object <span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"修改权限管理成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">authority</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"修改权限管理失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改权限管理失败！"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数据库映射</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthorityMapping</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `authority` WHERE `id`=2;"</span><span class="token punctuation">)</span>    AuthorityEntity <span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `authority` WHERE `id`=3;"</span><span class="token punctuation">)</span>    AuthorityEntity <span class="token function">getPark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `authority` WHERE `id`=4;"</span><span class="token punctuation">)</span>    AuthorityEntity <span class="token function">getFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `authority` WHERE `id`=#{id};"</span><span class="token punctuation">)</span>    AuthorityEntity <span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * 更新     */</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE `authority` SET `authority1`=#{authority1}, `authority2`=#{authority2} ,"</span> <span class="token operator">+</span>            <span class="token string">"`authority3`=#{authority3}, `authority4`=#{authority4},`authority5`=#{authority5},"</span>            <span class="token operator">+</span> <span class="token string">" `authority6`=#{authority6}, `authority7`=#{authority7} "</span><span class="token operator">+</span> <span class="token string">"WHERE `id`=#{id};"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">updateAuthority</span><span class="token punctuation">(</span>AuthorityEntity object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230530161104.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x_panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x_title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>企业管理人员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/authorityUpdate}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal form-label-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>control-label col-md-3 col-sm-3 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分配权限<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 col-sm-9 <span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${company.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authority1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${company.authority1}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 污染源监测                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authority2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${company.authority2}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 用电监测                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authority3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${company.authority3}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 工况监测                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authority4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${company.authority4}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 视频监测                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authority5<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${company.authority5}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 智慧预警                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authority6<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${company.authority6}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 文件管理                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authority7<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${company.authority7}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 日志管理                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ln_solid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 col-sm-9  offset-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>复位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="调用权限"><a href="#调用权限" class="headerlink" title="调用权限"></a>调用权限</h1><h2 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h2><p>先查询权限数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过登录名查询userEntity</span>UserEntity userEntity <span class="token operator">=</span> userMapping<span class="token punctuation">.</span><span class="token function">queryUserByUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>userEntity <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Constants<span class="token punctuation">.</span>LOGIN<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过岗位id查询authorityEntity</span>AuthorityEntity authorityEntity <span class="token operator">=</span> authorityMapping<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">.</span><span class="token function">getPostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userEntity"</span><span class="token punctuation">,</span>userEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"authorityEntity"</span><span class="token punctuation">,</span>authorityEntity<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h2><p>标签进行判断</p><pre class=" language-html"><code class="language-html">//两种条件，且数据类型是int<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.userEntity.postId <span class="token punctuation">=</span><span class="token punctuation">=</span> 1 || session.userEntity.postId <span class="token punctuation">=</span><span class="token punctuation">=</span> 3}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/allUserEntity}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>//一种条件，且数据类型是int<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.userEntity.postId <span class="token punctuation">=</span><span class="token punctuation">=</span> 1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/authorityManagement}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>权限管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>//数据类型是String<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.authorityEntity.authority7 <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>on<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/logManagement}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>日志管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> authority </category>
          
      </categories>
      
      
        <tags>
            
            <tag> authority </tag>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境配置</title>
      <link href="/2023/02/10/linux-huan-jing-pei-zhi/"/>
      <url>/2023/02/10/linux-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="若以前安装过，先卸载"><a href="#若以前安装过，先卸载" class="headerlink" title="若以前安装过，先卸载"></a>若以前安装过，先卸载</h2><pre><code>sudo apt-get --purge remove nginx sudo apt-get --purge remove nginx-common dpkg --get-selections|grep nginx</code></pre><h2 id="1-前置环境"><a href="#1-前置环境" class="headerlink" title="1.前置环境"></a>1.前置环境</h2><pre><code>sudo apt-get updatesudo apt-get install gccsudo apt-get install rubysudo apt-get install zlib1gsudo apt-get install zlib1g.devsudo apt-get install libpcre3 libpcre3-devsudo apt-get install openssl libssl-dev</code></pre><h2 id="2-下载nginx源码"><a href="#2-下载nginx源码" class="headerlink" title="2.下载nginx源码"></a>2.下载nginx源码</h2><p>下载地址在<a href="https://nginx.org/">https://nginx.org</a><br>源码在压缩包中附带1.22.1版本，nginx-1.22.1.tar.gz<br>解压到用户主目录 ~</p><p>注意：如果使用向日葵传输文件夹，文件夹的owner和gruop默认是root，对该文件夹的一切操作都需要root权限。或者也可以使用下面的方法：</p><pre><code>sudo chown -R user &lt;文件夹路径&gt;sudo chgrp -R user &lt;文件夹路径&gt;</code></pre><h2 id="3-下载nginx-http-flv-module"><a href="#3-下载nginx-http-flv-module" class="headerlink" title="3.下载nginx-http-flv-module"></a>3.下载nginx-http-flv-module</h2><p>在压缩包中附带1.2.10版本nginx-http-flv-module-1.2.10.zip<br>把nginx-http-flv-module解压，移动到&#x2F;usr&#x2F;local目录下，并将文件夹改名为：nginx-http-flv-module</p><pre><code>sudo mv nginx-http-flv-module-1.2.10 /usr/local/nginx-http-flv-module</code></pre><p>进入nginx目录</p><pre><code>cd ~/nginx-1.22.1</code></pre><p>将nginx-http-flv-module添加到nginx中</p><pre><code>sudo ./configure --prefix=/usr/local  --with-http_ssl_module --add-module=/usr/local/nginx-http-flv-module</code></pre><p>生成make文件</p><pre><code>sudo make</code></pre><p>安装</p><pre><code>sudo make install</code></pre><p>测试是否安装成功</p><pre><code>nginx -v</code></pre><h2 id="4-配置nginx"><a href="#4-配置nginx" class="headerlink" title="4.配置nginx"></a>4.配置nginx</h2><p>需要修改nginx的配置文件，它的位置在nginx-1.22.1&#x2F;conf&#x2F;nginx.conf<br>nginx.conf文件内容如下：</p><pre><code>worker_processes  10; #should be 1 for Windows, for it doesn&#39;t support Unix domain socket#worker_processes  auto; #from versions 1.3.8 and 1.2.5#worker_cpu_affinity  0001 0010 0100 1000; #only available on FreeBSD and Linux#worker_cpu_affinity  auto; #from version 1.9.10error_log logs/error.log error;#if the module is compiled as a dynamic module and features relevant#to RTMP are needed, the command below MUST be specified and MUST be#located before events directive, otherwise the module won&#39;t be loaded#or will be loaded unsuccessfully when NGINX is started#load_module modules/ngx_http_flv_live_module.so;events &#123;    worker_connections  10240;&#125;http &#123;        include       mime.types;        default_type  application/octet-stream;        sendfile        on;       keepalive_timeout  65;        server &#123;            listen       9000; #http-flv的拉流端口            server_name  localhost【这个地方写你的ip、或者说是域名都是可以的--】; #http-flv的拉流ip            location / &#123;                root   html;                index  index.html index.htm;               &#125;            #http-flv的相关配置            location /live&#123;                flv_live on; #打开HTTP播放FLV直播流功能                chunked_transfer_encoding  on;                add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;                add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;            &#125;            location /hls&#123;                types &#123;                    application/vnd.apple.mpegurl m3u8;            video/mp2t ts;                 &#125;                 root ~/nginx-1.22.1/html/hls;                 add_header &#39;Cache-Control&#39; &#39;no-cache&#39;;            &#125;             location /dash &#123;                root ~/nginx-1.22.1/html/dash;                add_header &#39;Cache-Control&#39; &#39;no-cache&#39;;            &#125;              location /stat &#123;                #configuration of push &amp; pull status                  rtmp_stat all;                  rtmp_stat_stylesheet stat.xsl;             &#125;            location /stat.xsl &#123;                  root ~/nginx-1.22.1/html;            &#125;              location /control &#123;                rtmp_control all; #configuration of control module of rtmp            &#125;             error_page   500 502 503 504  /50x.html;            location = /50x.html &#123;                root   html;            &#125;        &#125; &#125;rtmp_auto_push on;rtmp_auto_push_reconnect 1s;rtmp_socket_dir /tmp;rtmp&#123;        out_queue 4096;        out_cork 8;        max_streams 128;        timeout 15s;        drop_idle_publisher 15s;        log_interval 5s;        log_size 1m;        server&#123;            #推流端口            listen 1935;            #推流应用名称             application myapp&#123;                 live on;      record off;                 gop_cache on;              &#125;             application hls&#123;                  live on;                  hls on;                  hls_path ~/nginx-1.22.1/html/hls;                  hls_fragment 1s;                        hls_playlist_length 3s;            &#125;             application dash&#123;                   live on;                   dash on;                   dash_path ~/nginx-1.22.1/html/dash;             &#125;         &#125;&#125;</code></pre><p>文件中有五处路径为<del>&#x2F;nginx-1.22.1，在实际使用时要换成具体的目录，例如用户为user，那么这里就要把</del>换成用户主目录&#x2F;home&#x2F;user<br>该文件要放到~&#x2F;nginx-1.22.1&#x2F;conf文件夹下</p><h2 id="5-启动nginx"><a href="#5-启动nginx" class="headerlink" title="5.启动nginx"></a>5.启动nginx</h2><pre><code>cd ~/nginx-1.22.1sudo nginx -c conf/nginx.confsudo nginx -s reload</code></pre><h2 id="6-安装ffmpeg"><a href="#6-安装ffmpeg" class="headerlink" title="6.安装ffmpeg"></a>6.安装ffmpeg</h2><pre><code>sudo apt-get install ffmpeg</code></pre><h2 id="7-测试推流"><a href="#7-测试推流" class="headerlink" title="7.测试推流"></a>7.测试推流</h2><pre><code>ffmpeg -re -i rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 -vcodec copy -acodec copy -f flv &quot;rtmp://127.0.0.1:1935/myapp/test&quot;</code></pre><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><pre><code>sudo apt-get install curlcurl -sSL https://get.daocloud.io/docker | sh</code></pre><h2 id="拉取镜像源"><a href="#拉取镜像源" class="headerlink" title="拉取镜像源"></a>拉取镜像源</h2><pre><code>sudo docker pull iludfy/predict_model</code></pre><h2 id="Docker创建容器并启动"><a href="#Docker创建容器并启动" class="headerlink" title="Docker创建容器并启动"></a>Docker创建容器并启动</h2><p>拉取完镜像需要挂载到容器中才能启动，命令是docker run，它的参数如下：</p><pre><code>sudo docker run [Options] image#参数说明--name=&quot;名字&quot;           指定容器名字-d                     后台方式运行-it                    使用交互方式运行,进入容器查看内容-p                     指定容器的端口    -p ip:主机端口:容器端口  配置主机端口映射到容器端口    -p 主机端口:容器端口（常用）    -p 容器端口-P                     随机指定端口-e   环境设置-v   容器数据卷挂载</code></pre><p>规定端口为5000，输入下面的命令：</p><pre><code>sudo docker run -p 5000:5000 iludfy/predict_model</code></pre><p>一个容器就已经被创建好并启动了。</p><h3 id="端口被占用解决办法："><a href="#端口被占用解决办法：" class="headerlink" title="端口被占用解决办法："></a>端口被占用解决办法：</h3><p>以ubuntu系统为例：<br>先查到5000端口被哪个进程占用：</p><pre><code>sudo netstat -ntlp</code></pre><p>查到进程id后，使用kill命令杀死进程：</p><pre><code>sudo kill &#123;pid&#125;</code></pre><p>查看刚刚创建的容器的id：</p><pre><code>sudo docker ps -a</code></pre><p>启动</p><pre><code>sudo docker start &#123;id&#125;</code></pre><h1 id="MySQL-8-0"><a href="#MySQL-8-0" class="headerlink" title="MySQL 8.0"></a>MySQL 8.0</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先切换到root用户下：</p><pre><code>sudo su</code></pre><p>本文档中使用的操作系统是ubuntu20.04，默认使用apt下载mysql默认版本可能是mysql5，所以先去官网<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a>下载mysql8的源：<br><img src="/./mysql8%E5%AE%89%E8%A3%851.png" alt="img"><br><img src="/./mysql8%E5%AE%89%E8%A3%852.png" alt="img"><br>我们将下载到的<code>mysql-apt-config_0.8.24-1_all.deb</code>文件放到用户主目录下，执行下面的命令：</p><pre><code>dpkg -i mysql-apt-config_0.8.24-1_all.deb</code></pre><p>会出现下面的界面，选择<code>mysql server -&gt; mysql-8.0 -&gt; ok</code><br><img src="/./mysql8%E5%AE%89%E8%A3%853.png" alt="img"><br>之后我们使用下面的命令安装mysql：</p><pre><code>apt-get upgradeapt-get install mysql-server</code></pre><p>安装过程中会让你设置初始密码：<br><img src="/./mysql8%E5%AE%89%E8%A3%854.png" alt="img"><br>若是没出错就已经安装好了，可以尝试登录一下：</p><pre><code>mysql -u root -p</code></pre><p>输入刚才的初始密码即可。<br><img src="/./mysql8%E5%AE%89%E8%A3%855.png" alt="img"></p><h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><p>防火墙这里先不提，需要提前配置好防火墙，开放端口。<br>mysql8默认只有本机可以访问，如果需要从其他机器远程访问数据库，需要进行配置。<br>登录数据库，查看权限表：</p><pre><code>mysql -u root -pmysql&gt; use mysql;mysql&gt; select user,host from user where user=&#39;root&#39;;</code></pre><p>会查询到如下结果：</p><pre><code>+------+-----------------+| user | host            |+------+-----------------+|root  | localhost       |+------+-----------------+1 row in set (0.00sec)</code></pre><p>这里可以看到root用户的host字段是localhost，代表root用户只有本机可以访问。把它改成%即可远程访问：</p><pre><code>update user set host = &#39;%&#39; where user =&#39;root&#39;;flush privileges;</code></pre><p>然后mysql就允许远程主机访问了。</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>如果安装时未提示创建密码，则用sudo命令，用户root进入密码123456后，可以创建一个新用户，并用root用户赋予新建用户的权限。</p><h3 id="远程连接不上"><a href="#远程连接不上" class="headerlink" title="远程连接不上"></a>远程连接不上</h3><ol><li>修改端口</li></ol><pre class=" language-sql"><code class="language-sql">sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>cnf</code></pre><p>&#x2F;etc&#x2F;mysql&#x2F;下面有个mysql.cnf类似的文件。修改端口127.0.0.1为0.0.0.0</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230427160412.png"></p><p>2.修改host</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> <span class="token keyword">user</span>             <span class="token operator">|</span> host      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> root             <span class="token operator">|</span> localhost<span class="token operator">|</span><span class="token operator">|</span> admin            <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>infoschema <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span><span class="token keyword">session</span>    <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>sys        <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span> mysql<span class="token operator">></span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host <span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> <span class="token keyword">user</span>             <span class="token operator">|</span> host      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span><span class="token operator">|</span> root             <span class="token operator">|</span> <span class="token operator">%</span>         <span class="token operator">|</span><span class="token operator">|</span> admin            <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>infoschema <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span><span class="token keyword">session</span>    <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>sys        <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-----------+</span></code></pre><ol start="3"><li>修改加密方式</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' identified with mysql_native_password by '</span>你的密码'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新权限</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h2><p>先检验是否安装java:</p><pre><code>java -version</code></pre><p>若没有安装java，会得到如下输出：</p><pre><code>user@user-NULL:~$ java -versionCommand &#39;java&#39; not found, but can be installed with:sudo apt install openjdk-11-jre-headless  # version 11.0.18+10-0ubuntu1~20.04.1, orsudo apt install default-jre              # version 2:1.11-72sudo apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04sudo apt install openjdk-17-jre-headless  # version 17.0.6+10-0ubuntu1~20.04.1sudo apt install openjdk-8-jre-headless   # version 8u362-ga-0ubuntu1~20.04.1sudo apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04</code></pre><p>上面已经自动列出可选的版本了，我们这里选择java8安装：</p><pre><code>sudo apt install openjdk-8-jre-headlesssudo apt install openjdk-8-jdk-headless</code></pre><p>安装好后再检查java安装：</p><pre><code>user@user-NULL:~$ java -versionopenjdk version &quot;1.8.0_362&quot;OpenJDK Runtime Environment (build 1.8.0_362-8u362-ga-0ubuntu1~20.04.1-b09)OpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)user@user-NULL:~$ javac -versionjavac 1.8.0_362</code></pre><h2 id="配置java环境变量"><a href="#配置java环境变量" class="headerlink" title="配置java环境变量"></a>配置java环境变量</h2><p>要配置环境变量，首先需要知道java的安装路径：</p><pre><code>sudo update-alternatives --config java</code></pre><p>得到如下输出：</p><pre><code>链接组 java (提供 /usr/bin/java)中只有一个候选项：/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java无需配置。</code></pre><p>拿到路径后打开环境变量配置文件：</p><pre><code>sudo vim /etc/environment</code></pre><p>在此文件的末尾，添加java路径：</p><pre><code>JAVA_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java&quot;</code></pre><p>修改此文件将为系统上的所有用户设置JAVA_HOME路径。</p><p>保存文件并退出编辑器。</p><p>现在重新加载此文件：</p><pre><code>source /etc/environment</code></pre><p>验证是否已设置环境变量：</p><pre><code>echo $JAVA_HOME</code></pre><p>输出路径：</p><pre><code>/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java</code></pre><p>其他用户需要执行命令source &#x2F;etc&#x2F;environment或注销并重新登录才能应用此设置。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>1、解锁文件夹下所有文件</p><ul><li>sudo chown -R username filename</li></ul><p>2、解锁单个文件</p><ul><li>sudo chmod 777 filename</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签属性（后端）</title>
      <link href="/2023/01/07/module/html/"/>
      <url>/2023/01/07/module/html/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230421135305.png"></p><h1 id="HTML标签属性（由后端控制）"><a href="#HTML标签属性（由后端控制）" class="headerlink" title="HTML标签属性（由后端控制）"></a>HTML标签属性（由后端控制）</h1><p>我们需要在HTML标签控制一条属性，该属性的性质来自后端<br>例如 &lt;input&gt; 标签里的checked标签，通过它控制复选框是否选择<br>true为选上，false或空是没选。后面尝试用0和1也可以控制<br>但是前端返回给后端的是off和on</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-switch<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">=</span>${authority.authority2}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 用电监测    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="AuthorityController"><a href="#AuthorityController" class="headerlink" title="AuthorityController"></a>AuthorityController</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/authorityManagement"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">authority</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">)</span><span class="token punctuation">{</span>    AuthorityEntity authority <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorityEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"authority"</span><span class="token punctuation">,</span> authority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"authorityManagement"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AuthorityEntity"><a href="#AuthorityEntity" class="headerlink" title="AuthorityEntity"></a>AuthorityEntity</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//0和1，true和false都可以控制</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> String authority1 <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span><span class="token keyword">private</span> String authority2 <span class="token operator">=</span> <span class="token string">"false"</span>  <span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> authority3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> authority4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> authority5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> authority6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> authority7  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML标签属性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签属性 </tag>
            
            <tag> 交互数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/12/12/jvm/"/>
      <url>/2022/12/12/jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM整体结构"><a href="#JVM整体结构" class="headerlink" title="JVM整体结构"></a>JVM整体结构</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JVM（Java Virtual Machine）</p><ol><li><p>只要该语言能被编译为字节码文件（Class文件），就可以被虚拟机识别并装载运行。</p></li><li><p>虚拟机分为系统虚拟机和程序虚拟机：</p></li></ol><p>系统虚拟机如Visual Box，VMware，提供一个可运行完整操作系统的软件平台。</p><p>程序虚拟机如JVM，专门为执行单个计算机程序设计。</p><ol start="3"><li>JVM优势</li></ol><p>跨平台性、优秀的垃圾回收器、可靠的即时编译器、自动内存管理</p><ol start="4"><li>JVM作用</li></ol><p>装载字节码到其内部，解释&#x2F;编译为对应平台的机器指令。（二进制字节码的运行环境）</p><ol start="5"><li>JVM位置</li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230524225833.png"></p><ol start="6"><li>整体结构</li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230524230022.png"></p><p>HotSpot VM为主流虚拟机。采用解释器和即时编译器并存的架构。</p><p>热点代码探测技术：</p><ul><li>通过计数器找到最具编译价值代码，触发即时编译或栈上替换。</li><li>通过编译器与解释器协调工作，在程序响应时间与执行性能取得平衡。</li></ul><ol start="7"><li>执行流程</li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230524231145.png"></p><ol start="8"><li>架构模型</li></ol><p>栈的指令集架构</p><p>特点：</p><ul><li>设计和实现更简单，适用资源受限的系统</li><li>避开寄存器的分配难题：使用零地址指令方式分配</li><li>指令集更小，编译容易。</li><li>不需要硬件支持</li><li>缺点是需要更多的指令来实现功能。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>启动</li></ol><p>由引导类加载器（bootstrap class loader）创建一个初始类来启动。</p><ol start="2"><li>执行</li></ol><p>程序执行时才运行，程序结束他就结束。</p><ol start="3"><li>退出</li></ol><ul><li>正常执行结束</li><li>异常</li><li>操作系统错误</li><li>调用Runtime类或System类的exit方法</li></ul><h1 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%9B%BE%E7%89%872.png"></p><p>加载类的信息存放方法区的内存空间，方法区还会存放运行时常量池信息，字符串字面量和数字常量（常量池部分的内存映射）</p><ol><li>加载</li></ol><ul><li>获取该类的二进制字节流</li><li>静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成代表该类的java.lang.Class对象</li></ul><ol start="2"><li>链接</li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230524234852.png"></p><ol start="3"><li>初始化<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230524235459.png"></li></ol><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><p>虚拟机自带：</p><ol><li>引导类加载器（启动类加载器 BootStrap ClassLoader）</li></ol><ul><li>C++实现</li><li>加载Java的<strong>核心库</strong>，提供JVM自身需要的类</li><li>没有父加载器，不继承java.lang.ClassLoader</li><li>加载扩展类和应用程序类加载器，并为他们的父类加载器</li><li>只加载包名为java、javax、sun开头的类</li></ul><ol start="2"><li>扩展类加载器（Extension ClassLoader）</li></ol><ul><li>Java实现</li><li>派生于ClassLoader</li></ul><ol start="3"><li>应用程序加载类（系统类加载器 AppClassLoader）</li></ol><ul><li>java实现</li><li>派生于ClassLoader</li><li>程序默认的类加载器，Java应用的类均由其加载</li></ul><p>用户自定义类加载器</p><p>目的：</p><ul><li>隔离加载类</li><li>修改加载方式</li><li>扩展加载源</li></ul><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>java采用按需加载，并采用双亲委派模式</p><p>比如：自定义String类，并且在自定义的java.lang文件下，加载String时，先判断自定义的String是否有父类，从系统类加载器到拓展类加载器，最后到引导类加载器，只要父类里有String就一直向上找，如果上面没有就加载子类。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/sdddfagxbx.png"></p><p>优势：</p><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心API被篡改</li></ul><p>这也是一种沙箱机制，在规定好的盒子里运行不影响外面的环境。</p><h2 id="两个Class是否为同一个类"><a href="#两个Class是否为同一个类" class="headerlink" title="两个Class是否为同一个类"></a>两个Class是否为同一个类</h2><ol><li>类名、包名一致</li><li>加载这个类的ClassLoader必须相同</li></ol><p>即使同一个class文件，但加载的ClassLoader实例对象不同，也是不等的</p><h1 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h1><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230601213757.png"></p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>内存是硬盘和CPU的中间仓库和桥梁，承载存储系统和应用程序是实时运行。</p><p>JVM内存布局规定Java在运行时内存申请、分配、管理的策略。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230601214531.png"></p><p>每个线程：独立包括程序计数器、栈、本地栈</p><p>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>每个线程都与操作系统的本地线程直接映射</p><p>java线程准备执行后，操作系统的本地线程同时创建，线程终止后，本地线程也会回收。</p><p>操作系统的线程杜泽所有线程的安排调度到任何一个可用的CPU，一旦本地线程初始化成功，就会调用Java线程的run（）方法。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sokect传输对象</title>
      <link href="/2022/11/23/module/socket/"/>
      <url>/2022/11/23/module/socket/</url>
      
        <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>可以理解为是对TCP的实现。</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li><p>创建ServerSocket对象，绑定监听端口</p></li><li><p>通过accept0方法监听客户端请求</p></li><li><p>连接建立后，通过输入流读取客户端发送的请求信息</p></li><li><p>通过输出流向客户端发送响应信息</p></li><li><p>关闭相关资源</p></li></ol><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端 :"></a>客户端 :</h2><ol><li><p>创建Socket对象，指明需要连接的服务器的地址和端口号</p></li><li><p>连接建立后，通过输出流向服务器端发送请求信息</p></li><li><p>通过输入流获取服务器响应的信息</p></li><li><p>关闭相关资源</p></li></ol><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><p>对象输出流和对象输入流（ObjectOutputStream和ObjectInputStream）只能将支持 java.io.Serializable 接口的对象写入流中。需要传递的类必须实现需要实现Serializable接口接口。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token comment" spellcheck="true">//需要实现Serializable接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorityEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String authority1 <span class="token operator">=</span> <span class="token string">"off"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String authority2 <span class="token operator">=</span> <span class="token string">"off"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String authority3 <span class="token operator">=</span> <span class="token string">"off"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String authority4 <span class="token operator">=</span> <span class="token string">"off"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String authority5 <span class="token operator">=</span> <span class="token string">"off"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String authority6 <span class="token operator">=</span> <span class="token string">"off"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String authority7 <span class="token operator">=</span> <span class="token string">"off"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>序列化：将一个特定的数据结构转换为一组字节的过程。ObjectOutputStream</li><li>反序列化：将一组字节转换为特定的数据结构的过程。ObjectInputStream</li></ul><h2 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h2><p>将 Java 对象的基本数据类型和图形写入 OutputStream。</p><p>可以使用 ObjectInputStream 读取（重构）对象。</p><p>通过在流中使用文件可以实现对象的持久存储。</p><p>如果流是网络套接字流，则可以在另一台主机上或另一个进程中重构对象。</p><blockquote><p>常用方法：<br>&#x2F;&#x2F;将指定的对象写入 ObjectOutputStream。<br>public final void writeObject(Object obj);<br>如：</p></blockquote><pre class=" language-java"><code class="language-java">OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>authorityEntity<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h2><p>对以前使用 ObjectOutputStream 写入的基本数据和对象进行反序列化。</p><blockquote><p>常用方法：<br>&#x2F;&#x2F;从 ObjectInputStream 读取对象。<br>public final Object readObject();<br>如：</p></blockquote><pre class=" language-java"><code class="language-java">InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须保证服务端和客户端的 对象 包名一致</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"客户端发送的对象："</span> <span class="token operator">+</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol><li><p>创建服务端Socket：ServerSocket</p><p>创建客户端Socket：Socket；</p></li><li><p>打开连接到Socket的InputStream&#x2F;OutputStream;</p></li><li><p>按照协议对Socket进行读写操作；</p></li><li><p>关闭InputStream和OutputStream和Socket。</p></li></ol><h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接受请求并开起处理线程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContractPart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录客户端的数量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动，等待客户端的连接。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>count<span class="token punctuation">;</span>                Thread serverHandleThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHandleThread</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                serverHandleThread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                serverHandleThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上线的客户端有"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"个！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                InetAddress inetAddress <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前客户端的IP地址是："</span> <span class="token operator">+</span> inetAddress<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 服务器对socket进行处理的线程 */</span><span class="token keyword">class</span> <span class="token class-name">ServerHandleThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ServerHandleThread</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//TODO Auto-generated method stub</span>        OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>        PrintWriter pw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//readObject()方法必须保证服务端和客户端的 对象 包名一致，要不然会出现找不到类的错误</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送的对象："</span> <span class="token operator">+</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">shutdownInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//禁用套接字的输入流</span>            os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎登录！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建客户端的Socket，指定服务器的IP和端口</span>            Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"454585x8l0.qicp.vip"</span><span class="token punctuation">,</span> <span class="token number">14031</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.获取该Socket的输出流，用来向服务器发送信息</span>            OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将对象序列化，转为字节</span>            ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对象写入输出流</span>            AuthorityEntity authorityEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorityEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>authorityEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String infoString <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.获取输入流，取得服务器的信息</span>            InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String info <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>info <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器端的信息："</span> <span class="token operator">+</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            socket<span class="token punctuation">.</span><span class="token function">shutdownInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>ObjectOutputStream 和 ObjectInputStream 分别与 FileOutputStream 和 FileInputStream 一起使用时，可以为应用程序提供对对象图形的持久存储。</p><h2 id="传输多个参数"><a href="#传输多个参数" class="headerlink" title="传输多个参数"></a>传输多个参数</h2><p>分别添加各个参数，可以是同类。但接受方顺序必须保持一致</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>alarmRecordEntity <span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token string">"2"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//服务端</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AlarmRecordEntity<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230419153259.png"></p>]]></content>
      
      
      <categories>
          
          <category> Sokect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sokect </tag>
            
            <tag> 传输对象 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存磁盘网络参数</title>
      <link href="/2022/10/11/module/system/"/>
      <url>/2022/10/11/module/system/</url>
      
        <content type="html"><![CDATA[<h1 id="内存、磁盘"><a href="#内存、磁盘" class="headerlink" title="内存、磁盘"></a>内存、磁盘</h1><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 获取内存使用情况     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/diskCapacityManagement"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">diskCapacityManagement</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse reps<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            OperatingSystemMXBean mem <span class="token operator">=</span> <span class="token punctuation">(</span>OperatingSystemMXBean<span class="token punctuation">)</span> ManagementFactory<span class="token punctuation">.</span><span class="token function">getOperatingSystemMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取内存总容量</span>            <span class="token keyword">long</span> totalMemorySize <span class="token operator">=</span> mem<span class="token punctuation">.</span><span class="token function">getTotalPhysicalMemorySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取可用内存容量(剩余物理内存）</span>            <span class="token keyword">long</span> freeMemorySize <span class="token operator">=</span> mem<span class="token punctuation">.</span><span class="token function">getFreePhysicalMemorySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> usedRAMRate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>totalMemorySize <span class="token operator">-</span> freeMemorySize<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> totalMemorySize<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DecimalFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#0.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        File[] disks = File.listRoots();</span>            File disks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>DISKCAPACITYPATH<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取总容量</span>            <span class="token keyword">long</span> totalSpace <span class="token operator">=</span> disks<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取剩余容量</span>            <span class="token keyword">long</span> usableSpace <span class="token operator">=</span> disks<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取已经使用的容量</span>            <span class="token keyword">long</span> usedSpace <span class="token operator">=</span> totalSpace <span class="token operator">-</span> usableSpace<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取使用率</span>            <span class="token keyword">float</span> useRate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>usedSpace <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> totalSpace<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isConnect <span class="token operator">=</span> <span class="token function">isConnect</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网络状态"</span> <span class="token operator">+</span> isConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>            DiskCapacityEntity diskCapacity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskCapacityEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            diskCapacity<span class="token punctuation">.</span><span class="token function">setTotalMemorySize</span><span class="token punctuation">(</span><span class="token function">transformation</span><span class="token punctuation">(</span>totalMemorySize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            diskCapacity<span class="token punctuation">.</span><span class="token function">setTotalSpace</span><span class="token punctuation">(</span><span class="token function">transformation</span><span class="token punctuation">(</span>totalSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            diskCapacity<span class="token punctuation">.</span><span class="token function">setConnect</span><span class="token punctuation">(</span>isConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>            diskCapacity<span class="token punctuation">.</span><span class="token function">setUsedRAMRate</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>usedRAMRate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            diskCapacity<span class="token punctuation">.</span><span class="token function">setUseRate</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>useRate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"diskCapacity"</span><span class="token punctuation">,</span> diskCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入磁盘管理页面成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"进入磁盘管理页面失败！"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"diskCapacityManagement"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> isConnect <span class="token operator">=</span> <span class="token function">isConnect</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网络状态"</span> <span class="token operator">+</span> isConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>        DiskCapacityEntity diskCapacity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskCapacityEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        diskCapacity<span class="token punctuation">.</span><span class="token function">setTotalMemorySize</span><span class="token punctuation">(</span><span class="token function">transformation</span><span class="token punctuation">(</span>totalMemorySize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        diskCapacity<span class="token punctuation">.</span><span class="token function">setTotalSpace</span><span class="token punctuation">(</span><span class="token function">transformation</span><span class="token punctuation">(</span>totalSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        diskCapacity<span class="token punctuation">.</span><span class="token function">setConnect</span><span class="token punctuation">(</span>isConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>        diskCapacity<span class="token punctuation">.</span><span class="token function">setUsedRAMRate</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>usedRAMRate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        diskCapacity<span class="token punctuation">.</span><span class="token function">setUseRate</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>useRate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"diskCapacity"</span><span class="token punctuation">,</span> diskCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"diskCapacityManagement"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将字节容量转化为GB     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">transformation</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        DecimalFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#0.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> size <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"GB"</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="网络情况（是否连接）"><a href="#网络情况（是否连接）" class="headerlink" title="网络情况（是否连接）"></a>网络情况（是否连接）</h1><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isConnect</span><span class="token punctuation">(</span>String urlPath<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义其返回的状态，默认为false，网络不正常</span>        <span class="token keyword">boolean</span> connect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process process<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//-c3代表Linux测试三次，Windows不用加-c参数</span>            String command <span class="token operator">=</span> ProcessUtil<span class="token punctuation">.</span>IS_WINDOWS<span class="token operator">?</span><span class="token string">"ping "</span> <span class="token operator">:</span> <span class="token string">"ping -c3 "</span><span class="token punctuation">;</span>            process <span class="token operator">=</span>  runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span> command <span class="token operator">+</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream is <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            System.out.println("返回值为: {}"+sb);</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> sb <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String ttl <span class="token operator">=</span> ProcessUtil<span class="token punctuation">.</span>IS_WINDOWS <span class="token operator">?</span> <span class="token string">"TTL"</span> <span class="token operator">:</span> <span class="token string">"ttl"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ttl<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 网络畅通</span>                    connect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 网络不畅通</span>                    connect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> connect<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>table <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"table table-striped projects"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>thead<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>th style<span class="token operator">=</span><span class="token string">"width: 10%"</span><span class="token operator">></span>内存总容量<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span>th style<span class="token operator">=</span><span class="token string">"width: 10%"</span><span class="token operator">></span>磁盘总容量<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span>th style<span class="token operator">=</span><span class="token string">"width: 10%"</span><span class="token operator">></span>网络状态<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span>th<span class="token operator">></span>内存利用率<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span>th<span class="token operator">></span>存储利用率<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span>th<span class="token operator">></span>编辑<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>    <span class="token operator">&lt;</span>tbody<span class="token operator">></span>    <span class="token operator">&lt;</span>tr th<span class="token operator">:</span>each<span class="token operator">=</span><span class="token string">"disk:${diskCapacity}"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"${disk.totalMemorySize}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"${disk.totalSpace}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td th<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"${disk.connect} eq true"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-success btn-sm btn-round"</span><span class="token operator">></span>良好<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td th<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"${disk.connect }eq false"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-danger btn-sm btn-round"</span><span class="token operator">></span>掉线<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"project_progress"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"progress progress_sm"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"progress-bar bg-green"</span> role<span class="token operator">=</span><span class="token string">"progressbar"</span> th<span class="token operator">:</span>data<span class="token operator">-</span>transitiongoal<span class="token operator">=</span> <span class="token string">"${disk.usedRAMRate}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>small th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"${disk.usedRAMRate}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>small<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"project_progress"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"progress progress_sm"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"progress-bar bg-green"</span> role<span class="token operator">=</span><span class="token string">"progressbar"</span> th<span class="token operator">:</span>data<span class="token operator">-</span>transitiongoal<span class="token operator">=</span> <span class="token string">"${disk.useRate}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>small th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"${disk.useRate}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>small<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-info btn-sm"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-pencil"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 提醒 <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/documentManagement}"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-danger btn-sm"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-trash-o"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 删除 <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统参数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> 磁盘 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端加弹窗</title>
      <link href="/2022/09/24/module/frontpopover/"/>
      <url>/2022/09/24/module/frontpopover/</url>
      
        <content type="html"><![CDATA[<h1 id="前端加弹窗"><a href="#前端加弹窗" class="headerlink" title="前端加弹窗"></a>前端加弹窗</h1><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/38d3a26d2741b4691de311f8b6f2f2d.png"></p><p>前端加一段js即可</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>script th<span class="token operator">:</span>inline<span class="token operator">=</span><span class="token string">"javascript"</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">/*&lt;![CDATA[*/</span>    var msg <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*[[${msg}]]*/</span>null<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*]]>*/</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>后端request方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/pollution"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">pollutionWeb</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>       request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>MSG<span class="token punctuation">,</span> <span class="token string">"暂无数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"pollution"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端加弹窗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口继承</title>
      <link href="/2022/08/14/javacode/javacodeimplements/"/>
      <url>/2022/08/14/javacode/javacodeimplements/</url>
      
        <content type="html"><![CDATA[<h1 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h1><p>springBoot项目启动时，代码自启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HJ212Server</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">runEPServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 启动服务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runEPServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//相关操作，需要系统启动时自行运行的代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>若有多个代码段需要执行，可用@Order注解设置执行的顺序。<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/a1125527550c9c651a07d1711570328.png"></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>方式一：继承Thread类</p><ol><li><p>定义子类继承Thread类。</p></li><li><p>子类中重写Thread类中的run方法。</p></li><li><p>创建Thread子类对象，即创建了线程对象。</p></li><li><p>调用线程对象start方法：启动线程，调用run方法。</p></li></ol><p>注意点：</p><ol><li><p>如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。</p></li><li><p>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统CPU调度决定。</p></li><li><p>想要启动多线程，必须调用start方法。</p></li><li><p>一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常 “IllegalThreadStateException”。</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/47e4d123b9ee6068ddc5492f7443cb9b.png"></p><p>方式二：实现Runnable接口</p><ol><li><p>定义子类，实现Runnable接口。</p></li><li><p>子类中重写Runnable接口中的run方法。</p></li><li><p>通过Thread类含参构造器创建线程对象。</p></li><li><p>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。</p></li><li><p>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ed21a78a26850abcd5709d4ec0131953.png"></p>]]></content>
      
      
      <categories>
          
          <category> 接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 接口 </tag>
            
            <tag> 继承 </tag>
            
            <tag> 自启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件相关操作</title>
      <link href="/2022/07/10/javacode/javacodefile/"/>
      <url>/2022/07/10/javacode/javacodefile/</url>
      
        <content type="html"><![CDATA[<h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 下载文件*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span>String proname<span class="token punctuation">,</span> String fileName<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ProjectEntity projectEntity <span class="token operator">=</span> projectMapping<span class="token punctuation">.</span><span class="token function">getProjectByName</span><span class="token punctuation">(</span>proname<span class="token punctuation">)</span><span class="token punctuation">;</span>        ProductEntity productEntity <span class="token operator">=</span> productMapping<span class="token punctuation">.</span><span class="token function">getProductByProductId</span><span class="token punctuation">(</span>projectEntity<span class="token punctuation">.</span><span class="token function">getProProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProductOutsourceEntity productOutsourceEntity <span class="token operator">=</span> productOutsourceMapping<span class="token punctuation">.</span><span class="token function">getProductOutsourceByOutId</span><span class="token punctuation">(</span>productEntity<span class="token punctuation">.</span><span class="token function">getOutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件名</span>        String strUrl <span class="token operator">=</span> productOutsourceEntity<span class="token punctuation">.</span><span class="token function">getFileUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String filename <span class="token operator">=</span> strUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>strUrl<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"iso8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> strUrl<span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果文件不存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"下载文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//解决下载文件时文件名乱码问题</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileNameBytes <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        filename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>fileNameBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fileNameBytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>ISO_8859_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置响应头，控制浏览器下载该文件</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取要下载的文件，保存到文件输入流</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建输出流</span>        OutputStream os  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//缓存区</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//循环将输入流中的内容读取到缓冲区中</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"下载失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"下载成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO 自动生成的 catch 块</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="文件夹下载"><a href="#文件夹下载" class="headerlink" title="文件夹下载"></a>文件夹下载</h1><p> 与文件下载不一样，需要先压缩再下载。本例子的服务器中文件URL已知，所以未用mapping层查询数据库，可根据需要加上。</p><h2 id="Service"><a href="#Service" class="headerlink" title="Service:"></a>Service:</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    * 下载文件夹    */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span>String proname<span class="token punctuation">,</span> String fileName<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//下载后的文件</span>        String name<span class="token operator">=</span>Constants<span class="token punctuation">.</span>FILEPATH <span class="token operator">+</span> Constants<span class="token punctuation">.</span>PROJECT <span class="token operator">+</span> proname <span class="token operator">+</span> <span class="token string">"/product/outsource"</span><span class="token operator">+</span><span class="token string">".zip"</span><span class="token punctuation">;</span>        zipUtil zc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zipUtil</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//服务器存储的URL</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>FILEPATH <span class="token operator">+</span> Constants<span class="token punctuation">.</span>PROJECT <span class="token operator">+</span> proname <span class="token operator">+</span> <span class="token string">"/product/outsource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可继续添加要一起压缩的文件夹或文件</span>        <span class="token comment" spellcheck="true">//list.add("");</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>        File file<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zc<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//压缩</span>            file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            downLoad<span class="token punctuation">.</span><span class="token function">downloadZip</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下载</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把生成的压缩文件删除</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO 自动生成的 catch 块</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Utile"><a href="#Utile" class="headerlink" title="Utile:"></a>Utile:</h2><p>建立两个工具包</p><p>（1）压缩文件夹</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipCompressorUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BUFFER <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**        * 压缩的文件夹        */</span>    <span class="token keyword">private</span> File zipFile1111<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ZipCompressorUtil</span><span class="token punctuation">(</span>String pathName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        zipFile1111 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        * 遍历需要压缩文件集合        * @param pathName        * @throws IOException        */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compress</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> pathName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ZipOutputStream out <span class="token operator">=</span>null<span class="token punctuation">;</span>        FileOutputStream fileOutputStream<span class="token operator">=</span>null<span class="token punctuation">;</span>        CheckedOutputStream cos<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipFile1111<span class="token punctuation">)</span><span class="token punctuation">;</span>            cos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckedOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CRC32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>cos<span class="token punctuation">)</span><span class="token punctuation">;</span>            String basedir <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pathName<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">,</span> basedir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>out<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fileOutputStream<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cos<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                cos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        * 压缩        * @param file        * @param out        * @param basedir        */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">compress</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> ZipOutputStream out<span class="token punctuation">,</span> String basedir<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是目录还是文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compressDirectory</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> out<span class="token punctuation">,</span> basedir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compressFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> out<span class="token punctuation">,</span> basedir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        * 压缩一个目录        * */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">compressDirectory</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> ZipOutputStream out<span class="token punctuation">,</span> String basedir<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 递归</span>            <span class="token function">compress</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">,</span> basedir <span class="token operator">+</span> dir<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        * 压缩一个文件        *        * */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">compressFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> ZipOutputStream out<span class="token punctuation">,</span> String basedir<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BufferedInputStream bis <span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ZipEntry entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>basedir <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>BUFFER<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUFFER<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>（2）下载文件夹</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownLoadUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 下载压缩包     * @param file     * @param response     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HttpServletResponse <span class="token function">downloadZip</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        OutputStream toClient <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以流的形式下载文件。</span>             fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 清空response</span>            response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             toClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//如果输出的是中文名的文件，在此处就要用URLEncoder.encode方法进行处理</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            toClient<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            toClient<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>fis<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                   fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>toClient<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                   toClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 删除文件* @param fileName* @return*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 如果文件路径只有单个文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除文件"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除文件"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName <span class="token operator">+</span> <span class="token string">"不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="文件夹删除"><a href="#文件夹删除" class="headerlink" title="文件夹删除"></a>文件夹删除</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 删除文件夹,里面用到了删除文件的函数，把上面文件删除的函数也引进来*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">deleteAllFile</span><span class="token punctuation">(</span>String dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果dir不以文件分隔符结尾，自动添加文件分隔符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span>        dir <span class="token operator">=</span> dir <span class="token operator">+</span> File<span class="token punctuation">.</span>separator<span class="token punctuation">;</span>    File dirFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果dir对应的文件不存在，或者不是一个目录，则退出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>dirFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除文件夹失败："</span> <span class="token operator">+</span> dir <span class="token operator">+</span> <span class="token string">"不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除文件夹中的所有文件包括子文件夹</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dirFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除子文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 删除子文件夹</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token function">deleteAllFile</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除文件夹失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除当前文件夹</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dirFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除文件夹"</span> <span class="token operator">+</span> dir <span class="token operator">+</span> <span class="token string">"成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="文件上传（文件夹需自行压缩）"><a href="#文件上传（文件夹需自行压缩）" class="headerlink" title="文件上传（文件夹需自行压缩）"></a>文件上传（文件夹需自行压缩）</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">insertProductOutsource</span><span class="token punctuation">(</span>ProductOutsourceEntity productOutsourceEntity<span class="token punctuation">,</span>String proname<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>MultipartFile<span class="token operator">></span> file<span class="token punctuation">,</span>HttpServletRequest req<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 判断参数有没有效</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>productOutsourceEntity <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Constants<span class="token punctuation">.</span>FAILCODE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前时间</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String nowTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd_HH-mm-ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建文件夹,文件名称与提交时间关联</span>        ProjectEntity projectEntity <span class="token operator">=</span> projectMapping<span class="token punctuation">.</span><span class="token function">getProjectByName</span><span class="token punctuation">(</span>proname<span class="token punctuation">)</span><span class="token punctuation">;</span>        String poId <span class="token operator">=</span> signMapping<span class="token punctuation">.</span><span class="token function">getSignById</span><span class="token punctuation">(</span>projectEntity<span class="token punctuation">.</span><span class="token function">getProSignId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String docPath <span class="token operator">=</span> Constants<span class="token punctuation">.</span>FILEPATH <span class="token operator">+</span> Constants<span class="token punctuation">.</span>PROJECT <span class="token operator">+</span> proname <span class="token operator">+</span> <span class="token string">"/product/"</span> <span class="token operator">+</span> poId <span class="token operator">+</span> <span class="token string">"-outsource/"</span><span class="token operator">+</span>nowTime<span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">;</span>        File localPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>docPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获得文件目录，判断目录是否存在，不存在就新建一个</span>            localPath<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//存文件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MultipartFile f <span class="token operator">:</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String filename <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> docPath <span class="token operator">+</span>filename<span class="token punctuation">;</span>            File filePath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>             BufferedOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存文件到目录下</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在创建好的文件中写入f.getBytes()</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            productOutsourceEntity<span class="token punctuation">.</span><span class="token function">setFileUrl</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数据库中FileUrl储存"</span><span class="token operator">+</span>productOutsourceEntity<span class="token punctuation">.</span><span class="token function">getFileUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        productOutsourceMapping<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>productOutsourceEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Constants<span class="token punctuation">.</span>SUCCESSCODE<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: handle exception</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"添加文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Constants<span class="token punctuation">.</span>FAILCODE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业项目管理系统服务端</title>
      <link href="/2022/07/05/pms/"/>
      <url>/2022/07/05/pms/</url>
      
        <content type="html"><![CDATA[<h1 id="企业项目管理系统服务端"><a href="#企业项目管理系统服务端" class="headerlink" title="企业项目管理系统服务端"></a>企业项目管理系统服务端</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3509867d2a0a06f4cf8c5f90a6dbbc8a.png"></p><p>1.1用户名-密码注册</p><p>1.11注册界面接收以下信息：</p><p>用户名、密码、手机号、邮箱</p><p>1.12用户名-密码注册逻辑：</p><p>接收前端用户注册填写的个人信息：用户名、手机号、邮箱，服务器请求数据库，查看以上三个字段是否有记录，来判断是否为新用户。</p><p>（1）如果是新用户，则继续填写公司相关信息：</p><ol><li>gender;icon;number;isAdmin;postId;postName;departmentId;departmentName。</li><li>controller层：接收这些字段，放入UserEntity。</li><li>service层：再UserMapping.insert(UserEntity)插入一个用户。</li></ol><p>（2）如果第三方微信注册过，则提示用户名？手机号？邮箱？“已经注册过，正在进行相关绑定”。</p><ol><li>controller层接口：接收上述字段，放入UserEntity。</li><li>service层接口：同时先通过UUID生成OpenID，通过当前手机号查询到数据库的users表的id，调用UserMapping.updateFromUser进行数据库的更新</li></ol><p>1.13用户名-密码注册流程：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/42b0b69aa1de4c8a8da1983b73aa92c1.png"></p><p>1.14controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8ff81635aa454803c740d3d1903c08b0.png"></p><p>1.15service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/33c1b9110f187b20e2a1692e4153fabf.png"></p><p>1.2第三方登录注册</p><p>1.21注册界面接收以下信息：</p><p>Nick_name、性别、头像地址url、地点、手机号、邮件、openid</p><p>1.22微信扫码注册逻辑：</p><p>扫码后，授权Nick_name、性别、头像地址url、 地点，返回的信息放入WxUsersEntity。弹框提示绑定手机号、邮件，再放入UsersEntity。通过获得授权接收的手机号，服务器请求数据库，查看手机号、邮箱字段是否有记录，来判断是否为新用户。</p><p>（1）如果是新用户，继续填写公司相关信息：</p><ol><li>gender;icon;number;isAdmin;postId;postName;departmentId;departmentName，放入UsersEntity。</li><li>controller层：接收WxUsersEntity，icon字段用微信头像，gender、phone，都放入UsersEntity中。</li><li>service层：先去微信网关拿到wxOpenId放入WxUsersEntity，插入UserMapping.insert(UserEntity)，UsersMapping.getUserId()通过phone查询users表，返回users_id放入WxUsersEntity，进行插入再WxUsersMapping.insert()插入一个用户。</li></ol><p>（2）如果用户名-密码注册过，则绑定用户名密码注册的表单：</p><ol><li>controller层接口：接收WxUsersEntity字段 。</li><li>service层：先去微信网关拿到wxOpenId放入WxUsersEntity。WxUsersMapping.getUserId()通过phone查询users表，返回users_id存入WxUsersEntity，再插入WxUsersMapping.insert()。</li></ol><p>再次扫码获取授权后可直接登录。</p><p>1.23第三方登录注册流程：</p><p>同1.13模式，可根据以上逻辑进行判断，不再叙述</p><p>1.24controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/412a306076520666c202c14208f94aa0.png"></p><p>1.25service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/90038102d8c5ab6a89fc10d77126a98b.png"></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>2.1用户名-密码登录</p><p>2.11登录界面发送以下信息：</p><p>用户名、密码、手机号、邮箱</p><p>2.12用户名密码登录逻辑：</p><p>接收前端用户登录填写的个人信息：用户名或手机号、密码，服务器请求数据库，查看用户名或手机号字段是否有记录，来判断是否为新用户。</p><p>（1）如果用户名为空，继续判断手机号，如果手机号也为空，则是新用户，log“账号不存在，请先注册”</p><p>（2）如果用户名或手机号有一项不为空，则继续判断密码。将接收到的phone和UserName输入MD5方法加密，与数据库请求之前存过的密码是否一致，若相同，则进入主页，log“登录成功”，写Redis。否则log“登录失败，用户名或密码错误”</p><p>2.13controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/7cc24695ae8448ddfa914ea2c7844798.png"></p><p>2.14service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/81ae826f3bc2152cf307977c00a11171.png"></p><p>Redis后面再设置</p><p>2.2第三方登录</p><p>2.21登录界面发送以下信息：</p><p>Nick_name、性别、头像地址url、地点、openid</p><p>2.22第三方登录逻辑：</p><p>接收前端第三方登录授权的个人信息：openid，服务器请求数据库，查看openid字段是否有记录，来判断是否为新用户。</p><p>（1）如果数据库openid与接收到的openid一致，则进入主页，log“登录成功”，写Redis。</p><p>（2）否则是新用户，log“账号不存在，请先注册”</p><p>2.23 controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/16880a163d06266f3d0d31d95d788514.png"></p><p>2.24 service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/d2eee812694f185dedf94d7084aa54c7.png"></p><h1 id="本地测试（注册、登录）"><a href="#本地测试（注册、登录）" class="headerlink" title="本地测试（注册、登录）"></a>本地测试（注册、登录）</h1><p>3.1 修改注册逻辑：</p><p>通过“用户名、手机号、邮箱”查用户名-密码注册表单为空时，进行微信注册表单绑定，如果表单绑定成功，可直接登录。如果不成功，则进行添加新用户。</p><p>3.2 本地测试</p><p><a href="http://localhost/Register?userName=test01&password=123456&phone=123456789&email=123@qq.com&gender=0&number=123456&is_admin=1&post_id=123&department_id=123">http://localhost/Register?userName=test01&amp;password=123456&amp;phone=123456789&amp;email=123@qq.com&amp;gender=0&amp;number=123456&amp;is_admin=1&amp;post_id=123&amp;department_id=123</a></p><p>第一次 注册</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/30d97dc1ce9d05c216a3281135fc790f.png"></p><p>第二次 重复注册</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/180ddc53e3aeaa059b6c4c3ee5115d87.png"></p><p>第三次 只更改用户名注册</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/590541ad0d99e10fa0e716942c98c520.png"></p><p>第四次 只更改用户名和手机号注册</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4c4cec409e6538fb4b435b4d6fd450d4.png"></p><p>第五次 只更改用户名、手机号和邮箱注册</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/92a0013383c4b82dfcd9a0fc4d2a3007.png"></p><p>第六次 只更改用户名、手机号、邮箱工号和注册</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/c81a77642f206b1ccce0a3114c03fdb6.png"></p><p>3.3 微信·开放平台——网站应用开发</p><p>3.31网址</p><p><a href="https://open.weixin.qq.com/cgi-bin/frame?t=home/web_tmpl&lang=zh_CN">https://open.weixin.qq.com/cgi-bin/frame?t=home/web_tmpl&amp;lang=zh_CN</a></p><p>3.32功能</p><p>用户可使用微信帐号快速登录你的网站，并可在用户授权后，获取用户基本信息，包括头像、昵称、性别、地区。</p><p>3.33 账号</p><p>账号：<a href="mailto:&#x6c;&#117;&#97;&#x6e;&#x62;&#x61;&#x69;&#x78;&#x69;&#97;&#110;&#103;&#x40;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#117;&#97;&#x6e;&#x62;&#x61;&#x69;&#x78;&#x69;&#97;&#110;&#103;&#x40;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;</a></p><p>密码：首字母大写</p><p>3.34 申请流程</p><p>在微信开放平台注册开发者帐号，并拥有一个已审核通过的网站应用，并获得相应的AppID和AppSecret</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/cec80165e2920543f526a25be5a155c1.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/38c024233e2a269ac96eab0a5dfb5fbe.png"></p><p>3.35时序流程图</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/689c8301a403ec5216be089787b379f7.png"></p><ol><li>用户点击网站微信登陆图标。</li><li>网站带上AppID和AppSecret和回调域名参数请求微信OAuth2.0授权登陆。</li><li>第二步通过后，微信返回二维码供用户扫码。</li><li>用户扫码确定授权。</li><li>微信带上code参数回调java后端相关接口。</li><li>java后端获取到code后，在带上带上AppID和AppSecret和code再去调微信接口。</li><li>获取access_token后就可以解析用户的一些基本信息，比如：微信用户头像、用户名、性别、城市等一些基本参数。</li></ol><p>具体接口参数说明看官方文档。</p><p>3.36 接口</p><p>相关资料已备齐，等平台申请通过再测试</p><p>3.4 注册信息下拉选项（动态）</p><p>3.41 功能</p><p>“岗位、权限、部门”下拉选项，动态更新，使高级管理员更改三类选项时，注册界面的下拉选项可直接更新。</p><p>3.42 controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b75144f331136e5b64cf2f520923f67f.png"></p><p>3.43 service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/9597a4e0b0ef911baf9bdfaa19e295eb.png"></p><h1 id="前后端测试（注册）"><a href="#前后端测试（注册）" class="headerlink" title="前后端测试（注册）"></a>前后端测试（注册）</h1><p>4.1 页面整合</p><p>4.11文件存储规则</p><p>在resource&#x2F;static&#x2F;html下面放html文件</p><p>#应用名称</p><p>spring.application.name&#x3D;test</p><p>#使用的端口，默认就是8080</p><p>server.port&#x3D;8080#视图解析</p><p>spring.mvc.view.prefix&#x3D;&#x2F;html&#x2F;spring.mvc.view.suffix&#x3D;.html</p><p>前缀是&#x2F;html&#x2F;，不是什么&#x2F;static&#x2F;html&#x2F;，也不是什么classpath:&#x2F;static&#x2F;html。</p><p>注释必须要独占一行。</p><p>springboot中默认resources中static文件夹存放静态资源，如js文件、css文件、图片等等。templates文件夹中存放html页面。</p><p>4.12 返回页面（注释）</p><p>在controller中可直接返回html文件名，示例：return “index”;不能在service层里返回页面</p><p>注意Controller上要用@Controller，不能用@RestController或@ResponseBody，这2个注解是把return返回的字符串作为json直接返回给浏览器。</p><p>@RestController &#x3D; @ResponseBody + @Controller</p><p>在浏览器地址栏输入  ip:port&#x2F;html&#x2F;xxx.html 可直接访问对应的页面。</p><p>使用普通的html有一个很大的问题：不好取controller传递的数据。</p><p>使用jsp作为视图时，jsp中可以写java代码，可以用EL表达式或request.getXxx()获取数据，普通html文件中不能写java代码，不好取数据。</p><p>前端页面显示后端参数中的数据：${xxx}</p><p>4.13 配置YAML</p><p>在YAML文件的顶级映射不允许使用重复键，出现了两个spring，因为它们必须是unique according to the specification。</p><p>在显式YAML文档开头出现的指令指示符”—”</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/efb6fddba65cfde2b15c2c2b12ebe61a.png"></p><p>也可以保留一个spring，datasource和thymeleaf对齐</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/a95fb7972358042e6910d1daa6c8ac65.png"></p><p>4.2 前后端测试</p><p>4.21数据转换</p><p>测试时，发现前后端定义的数据格式不一致，导致存储失败。</p><p>解决:设置实体层UserEntityVo，且均以string格式传过来，在接收时先进行数据格式转换处理，再放到方法体里。格式转换按照数据库设置的格式来，对应UserEntity.</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e7b20f2a108df811f3117bd9bce85368.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/95d71bbbcd8fbb24ecbf168973caf17e.png"></p><p>一、自行编码<br>如string格式传来文字，而数据库储存int格式，则进行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>userEntityVo<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    userEntity<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>把“男”赋值“2”进行存储。</p><p>二、直接转格式（注意静态动态，不可在controller直接把参数传进去）<br>Controller层：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/baaae9604ea410bb9129f0e5b78ed7df.png"></p><p>Service层：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/59c94a0bb20c00aacc7fb072c0e6b054.png"></p><p>4.22 测试<br>测试成功，未来得及截图，因为还想优化一下，等师弟那边相对文件路径改好再测一遍。</p><h1 id="项目请求、签订、状态"><a href="#项目请求、签订、状态" class="headerlink" title="项目请求、签订、状态"></a>项目请求、签订、状态</h1><p>5.1项目请求</p><p>5.11项目请求逻辑：</p><p>项目请求界面，填好信息，点击“提交”，插入一个项目请求，并且提供两种查询项目方法：</p><ol><li>通过名称查询</li><li>通过公司名称查询</li></ol><p>5.12controller层接口：</p><p>项目请求界面，填好信息，点击“提交”，插入一个项目请求</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b5684e51654e2a2c8a1c40a90eb44647.png"></p><p>根据项目名称查询项目信息</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e606f678d8f1b0f00f4479910bbba158.png"></p><p>根据客户公司名称查询项目信息</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8f83076bb8a1a3db0b2520235073e00b.png"></p><p>5.13service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/18bd5e83d70d88d5a74908b651179ae5.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/34aeb41a9c4891197b490605d0d53c4b.png"></p><p>5.2项目签订</p><p>5.21项目签订逻辑：</p><p>项目签订界面，填好信息，点击“提交”，插入一个签订记录。根据po查询签订记录，根据合同号查询签订记录，根据公司项目编号查询签订记录，根据客户公司代码查询签订记录，根据交货日期查询签订记录</p><p>5.22controller层接口：</p><p>项目签订界面，填好信息，点击“提交”，插入一个签订记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2d59baa7d6729f8800be027d4e2a3397.png"></p><p>根据po查询签订记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ca1f7578f91e8380b58c23c13a314a48.png"></p><p>根据合同号查询签订记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8cf0c05af88a95defc256fd8d1d0648e.png"></p><p>根据公司项目编号查询签订记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/390f4531589477737664fdaac249f807.png"></p><p>根据客户公司代码查询签订记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8a3069a7414082f3b7500ba2ce2e0860.png"></p><p>根据交货日期查询签订记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/bd3cbd2b0f15f73128c7456a580fa2e3.png"></p><p>5.23service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b5ba0aff801ded8dde9fa15dc98a7fdf.png"></p><p>5.3项目状态</p><p>5.31项目状态逻辑：</p><p>插入一条状态记录,根据状态描述查询id,修改状态描述。</p><p>修改状态分两种：</p><ol><li><p>pass，状态递进一位；</p></li><li><p>noPass，状态递减一位。</p></li></ol><p>5.32controller层接口：</p><p>插入一条状态记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b4681050a0783a6e82317f20aac44ef6.png"></p><p>根据状态描述查询id</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/967644d56f38040b959c22f88d5a1d93.png"></p><p>修改状态,通过</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/63522a87d654e8140a9afe331b590100.png"></p><p>修改状态,不通过</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/28a7f0fd9d02b94fa2fcd88084aac726.png"></p><p>5.33service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/7efb64d23f23c6eb61cb61ea01e26ba5.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/f82f734f6dd53aa50c31735043a42064.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b661882f5f287d8b329f3cdd96c3c740.png"></p><h1 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h1><p>6.1项目设计</p><p>6.11项目设计逻辑：</p><p>插入一条设计记录</p><p>6.12controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/5b7a9e7bfb781702980ee0a4b8684eeb.png"></p><p>6.13service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3ac030f704295d916efa1e7661effec3.png"></p><p>6.2项目-软件设计</p><p>6.21项目软件设计：</p><p>插入一条软件设计记录</p><p>6.22controller层接口：</p><p>插入一条软件设计记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/fa82bb92c4224a6b8b208fa8169401e9.png"></p><p>6.23service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2b6b4b68d15638903c94a083ddbb7166.png"></p><p>6.24文件上传测试：</p><p>在本地文件夹和数据库中均储存成功</p><p>(1)本地文件夹:</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/64fdddabd08ad9d3a294b91311880d00.png"></p><p>(2)数据库:</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%9B%BE%E7%89%871.png"></p><p>6.25文件上传注意：</p><p>参数保持一致</p><p>(1)controller</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b514d15138fff557d147db7cbb5250ac.png"></p><p>前端html:</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/0965a8a5c4ab80e2ebe7595ceade2ae2.png"></p><p>(2)controller创建多个value &#x3D; “”与html中name一一对应</p><p>6.3项目-电气设计</p><p>6.31项目电气设计逻辑：</p><p>插入一条电气设计记录</p><p>6.32controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/33d24f599b4e0e7ec2a631c63531c06d.png"></p><p>6.33service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/87bbcee330e98137bfb8bad15fb4462a.png"></p><p>6.34文件上传测试：</p><p>在本地文件夹和数据库中均储存成功</p><p>(1)本地文件夹:</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/fc652b84e5ce66479de70761e60f368a.png"></p><p>(2)数据库:</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ac78dff4f6aed58a1847b7f6e3953439.png"></p><p>6.4项目-机械设计师</p><p>6.41项目机械设计师逻辑：</p><p>插入一条机械设计师记录</p><p>6.42controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/0a57d56b41c75e0cd082c8c83e26f4e9.png"></p><p>6.43service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/c5df2164174b657623e3b496bcca7537.png"></p><p>6.44文件上传测试：</p><p>在本地文件夹和数据库中均储存成功</p><p>(1)本地文件夹:</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/471bdf24547a1ba552c4feb4159b6c54.png"></p><p>(2)数据库:</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/679e0712132574d5c42d8c89047bd108.png"></p><p>6.5项目-设计关系表</p><p>6.51项目设计关系表逻辑：</p><p>插入一条设计关系表记录，根据项目公司内部项目表好pro_id查询项目机械设计信息</p><p>6.52controller层接口：</p><p>插入一条设计关系表记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4537c00b5574d81fc980180f020c472c.png"></p><p>根据项目公司内部项目表好pro_id查询项目机械设计信息</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/686a99f32fcc0d890322f178a7711eea.png"></p><p>6.53service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4b7b2e4f085554af8f7330046cfd02c6.png"></p><h1 id="项目生产"><a href="#项目生产" class="headerlink" title="项目生产"></a>项目生产</h1><p>7.1项目生产</p><p>7.11项目生产逻辑：</p><p>插入一条生产记录</p><p>7.12controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/fc296b8812d0d017b14ce513f784efbc.png"></p><p>7.13service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ec030f4c7f32ddee7ab374fffe42ecfd.png"></p><p>7.2项目-外协</p><p>7.21项目生产外协逻辑：</p><p>插入一条外协记录</p><p>7.22controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/915d085e76b456adc4bec8b4d4dda5d3.png"></p><p>7.23service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4cedc3d0924c1834b5bac204a57e419e.png"></p><p>7.24文件上传测试</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8b410fea36488955437eaa4d3dfe5dd2.png"></p><p>7.3项目-零件加工</p><p>7.31项目生产零件加工逻辑：</p><p>插入一条零件加工记录</p><p>7.32controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ss.png"></p><p>7.33service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/5433894a036d7bd8f9aef5621847ee52.png"></p><p>7.4项目-采购</p><p>7.41项目生产采购逻辑：</p><p>插入一条采购记录</p><p>7.42controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3f678faec74b95ec994db0c2a30eaf7d.png"></p><p>7.43service层接口：</p><h1 id="项目-用户关联、项目装配表"><a href="#项目-用户关联、项目装配表" class="headerlink" title="项目-用户关联、项目装配表"></a>项目-用户关联、项目装配表</h1><p>8.1项目-用户关联</p><p>8.11项目-用户关联逻辑：</p><p>插入一条项目-用户关系记录，根据userId,查询相关的proId，根据proId, 查询相关的userId</p><p>8.12controller层接口：</p><p>插入一条项目-用户关系记录</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/f6e2ead3eb418d4948777938ccb64c7a.png"></p><p>根据userId,查询相关的proId</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/051f302b1a8049ca41e5168641728b07.png"></p><p>根据proId, 查询相关的userId</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ef78452e3cc58dd045ac9b478cf3eaca.png"></p><p>8.13service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b1ac2e684e8d99cf73d9f5284c4838b6.png"></p><p>8.2项目装配表</p><p>8.21项目装配表逻辑：</p><p>插入一条装配记录</p><p>8.22controller层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3a91c8ee42046839545be1da08271313.png"></p><p>8.23service层接口：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e835e09e8beb466ebbd739cd399cf8f3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（十一）IO流</title>
      <link href="/2022/06/30/javanotes/java11/"/>
      <url>/2022/06/30/javanotes/java11/</url>
      
        <content type="html"><![CDATA[<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li><p>java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关</p></li><li><p>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。</p></li><li><p>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</p></li><li><p>File对象可以作为参数传递给流的构造器</p></li></ol><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>public File(String pathname)</p><p>以pathname为路径创建File对象，可以是绝对路径或者相对路径，相对路径的当前路径在系统属性user.dir中存储。</p><p>public File(String parent,String child)</p><p>以parent为父路径，child为子路径创建File对象。</p><p>public File(File parent,String child)</p><p>根据一个父File对象和子文件路径创建File对象</p><h2 id="路径分隔符"><a href="#路径分隔符" class="headerlink" title="路径分隔符"></a>路径分隔符</h2><p>路径分隔符和系统有关：</p><p>windows和DOS系统默认使用“\”来表示</p><p>UNIX和URL使用“&#x2F;”来表示</p><p>File类提供了一个常量解决分隔符统一：</p><p>public static final String separator。根据操作系统，动态的提供分隔符</p><p>File file2 &#x3D; new File(“d:” + File.separator + “atguigu” + File.separator + “info.txt”);</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>File类的获取功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取绝对路径<span class="token keyword">public</span> String <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取路径<span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取名称<span class="token keyword">public</span> String <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取上层文件目录路径。若无，返回null<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取文件长度（即：字节数）。不能获取目录的长度。<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取最后一次的修改时间，毫秒值<span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取指定目录下的所有文件或者文件目录的名称数组<span class="token keyword">public</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取指定目录下的所有文件或者文件目录的File数组</code></pre><p>File类的重命名功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">renameTo</span><span class="token punctuation">(</span>File dest<span class="token punctuation">)</span><span class="token operator">:</span>把文件重命名为指定的文件路径</code></pre><p>File类的判断功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断是否是文件目录<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否是文件<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否存在<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否可读<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否可写<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否隐藏</code></pre><p>File类的创建功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件。若文件存在，则不创建，返回<span class="token boolean">false</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件目录。如果上层文件目录不存在，一并创建注意事项：如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目路径下。</code></pre><p>File类的删除功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：删除文件或者文件夹删除注意事项：Java中的删除不走回收站。要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</code></pre><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>Google I&#x2F;O 寓为“开放中创新” (Innovation in the Open)</p><p>Input&#x2F;Output</p><p>二进制1,0</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</p><p>按数据流的流向不同分为：输入流，输出流</p><p>按流的角色的不同分为：节点流，处理流</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/316100407aa8385a026a4f59d91df93e.png"></p><ol><li><p>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。</p></li><li><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/61e415145864302949ba6ce4794ec4ea.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2f5264b726a10e6fbc077407b94c86c0.png"></p><h2 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h2><p>节点流：直接从数据源或目的地读写数据</p><p>处理流：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p><h2 id="InputStream-amp-Reader"><a href="#InputStream-amp-Reader" class="headerlink" title="InputStream &amp; Reader"></a>InputStream &amp; Reader</h2><pre class=" language-java"><code class="language-java">InputStream 和Reader 是所有输入流的基类。InputStream（典型实现：FileInputStream）<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>Reader（典型实现：FileReader）<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span></code></pre><p>程序中打开的文件IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该显式关闭文件IO 资源。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/719a8f161c1c2b4bcd8133b69a5e7796.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8e4d1e66ddbf877ab0b458375da79cb3.png"></p><h2 id="OutputStream-amp-Writer"><a href="#OutputStream-amp-Writer" class="headerlink" title="OutputStream &amp; Writer"></a>OutputStream &amp; Writer</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">/</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">/</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">/</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 需要先刷新，再关闭此流</code></pre><p>因为字符流以字符作为操作单位，所以Writer可以用字符串来替换字符数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/03fc7bb05747235d79921841bbe2128f.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/0531f464a3899191306c4ab57f81878e.png"></p><h2 id="read的理解"><a href="#read的理解" class="headerlink" title="read的理解"></a>read的理解</h2><p>Java 下 IO 中 FileReader 和 FileInputStream 分别是以字符和字节的形式来完成数据的读取的，然而返回值确是 int 类型的数据，这样做的核心目的只是要取到到一个 int 类型下的 -1 来表示数据流的末尾。为什么要这样做？又是怎么实现的呢？</p><p>首先看FileReader ：</p><pre class=" language-java"><code class="language-java">FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ch <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如上面的代码，FileReader 的 read 方法返回值是一个 int 类型的变量来接收的，然而 read 方法在实际中却是以字符形式来进行数据的读取的。通过上面的基本数据类型的取值范围我们能发现 char 类型数据的取值范围为 0 ~ 65535 ，也就是说 char 类型数据是取不到负值的；int 类型数据的取值范围为 -2147483648 ~ 2147483647 ，可以取到负值；同时 int 的取值范围又包含 char 的取值范围，这就为使用 int 作为返回值类型提供了可能，因为流需要一个特殊的值来表示流末尾，这个值不应该在 char 的取值范围内，如果使用 char 取值范围内的值作为流末尾标志，那么这个值同样有可能出现在数据流中间作为数据来传输，流在读到这个值的时候会认为已经到达流末尾，后面未读取的数据将被截断。所以 Java 中选择了使用 -1 来作为流末尾，这个值不在 char 的取值范围内，所以不存在数据截断，然而 -1 又在 int 的取值范围内，同时 int 的取值范围包含 char 的取值范围，所以 FileReader 下 read 方法返回的 char 类型数据直接转为了 int 类型。</p><p>再看FileInputStream ：</p><pre class=" language-java"><code class="language-java">FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同理FileInputStream 也需要一个自己取不到的值来作为流末尾的标志，Java 同样使用 -1 来作为字节流的流末尾，从上面基本数据类型的取值范围我们可以看到 byte 的取值范围为 -128 ~ 127 ，这就意味走着 byte 可以取到 -1 ，如果把 -1 直接当作 int 作为流末尾，那么就无法区分这个读到的结果是流末尾还是流中的数据了，那么 Java 是如何实现取值 -1 的呢？在 Java 内部，Java 通过高位补 0 来实现数据从 byte 到 int 的转换，举个例子：</p><p>-1 在 byte 类型和 int 类型中都可以取到，-1 在 byte 类型下的二进制存储形式为 11111111 ，然而使用 read 方法的时候，Java 内部将 byte 的高位补 0 将 byte 转为 int 类型，所以 byte 类型的 -1 在 int 类型下的二进制存储形式为 00000000 00000000 00000000 11111111，对应的 int 值为 255，通过高位补 0 ，所有 byte 类型的负数都转为了正数。然而在使用这些读到的 byte 数据时，只要将这些数据从 int 强转回 byte 即可得到原有的数据。所以就可以使用 -1 来作为流末尾的标志，因为 Java 内部将 byte 的负数通过高位补 0 将其转换为了正数。</p><h1 id="节点流（或文件流）"><a href="#节点流（或文件流）" class="headerlink" title="节点流（或文件流）"></a>节点流（或文件流）</h1><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/f9a4ba3ee91cb2833b7879f6526015d3.png"></p><ol><li><p>可以省略new File，因为FileReader会自动封装</p></li><li><p>1024是因为通常设置10位二进制</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/84b733d03c03021483b8c035c0d6cc38.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e6472489740e0c25ad77871a705a8225.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/cbbf74cb9f48eb905c713f613535fd2d.png"></p><ol><li><p>定义文件路径时，注意：可以用“&#x2F;”或者“\”。</p></li><li><p>写入一个文件时，如果使用构造器FileOutputStream(file)，则目录下有同名文件将被覆盖。</p></li><li><p>如果使用FileOutputStream(file,true)，则同名文件不会被覆盖，在文件内容末尾追加内容。</p></li><li><p>在读取文件时，必须保证该文件已存在，否则报异常。</p></li><li><p>字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt</p></li></ol><p>字符流操作字符，只能操作普通文本文件。最常见的文本文件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文本文件。</p><ol start="6"><li>可以用stream复制文本，但是不能中途查看会乱码,其他操作不可以.</li></ol><h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><ol><li><p>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组，缺省使用8192个字节(8Kb)的缓冲区。</p></li><li><p>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</p></li></ol><p>BufferedInputStream 和 BufferedOutputStream</p><p>BufferedReader 和 BufferedWriter</p><ol start="3"><li><p>当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区</p></li><li><p>当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中读取下一个8192个字节数组。</p></li><li><p>向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满， BufferedOutputStream才会把缓冲区中的数据一次性写到文件里。使用方法flush()可以强制将缓冲区的内容全部写入输出流</p></li><li><p>关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也会相应关闭内层节点流</p></li><li><p>flush()方法的使用：手动将buffer中内容写入文件</p></li><li><p>如果是带缓冲区的流对象的close()方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4238ec72917d56c104c74a202b5f22b1.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/042e7caf26a4fb6a0eccc7ac39c75844.png"></p><h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><p>转换流提供了在字节流和字符流之间的转换</p><p>Java API提供了两个转换流：</p><pre class=" language-java"><code class="language-java">InputStreamReader：将InputStream转换为ReaderOutputStreamWriter：将Writer转换为OutputStream</code></pre><p>字节流中的数据都是字符时，转成字符流操作更高效。</p><p>很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/94c8156627bb3b71fec2f0b700e7e832.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/0494f669553662b317169df54756eaa0.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e469d12671ba6f45a197d85636a2c482.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/195e459d424acc2c261069572a787369.png"></p><p>6.输入、输出流<br>System.in和System.out分别代表了系统标准的输入和输出设备</p><p>默认输入设备是：键盘，输出设备是：显示器</p><p>System.in的类型是InputStream</p><p>System.out的类型是PrintStream，其是OutputStream的子类FilterOutputStream 的子类</p><p>重定向：通过System类的setIn，setOut方法对默认设备进行改变。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setIn</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setOut</span><span class="token punctuation">(</span>PrintStream out<span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8a394b669d5c46abbaefa40fb01d4c8c.png"></p><h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><p>实现将基本数据类型的数据格式转化为字符串输出</p><p>打印流：PrintStream和PrintWriter</p><p>提供了一系列重载的print()和println()方法，用于多种数据类型的输出</p><p>PrintStream和PrintWriter的输出不会抛出IOException异常</p><p>PrintStream和PrintWriter有自动flush功能</p><p>PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。</p><p>在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。</p><p>System.out返回的是PrintStream的实例</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2133f12b40c1760a71cb8bae2a51367e.png"></p><h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8dab044182d962f8079902ec1d024760.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ba7fdba0e392a2acebe04f7b67d5866e.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/7968fa2c8beb42b69da60f5874b28cd9.png"></p><h1 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h1><p>ObjectInputStream和OjbectOutputSteam</p><p>用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p><p>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制</p><p>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制</p><p>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</p><p>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。&#x2F;&#x2F;当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p><p>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原</p><p>序列化是RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而RMI 是JavaEE 的基础。因此序列化机制是JavaEE 平台的基础</p><p>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。</p><p>否则，会抛出NotSerializableException异常</p><p>Serializable</p><p>Externalizable</p><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p><p>private static final long serialVersionUID;</p><p>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象</p><p>进行版本控制，有关各版本反序列化时是否兼容。</p><p>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自</p><p>动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，</p><p>显式声明。</p><p>简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常(InvalidCastException)。防止序列化后，该类被修改了，反序列找不到类了。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/0413e4f64caa48fcec1eef20dc4eee91.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/d4ab1948fadb22fa06e86b1ece16a7e7.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e0724a866a037cdadc3fc756e79ad904.png"></p><h1 id="path"><a href="#path" class="headerlink" title="path"></a>path</h1><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/266fc5a7fce86ec387842c66c93b56d2.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8b289e3029e4514abd9f1ecf5806d5fc.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/7dae905e2edb94c7192a68ff9c8b3f4d.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向指定地址的Http请求测试</title>
      <link href="/2022/06/20/javacode/httptest/"/>
      <url>/2022/06/20/javacode/httptest/</url>
      
        <content type="html"><![CDATA[<h1 id="请求的代码"><a href="#请求的代码" class="headerlink" title="请求的代码"></a>请求的代码</h1><p>需要获取：</p><ol><li>IP地址</li><li>方法名</li><li>参数格式和名称</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnPollutionData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一个参数：input为接收方参数的名字</span>    <span class="token comment" spellcheck="true">//第二个参数：字符串数据</span>    map<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token string">"0,0,1,1,2,2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//第一个参数：请求的ip和方法名</span>    <span class="token comment" spellcheck="true">//传输的数据</span>    <span class="token comment" spellcheck="true">//接收返回值，string格式</span>    String eeg_result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">"https://7809sk6421.zicp.fun/filt"</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>eeg_result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Code </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP收发测试</title>
      <link href="/2022/06/20/javacode/javacodetcp/"/>
      <url>/2022/06/20/javacode/javacodetcp/</url>
      
        <content type="html"><![CDATA[<h1 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tcp</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  * TCP接收  */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8081</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建服务器端的Socket对象(ServerSocket)</span>            ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//serverSocket.bind(new InetSocketAddress(port));</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//监听客户端连接，返回一个Socket对象</span>            Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置阻塞的超时时间</span>            <span class="token comment" spellcheck="true">//socket.setSoTimeout(5000);</span>            <span class="token comment" spellcheck="true">//输出流</span>            OutputStream output <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取输入流，读数据，并把数据显示在控制台</span>            InputStream input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打印连接IP</span>            String IP <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>IP <span class="token operator">+</span> <span class="token string">"......connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 把一个字节数组str从0取到len，取出来之后转换成String类型</span>                String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据为"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//output.write("okok".getBytes());//可删</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//serverSocket.close();</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 客户端向服务器发送数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpSend</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//接受控制台数据的输入流</span>        BufferedReader buff<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义保存服务器地址的对象【String】</span>        InetAddress serverip<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义连接服务器的端口号</span>        <span class="token keyword">int</span> serverport<span class="token operator">=</span><span class="token number">38700</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义创建客户端对象的Socket</span>        Socket client<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义发送信息的输出流对象</span>        OutputStream out<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义保存被发送的数据</span>        String info<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回包含有本机IP地址的InetAddress对象,花生壳透传公网IP</span>        serverip<span class="token operator">=</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"454585x8l0.qicp.vip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收方： "</span> <span class="token operator">+</span> serverip<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收IP： "</span> <span class="token operator">+</span> serverip<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Socket(InetAddress address,int prot)---创建流套接字并将其连接到指定IP地址的指定端口号</span>        client<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>serverip<span class="token punctuation">,</span>serverport<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// getOutputStream()---返回客户端的输出流。【与服务器的输入流连接】</span>        out<span class="token operator">=</span>client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入发送的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buff<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token operator">=</span>buff<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buff<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Code </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（十）集合</title>
      <link href="/2022/06/17/javanotes/java10/"/>
      <url>/2022/06/17/javanotes/java10/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="对比数组"><a href="#对比数组" class="headerlink" title="对比数组"></a>对比数组</h2><p>数组在内存存储方面的特点：（所以安全）</p><ol><li><p>数组初始化以后，长度就确定了。</p></li><li><p>数组声明的类型，就决定了进行元素初始化时的类型</p></li></ol><p>数组在存储数据方面的弊端：</p><ol><li><p>数组初始化以后，长度就不可变了，不便于扩展</p></li><li><p>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。</p></li><li><p>同时无法直接获取存储元素的个数</p></li><li><p>数组存储的数据是有序的、可以重复的。—-&gt;存储数据的特点单一</p></li></ol><p>Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>Java 集合可分为Collection 和Map 两种体系</p><p>Collection接口：单列数据，定义了存取一组对象的方法的集合</p><p>List：元素有序、可重复的集合</p><p>Set：元素无序、不可重复的集合</p><p>Map接口：双列数据，保存具有映射关系“key-value对”的集合</p><h2 id="接口树"><a href="#接口树" class="headerlink" title="接口树"></a>接口树</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2e713678f49c8a71e600f077479a89a8.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4712c3de22afc152fc7e8c2e9a561d72.png"></p><h1 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h1><ol><li><p>Collection 接口是List、Set 和Queue 接口的父接口</p></li><li><p>JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List) 实现。</p></li><li><p>在Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成Object 类型处理；</p></li><li><p>从JDK 5.0 增加了泛型以后，Java 集合可以记住容器中对象的数据类型。</p></li></ol><p>方法：</p><ol><li>添加</li></ol><pre class=" language-java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token function">addAll</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span></code></pre><ol start="2"><li>获取有效元素的个数</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>清空集合</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>是否是空集合</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="5"><li>是否包含某个元素</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>：是通过元素的equals方法来判断是否是同一个对象<span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>Collection c<span class="token punctuation">)</span>：调用元素的equals方法来。拿两个集合的元素挨个比较。</code></pre><ol start="6"><li>删除</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> ：通过元素的equals方法判断是否是要删除的那个元素。```只会删除找到的第一个元素```java<span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span>：取当前集合的差集</code></pre><ol start="7"><li>取两个集合的交集</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection c<span class="token punctuation">)</span>：把交集的结果存在当前集合中，不影响c</code></pre><ol start="8"><li>集合是否相等</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span></code></pre><ol start="9"><li>转成对象数组</li></ol><pre class=" language-java"><code class="language-java">Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="10"><li>获取集合对象的哈希值</li></ol><pre class=" language-java"><code class="language-java"><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="11"><li>遍历</li></ol><pre class=" language-java"><code class="language-java"><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回迭代器对象，用于集合遍历</code></pre><h1 id="Iterator迭代器接口"><a href="#Iterator迭代器接口" class="headerlink" title="Iterator迭代器接口"></a>Iterator迭代器接口</h1><h2 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h2><ol><li><p>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</p></li><li><p>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合。</p></li><li><p>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</p></li></ol><h2 id="遍历集合元素"><a href="#遍历集合元素" class="headerlink" title="遍历集合元素"></a>遍历集合元素</h2><p>在调用xxxxx.next()方法之前必须要调用xxxxx.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4554275f0be41b0450e8443bf4d38e06.png"></p><h2 id="remove（）方法"><a href="#remove（）方法" class="headerlink" title="remove（）方法"></a>remove（）方法</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/5e741203516eddf39fec15aa463fd782.png"></p><p>注意：</p><p>Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法。</p><p>如果还未调用next()或在上一次调用next 方法之后已经调用了remove 方法，再调用remove都会报IllegalStateException。</p><h2 id="foreach-循环遍历集合元素"><a href="#foreach-循环遍历集合元素" class="headerlink" title="foreach 循环遍历集合元素"></a>foreach 循环遍历集合元素</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/f9fc8dc15e764095faa80f506535e376.png"></p><h1 id="Collection-——-List"><a href="#Collection-——-List" class="headerlink" title="Collection —— List"></a>Collection —— List</h1><p>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组</p><p>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</p><p>List容器中的元素可以根据序号存取容器中的元素。</p><p>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</p><h2 id="List接口方法"><a href="#List接口方法" class="headerlink" title="List接口方法"></a>List接口方法</h2><p>除了从Collection集合继承的方法外，List 集合里添加了根据索引来操作集合元素的方法。</p><ol><li><p>void add(int index, Object ele):在index位置插入ele元素</p></li><li><p>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</p></li><li><p>Object get(int index):获取指定index位置的元素</p></li><li><p>int indexOf(Object obj):返回obj在集合中首次出现的位置</p></li><li><p>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</p></li><li><p>Object remove(int index):移除指定index位置的元素，并返回此元素</p></li><li><p>Object set(int index, Object ele):设置指定index位置的元素为ele</p></li><li><p>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</p></li></ol><h2 id="实现类1：ArrayList"><a href="#实现类1：ArrayList" class="headerlink" title="实现类1：ArrayList"></a>实现类1：ArrayList</h2><p>ArrayList 是 List 接口的典型实现类、主要实现类</p><p>本质上，ArrayList是对象引用的一个”变长”数组</p><p>ArrayList的JDK1.8之前与之后的实现区别？</p><pre><code>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元素时 再创建一个始容量为10的数组</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/7762116f85ef7ce648979ee372fa0f13.png"></p><p>删除的是对应的下角标</p><p>改为：list.remove(new Integer(2)) 装箱删除的是对象</p><p>Java List 的 remove 方法有两个重载，一个接收 int 型参数（通过下标删除），一个接收 Object 型参数（通过元素删除）。对于List<Integer>,如果传入一个整型字面值，会删除对应下标处的元素</p><h2 id="实现类2：LinkedList"><a href="#实现类2：LinkedList" class="headerlink" title="实现类2：LinkedList"></a>实现类2：LinkedList</h2><p>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高</p><p>新增方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>Object <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>LinkedList：双向链表，内部没有声明数组，而是定义了Node类型的first和last，用于记录首末元素。同时，定义内部类Node，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量：prev变量记录前一个元素的位置next变量记录下一个元素的位置</code></pre><h2 id="实现类3：Vector"><a href="#实现类3：Vector" class="headerlink" title="实现类3：Vector"></a>实现类3：Vector</h2><p>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。</p><p>在各种list中，最好把ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList；Vector总是比ArrayList慢，所以尽量避免使用。</p><h2 id="list总结"><a href="#list总结" class="headerlink" title="list总结"></a>list总结</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/a42b07bc8ee2bbb50c7dd6a35eceb0ec.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/a8dde2f5127aaca2b22845ecb80e99c7.png"></p><h1 id="Collection-——-Set"><a href="#Collection-——-Set" class="headerlink" title="Collection —— Set"></a>Collection —— Set</h1><p>Set接口是Collection的子接口，set接口没有提供额外的方法</p><p>Set 集合不允许包含相同的元素，如果两个相同的元素加入同个Set 集合，则添加操作失败</p><p>Set 判断两个对象是否相同不是使用&#x3D;&#x3D; 运算符，而是根据equals() 方法</p><h2 id="实现类1-HashSet"><a href="#实现类1-HashSet" class="headerlink" title="实现类1:HashSet"></a>实现类1:HashSet</h2><p>HashSet 是Set 接口的典型实现，大多数时候使用Set 集合时都使用这个实现类。</p><p>HashSet 按Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。</p><p>HashSet 具有以下特点：</p><pre><code>不能保证元素的排列顺序HashSet 不是线程安全的集合元素可以是null</code></pre><p>HashSet 集合判断两个元素相等的标准：两个对象通过hashCode() 方法比较相等，并且两个对象的equals() 方法返回值也相等。</p><p>对于存放在Set容器中的对象，对应的类一定要重写equals()和hashCode(Object obj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</p><p>向HashSet中添加元素的过程：</p><p>当向HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好）<br>如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了，那么会通过链表的方式继续链接。如果两个元素的equals() 方法返回true，但它们的hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3d19f627840a91ac908676673fb90db2.png"></p><p>重写hashCode() 方法的基本原则</p><ol><li><p>在程序运行时，同一个对象多次调用hashCode() 方法应该返回相同的值。</p></li><li><p>当两个对象的equals() 方法比较返回true 时，这两个对象的hashCode()方法的返回值也应相等。</p></li><li><p>对象中用作equals() 方法比较的Field，都应该用来计算hashCode 值。</p></li></ol><p>重写equals() 方法的基本原则</p><p>以自定义的Customer类为例，何时需要重写equals()？</p><ol><li><p>当一个类有自己特有的“逻辑相等”概念,当改写equals()的时候，总是要改写hashCode()，根据一个类的equals方法（改写后），两个截然不同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode()方法，它们仅仅是两个对象。</p></li><li><p>因此，违反了“相等的对象必须具有相等的散列码”。</p></li><li><p>结论：复写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode的对象的属性也应该参与到equals()中进行计算。</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/bd75ff2ea5fcc2a43141ed29951dfeca.png"></p><h2 id="实现类2：LinkedHashSet"><a href="#实现类2：LinkedHashSet" class="headerlink" title="实现类2：LinkedHashSet"></a>实现类2：LinkedHashSet</h2><p>LinkedHashSet 是HashSet 的子类</p><p>LinkedHashSet 根据元素的hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</p><p>LinkedHashSet插入性能略低于HashSet，但在迭代访问Set 里的全部元素时有很好的性能。</p><p>LinkedHashSet 不允许集合元素重复。</p><h2 id="实现类3：TreeSet"><a href="#实现类3：TreeSet" class="headerlink" title="实现类3：TreeSet"></a>实现类3：TreeSet</h2><p>TreeSet 是SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p><p>TreeSet底层使用红黑树结构存储数据</p><p>新增的方法如下：(了解)</p><pre class=" language-java"><code class="language-java">Comparator <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">lower</span><span class="token punctuation">(</span>Object e<span class="token punctuation">)</span>Object <span class="token function">higher</span><span class="token punctuation">(</span>Object e<span class="token punctuation">)</span>SortedSet <span class="token function">subSet</span><span class="token punctuation">(</span>fromElement<span class="token punctuation">,</span> toElement<span class="token punctuation">)</span>SortedSet <span class="token function">headSet</span><span class="token punctuation">(</span>toElement<span class="token punctuation">)</span>SortedSet <span class="token function">tailSet</span><span class="token punctuation">(</span>fromElement<span class="token punctuation">)</span>TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。TreeSet和后面要讲的TreeMap采用红黑树的存储结构特点：有序，查询速度比List快</code></pre><p>hashmap</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e84c17b59d3705b829141ad52ae0bef0.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/c9236a8abc95c14dfb77244995403df9.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（九）枚举类 | 注解</title>
      <link href="/2022/06/09/javanotes/java9/"/>
      <url>/2022/06/09/javanotes/java9/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/34059251250e2378bb5ab19c7d2de263.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>枚举类的实现</p><p>JDK1.5之前需要自定义枚举类</p><p>JDK 1.5 新增的enum 关键字用于定义枚举类</p><p>若枚举只有一个对象, 则可以作为一种单例模式的实现方式。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>枚举类对象的属性不应允许被改动, 所以应该使用private final 修饰</p><p>枚举类的使用private final 修饰的属性应该在构造器中为其赋值</p><p>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数</p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><ol><li><p>私有化类的构造器，保证不能在类的外部创建其对象</p></li><li><p>在类的内部创建枚举类的实例。声明为：public static final</p></li><li><p>对象如果有实例变量，应该声明为private final，并在构造器中初始化</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3ccf7553934222fa3346383952fad029.png"></p><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>使用enum 定义的枚举类默认继承了java.lang.Enum类，因此不能再继承其他类</p><p>枚举类的构造器只能使用private 权限修饰符</p><p>枚举类的所有实例必须在枚举类中显式列出(, 分隔; 结尾)。列出的实例系统会自动添加public static final 修饰</p><p>必须在枚举类的第一行声明枚举类对象</p><p>JDK 1.5 中可以在switch 表达式中使用Enum定义的枚举类的对象作为表达式, case 子句可以直接使用枚举值的名字, 无需添加枚举类作为限定。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2de2ddaf456e7f43f8a21073b3f9a065.png"></p><h2 id="Enum类的主要方法"><a href="#Enum类的主要方法" class="headerlink" title="Enum类的主要方法"></a>Enum类的主要方法</h2><p>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</p><p>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。</p><p>toString()：返回当前枚举类对象常量的名称</p><h1 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解(Annotation)"></a>注解(Annotation)</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>框架&#x3D; 注解+ 反射+ 设计模式。</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>使用Annotation 时要在其前面增加@ 符号, 并把该Annotation 当成一个修饰符使用。用于修饰它支持的程序元素</p><p>示例一：生成文档相关的注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@author</span> 标明开发该类模块的作者，多个作者之间使用<span class="token punctuation">,</span>分割<span class="token annotation punctuation">@version</span> 标明该类模块的版本<span class="token annotation punctuation">@see</span> 参考转向，也就是相关主题<span class="token annotation punctuation">@since</span> 从哪个版本开始增加的<span class="token annotation punctuation">@param</span> 对方法中某参数的说明，如果没有参数就不能写@<span class="token keyword">return</span> 对方法返回值的说明，如果方法的返回值类型是<span class="token keyword">void</span>就不能写<span class="token annotation punctuation">@exception</span> 对方法可能抛出的异常进行说明，如果没有用<span class="token keyword">throws</span>显式抛出的异常就不能写其中<span class="token annotation punctuation">@param</span> @<span class="token keyword">return</span> 和<span class="token annotation punctuation">@exception</span> 这三个标记都是只用于方法的。<span class="token annotation punctuation">@param</span>的格式要求：<span class="token annotation punctuation">@param</span> 形参名形参类型形参说明@<span class="token keyword">return</span> 的格式要求：@<span class="token keyword">return</span> 返回值类型返回值说明<span class="token annotation punctuation">@exception</span>的格式要求：<span class="token annotation punctuation">@exception</span> 异常类型异常说明<span class="token annotation punctuation">@param</span>和<span class="token annotation punctuation">@exception</span>可以并列多个</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/df0df4eaa159df410ae8f7a738e5d945.png"></p><p>示例二：在编译时进行格式检查(JDK内置的三个基本注解)</p><pre class=" language-jaca"><code class="language-jaca">@Override: 限定重写父类方法, 该注解只能用于方法@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择@SuppressWarnings: 抑制编译器警告</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ec2780a0a554659af1142a760506674d.png"></p><p>示例三：跟踪代码依赖性，实现替代配置文件功能</p><p>Servlet3.0提供了注解,使得不再需要在web.xml文件中进行Servlet的部署。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e50a36402caf94bb90b82d16505f157c.png"></p><p>spring框架中关于“事务”的管理</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/d78c3c5ae03ac27f3f36169232949396.png"></p><h2 id="自定义-1"><a href="#自定义-1" class="headerlink" title="自定义"></a>自定义</h2><p>A.定义新的Annotation 类型使用@interface 关键字</p><p>B.自定义注解自动继承了java.lang.annotation.Annotation接口</p><p>C.Annotation 的成员变量在Annotation 定义中以无参数方法的形式来声明。其方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组。</p><p>D.可以在定义Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用default 关键字</p><p>E.如果只有一个参数成员，建议使用参数名为value</p><p>F.如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 &#x3D; 参数值”，如果只有一个参数成员，且名称为value，可以省略“value&#x3D;”</p><p>G.没有成员定义的Annotation 称为标记; 包含成员变量的Annotation 称为元数据Annotation</p><p>注意：自定义注解必须配上注解的信息处理流程才有意义。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/fd74a963746898e2fc85bd86573cd7ef.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关操作</title>
      <link href="/2022/06/03/javacode/javacodemysql/"/>
      <url>/2022/06/03/javacode/javacodemysql/</url>
      
        <content type="html"><![CDATA[<h1 id="删除一条记录（此记录与其他表关联）"><a href="#删除一条记录（此记录与其他表关联）" class="headerlink" title="删除一条记录（此记录与其他表关联）"></a>删除一条记录（此记录与其他表关联）</h1><p>表A其中一个字段为表B的某个字段，当表B的该条记录删除时，应当提前在表B设置一条初始记录，当某条记录删除，应将初始记录的对应字段set到表A对应字段，防止表B删除后，表A查不到信息。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 删除岗位，设置的初始记录为postId = 16，postName = “待管理员审核身份”*/</span><span class="token keyword">public</span> String <span class="token function">delatePost</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Constants<span class="token punctuation">.</span>FAILCODE<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UserEntity<span class="token operator">></span> allUser <span class="token operator">=</span> backSysMapping<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UserEntity userEntity <span class="token operator">:</span> allUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userEntity<span class="token punctuation">.</span><span class="token function">getPostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                userEntity<span class="token punctuation">.</span><span class="token function">setPostId</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userEntity<span class="token punctuation">.</span><span class="token function">setPostName</span><span class="token punctuation">(</span>postMapping<span class="token punctuation">.</span><span class="token function">getNameById</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        postMapping<span class="token punctuation">.</span><span class="token function">deletePostByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Constants<span class="token punctuation">.</span>SUCCESSCODE<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"BackSysService/delatePost, 删除岗位失败, "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Constants<span class="token punctuation">.</span>FAILCODE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Code </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（八）多线程</title>
      <link href="/2022/05/28/javanotes/java8/"/>
      <url>/2022/05/28/javanotes/java8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="程序-program"><a href="#程序-program" class="headerlink" title="程序(program)"></a>程序(program)</h2><p>是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p><h2 id="进程-process"><a href="#进程-process" class="headerlink" title="进程(process)"></a>进程(process)</h2><p>是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期</p><ol><li><p>如：运行中的QQ，运行中的MP3播放器</p></li><li><p>程序是静态的，进程是动态的</p></li><li><p>进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p></li></ol><h2 id="线程-thread"><a href="#线程-thread" class="headerlink" title="线程(thread)"></a>线程(thread)</h2><p>进程可进一步细化为线程，是一个程序内部的一条执行路径。</p><ol><li><p>若一个进程同一时间并行执行多个线程，就是支持多线程的</p></li><li><p>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小。</p></li><li><p>一个进程中的多个线程共享相同的内存单元&#x2F;内存地址空间——它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。</p></li></ol><h2 id="单核CPU和多核CPU"><a href="#单核CPU和多核CPU" class="headerlink" title="单核CPU和多核CPU"></a>单核CPU和多核CPU</h2><ol><li><p>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费）。但是因为CPU时间单元特别短，因此感觉不出来。</p></li><li><p>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</p></li><li><p>一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</p></li></ol><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><p>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</p><p>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</p><h2 id="使用多线程的优点"><a href="#使用多线程的优点" class="headerlink" title="使用多线程的优点"></a>使用多线程的优点</h2><p>背景：以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？</p><p>多线程程序的优点：</p><ol><li><p>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</p></li><li><p>提高计算机系统CPU的利用率</p></li><li><p>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</p></li></ol><h2 id="何时需要多线程"><a href="#何时需要多线程" class="headerlink" title="何时需要多线程"></a>何时需要多线程</h2><ol><li><p>程序需要同时执行两个或多个任务。</p></li><li><p>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</p></li><li><p>需要一些后台运行的程序时。</p></li></ol><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Java语言的JVM允许程序运行多个线程，它通过java.lang.Thread类来体现。</p><h2 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h2><p>特性：</p><ol><li><p>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体</p></li><li><p>通过该Thread对象的start()方法来启动这个线程，而非直接调用run()</p></li></ol><pre class=" language-java"><code class="language-java">构造器：<span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：创建新的Thread对象<span class="token function">Thread</span><span class="token punctuation">(</span>String threadname<span class="token punctuation">)</span>：创建线程并指定线程实例名<span class="token function">Thread</span><span class="token punctuation">(</span>Runnable target<span class="token punctuation">)</span>：指定创建线程的目标对象，它实现了Runnable接口中的run方法<span class="token function">Thread</span><span class="token punctuation">(</span>Runnable target<span class="token punctuation">,</span> String name<span class="token punctuation">)</span>：创建新的Thread对象</code></pre><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>JDK1.5之前创建新执行线程有两种方法：</p><p>继承Thread类的方式</p><p>实现Runnable接口的方式</p><p>方式一：继承Thread类</p><ol><li><p>定义子类继承Thread类。</p></li><li><p>子类中重写Thread类中的run方法。</p></li><li><p>创建Thread子类对象，即创建了线程对象。</p></li><li><p>调用线程对象start方法：启动线程，调用run方法。</p></li></ol><p>注意点：</p><ol><li><p>如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。</p></li><li><p>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统CPU调度决定。</p></li><li><p>想要启动多线程，必须调用start方法。</p></li><li><p>一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常 “IllegalThreadStateException”。</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/47e4d123b9ee6068ddc5492f7443cb9b.png"></p><p>方式二：实现Runnable接口</p><ol><li><p>定义子类，实现Runnable接口。</p></li><li><p>子类中重写Runnable接口中的run方法。</p></li><li><p>通过Thread类含参构造器创建线程对象。</p></li><li><p>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。</p></li><li><p>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ed21a78a26850abcd5709d4ec0131953.png"></p><p>区别：</p><p>继承Thread：线程代码存放Thread子类run方法中。</p><p>实现Runnable：线程代码存在接口的子类的run方法。</p><p>实现方式的好处：</p><ol><li><p>避免了单继承的局限性</p></li><li><p>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</p></li></ol><h2 id="Thread类的有关方法"><a href="#Thread类的有关方法" class="headerlink" title="Thread类的有关方法"></a>Thread类的有关方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 启动线程，并执行对象的<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 线程在被调度时执行的操作String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 返回线程的名称<span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">:</span>设置该线程名称<span class="token keyword">static</span> Thread <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 返回当前线程。在Thread子类中就是<span class="token keyword">this</span>，通常用于主线程和 Runnable实现类<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：线程让步暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程若队列中没有同优先级的线程，忽略此方法<span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：当某个程序执行流中调用其他线程的<span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法时，调用线程将被阻塞，直到<span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法加入的join 线程执行完为止低优先级的线程也可以获得执行<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span>：<span class="token punctuation">(</span>指定时间<span class="token operator">:</span>毫秒<span class="token punctuation">)</span>令当前线程在指定时间段放弃对CPU控制<span class="token punctuation">,</span>使其他线程有机会被执行<span class="token punctuation">,</span>时间到后重排队。抛出InterruptedException异常<span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 强制线程生命期结束，不推荐使用<span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回<span class="token keyword">boolean</span>，判断线程是否还活着</code></pre><p>（5）线程的调度<br>调度策略：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2ab141e9e55cf4e9a58c0f8658994186.png"></p><p>Java的调度方法：</p><p>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</p><p>对高优先级，使用优先调度的抢占式策略</p><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>线程的优先级等级</p><p>MAX_PRIORITY：10</p><p>MIN _PRIORITY：1</p><p>NORM_PRIORITY：5</p><p>涉及的方法</p><p>getPriority() ：返回线程优先值</p><p>setPriority(int newPriority) ：改变线程的优先级</p><p>说明</p><p>线程创建时继承父线程的优先级</p><p>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</p><h2 id="补充：线程的分类"><a href="#补充：线程的分类" class="headerlink" title="补充：线程的分类"></a>补充：线程的分类</h2><p>Java中的线程分为两类：一种是守护线程，一种是用户线程。</p><ol><li><p>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。</p></li><li><p>守护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。</p></li><li><p>Java垃圾回收就是一个典型的守护线程。</p></li><li><p>若JVM中都是守护线程，当前JVM将退出。</p></li><li><p>形象理解：兔死狗烹，鸟尽弓藏</p></li></ol><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>五个状态</p><p>A.新建：</p><p>当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</p><p>B.就绪：</p><p>处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了 运行的条件，只是没分配到CPU资源</p><p>C.运行：</p><p>当就绪的线程被调度并获得CPU资源时,便进入运行状态，run()方法定义了线程的操 作和功能</p><p>D.阻塞：</p><p>在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CPU 并临时中止自己的 执行，进入阻塞状态</p><p>E.死亡：</p><p>线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/5eccdb02a448b7b568a383da378c6566.png"></p><h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h1><h2 id="Synchronized同步代码块"><a href="#Synchronized同步代码块" class="headerlink" title="Synchronized同步代码块"></a>Synchronized同步代码块</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 需要被同步的代码；</span><span class="token punctuation">}</span></code></pre><p>同步监视器可自定义，但需要保证每个线程调用时，该对象是同一个。</p><p>A.使用实现Runnable接口的方法：</p><p>只会创建一个对象，所以监视器可以用this，即刚创建的该类的对象。</p><p>B.使用继承Thread类的方法：</p><p>由于创建多线程会创建出多个对象，就拥有了多个监视器，所以此时用把监视器设置为：该类.calss，因为一个类只有一个，且类也是对象。</p><h2 id="Synchronized同步方法"><a href="#Synchronized同步方法" class="headerlink" title="Synchronized同步方法"></a>Synchronized同步方法</h2><p>如果整个方法均需要同步，synchronized还可以放在方法声明中，表示整个方法为同步方法。</p><pre class=" language-java"><code class="language-java">例如：<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span> <span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>A.使用实现Runnable接口的方法：</p><p>只会创建一个对象，所以可以直接用上面的形势，此时也是有监视器的，是this，即刚创建的该类的对象。</p><p>B.使用继承Thread类的方法：</p><p>由于创建多线程会创建出多个对象，就拥有了多个监视器，所以此时用把该方法设置为static，此时的监视器为：该类.calss，因为一个类只有一个</p><p>synchronized的锁是什么？</p><ol><li><p>任意对象都可以作为同步锁。所有对象都自动含有单一的锁（监视器）。</p></li><li><p>同步方法的锁：静态方法（类名.class）、非静态方法（this）</p></li><li><p>同步代码块：自己指定，很多时候也是指定为this或类名.class</p></li></ol><p>注意：</p><ol><li><p>必须确保使用同一个资源的多个线程共用一把锁，这个非常重要，否则就无法保证共享资源的安全</p></li><li><p>一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）</p></li></ol><h2 id="同步的范围"><a href="#同步的范围" class="headerlink" title="同步的范围"></a>同步的范围</h2><ol><li>如何找问题，即代码是否存在线程安全？（非常重要）</li></ol><p>明确哪些代码是多线程运行的代码</p><p>明确多个线程是否有共享数据</p><p>明确多线程运行代码中是否有多条语句操作共享数据</p><ol start="2"><li>如何解决呢？（非常重要）</li></ol><p>对多条操作共享数据的语句，一个线程执行过程中，其他线程不可以参与执行。</p><p>即所有操作共享数据的这些语句都要放在同步范围中</p><ol start="3"><li>切记：</li></ol><p>范围太小：没锁住所有有安全问题的代码</p><p>范围太大：没发挥多线程的功能。</p><h2 id="释放锁的操作"><a href="#释放锁的操作" class="headerlink" title="释放锁的操作"></a>释放锁的操作</h2><p>A.当前线程的同步方法、同步代码块执行结束。</p><p>B.当前线程在同步代码块、同步方法中遇到break、return终止该代码块、该方法的继续执行。</p><p>C.当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束。</p><p>D.当前线程在同步代码块、同步方法中执行线程对象的wait()方法，当前线程暂停并释放锁。</p><h2 id="不会释放锁的操作"><a href="#不会释放锁的操作" class="headerlink" title="不会释放锁的操作"></a>不会释放锁的操作</h2><p>A.线程执行同步代码块或同步方法时，程序调用Thread.sleep()、</p><p>Thread.yield()方法暂停当前线程的执行</p><p>B.线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。</p><p>应尽量避免使用suspend()和resume()来控制线程</p><h2 id="线程的死锁问题"><a href="#线程的死锁问题" class="headerlink" title="线程的死锁问题"></a>线程的死锁问题</h2><p>死锁：</p><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源</p><p>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</p><p>解决方法：</p><p>专门的算法、原则</p><p>尽量减少同步资源的定义</p><p>尽量避免嵌套同步</p><h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h2><p>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</p><p>ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReenTrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>证线程安全的代码<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：如果同步代码有异常，要将unlock()写入finally语句块</p><h2 id="synchronized-与-Lock-的对比"><a href="#synchronized-与-Lock-的对比" class="headerlink" title="synchronized 与 Lock 的对比"></a>synchronized 与 Lock 的对比</h2><ol><li><p>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放</p></li><li><p>Lock只有代码块锁，synchronized有代码块锁和方法锁</p></li><li><p>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</p></li></ol><p>优先使用顺序：</p><p>Lock —— 同步代码块（已经进入了方法体，分配了相应资源）—— 同步方法</p><p>（在方法体之外）</p><h1 id="线性的通信"><a href="#线性的通信" class="headerlink" title="线性的通信"></a>线性的通信</h1><h2 id="wait-与notify-和notifyAll"><a href="#wait-与notify-和notifyAll" class="headerlink" title="wait() 与notify() 和notifyAll()"></a>wait() 与notify() 和notifyAll()</h2><p>wait()：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。</p><p>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</p><p>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待.</p><p>这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报</p><p>java.lang.IllegalMonitorStateException异常。</p><p>因为这三个方法必须有锁对象调用，而任意对象都可以作为synchronized的同步锁，因此这三个方法只能在Object类中声明。</p><h2 id="wait-方法"><a href="#wait-方法" class="headerlink" title="wait() 方法"></a>wait() 方法</h2><p>在当前线程中调用方法：对象名.wait()</p><p>使当前线程进入等待（某对象）状态，直到另一线程对该对象发出notify(notifyAll) 为止。</p><p>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</p><p>调用此方法后，当前线程将释放对象监控权，然后进入等待</p><p>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</p><h2 id="notify-x2F-notifyAll"><a href="#notify-x2F-notifyAll" class="headerlink" title="notify()&#x2F;notifyAll()"></a>notify()&#x2F;notifyAll()</h2><p>当前线程调用方法：对象名.notify()，对象名一般设置为同步代码块（方法）的同步监控器</p><p>功能：唤醒等待该对象监控权的一个&#x2F;所有线程。</p><p>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</p><p>面试题: sleep() 和wait()的异同?</p><p>A. 相同点:一旦执行方法， 都可以使得当前的线程进入阻塞状态。</p><p>B. 不同点: </p><ol><li><p>两个方法声明的位置不同: Thread类 中声明sleep()，object类中声明wait()</p></li><li><p>调用的要求不同: sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代</p></li><li><p>关于是否释放同步监视器:|如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会。</p></li></ol><h1 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>JDK5.0 新增线程创建方式</p><p>与使用Runnable相比， Callable功能更强大些</p><ol><li><p>相比run()方法，可以有返回值</p></li><li><p>方法可以抛出异常</p></li><li><p>支持泛型的返回值</p></li><li><p>需要借助FutureTask类，比如获取返回结果</p></li></ol><p>Future接口</p><p>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</p><p>FutrueTask是Futrue接口的唯一的实现类</p><p>FutureTask 同时实现了Runnable, Future接口。它既可以作为</p><p>Runnable被线程执行，又可以作为Future得到Callable的返回值</p><h2 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建一个实现Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//2.实现call方法，将此线程需要执行的操作声明在call（）中</span><span class="token annotation punctuation">@Override</span>Public Object call（）<span class="token keyword">throws</span> Exception<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>在调用类中：<span class="token comment" spellcheck="true">//3.创建Callable接口实现类的对象</span>NumThread numThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumThread</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.将Callable接口实现类的对象作为参数传到FutureTask构造器，创建FutureTask的对象</span>FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span> numThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5.将FutureTask的对象作为参数侍送到Thread美的构造器中创建Thread.象， 并调用start(）</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Try<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//6.获取Callable中dplL方法的返回值</span><span class="token comment" spellcheck="true">//get()返回值即为Future Task构造器参数Callable实现类重写的call()的返回値。</span>object sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span> out <span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</p><p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><p>好处：</p><p>A.提高响应速度（减少了创建新线程的时间）</p><p>B.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p><p>C.便于线程管理</p><p>corePoolSize：核心池的大小</p><p>maximumPoolSize：最大线程数</p><p>keepAliveTime：线程没有任务时最多保持多长时间后会终止</p><p>…</p><h2 id="线程池相关API"><a href="#线程池相关API" class="headerlink" title="线程池相关API"></a>线程池相关API</h2><p>JDK 5.0起提供了线程池相关API：ExecutorService 和 Executors</p><p>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor</p><p>void execute(Runnable command) ：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable</p><p><T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般又来执行Callable</p><p>void shutdown() ：关闭连接池</p><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><p>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</p><p>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</p><p>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</p><p>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/8b98e5e44e4309a1d487db7683a0f4d7.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（七）异常处理</title>
      <link href="/2022/05/22/javanotes/java7/"/>
      <url>/2022/05/22/javanotes/java7/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>因为很多问题不是靠代码能够避免的，(开发过程中的语法错误和逻辑错误不是异常) ，比如：</p><ol><li><p>客户输入数据的格式</p></li><li><p>读取文件是否存在</p></li><li><p>网络是否始终保持通畅等等</p></li></ol><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。</p><p>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：</p><ol><li><p>空指针访问</p></li><li><p>试图读取不存在的文件</p></li><li><p>网络连接中断</p></li><li><p>数组角标越界</p></li></ol><p>捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。比如：除数为0，数组下标越界等</p><p>分类：编译时异常和运行时异常</p><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token function">RuntimeException</span> <span class="token punctuation">(</span>运行异常<span class="token punctuation">)</span>ClassCastExceptionArrayIndexOutOfBoundsExceptionNullPointerExceptionArithmeticExceptionNumberFormatExceptionInputMismatchException<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOExeptionFileNotFoundExceptionEOFExceptionjava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundExceptionjava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>InterruptedExceptionjava<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundExceptionjava<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException</code></pre><h2 id="Java异常处理的方式"><a href="#Java异常处理的方式" class="headerlink" title="Java异常处理的方式"></a>Java异常处理的方式</h2><p>方式一：try-catch-finally</p><p>方式二：throws + 异常类型</p><ol><li><p>Java提供的是异常处理的抓抛模型。</p></li><li><p>Java程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被提交给Java运行时系统，这个过程称为抛出(throw)异常。</p></li><li><p>异常对象的生成</p></li></ol><p>A.由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出</p><p>B.由开发人员手动创建：Exception exception &#x3D; new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4dcda331c21388c8c8ec4c23abbeaa4d.png"></p><ol><li><p>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为捕获(catch)异常。</p></li><li><p>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</p></li><li><p>程序员通常只能处理Exception，而对Error无能为力。</p></li></ol><h1 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h1><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/f5c7e8bd544afb7d29aed2a4cbb5932d.png"></p><p>捕获异常的有关信息：</p><p>与其它对象一样，可以访问一个异常对象的成员变量或调用它的方法。</p><p>getMessage() 获取异常信息，返回字符串</p><p>printStackTrace() 获取异常类名和信息，以及异常出现在程序中的位置。返回值void。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/c0e86e67aafe0fbd71a403bc64677034.png"></p><p>finally:捕获异常的最后一步是通过finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。</p><h1 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h1><p>声明抛出异常是Java中处理异常的第二种方式</p><p>如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</p><p>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3c47db2f7e0a5a593a2cd98a4c309682.png"></p><p>重写方法不能抛出比被重写方法范围更大的异常类型。</p><p>在多态的情况下，对methodA()方法的调用-异常的捕获按父类声明的异常处理。</p><h1 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h1><p>首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运行环境)。</p><p>IOException e &#x3D; new IOException();</p><p>throw e;</p><p>可以抛出的异常必须是Throwable或其子类的实例。下面语句在编译时将会产生语法错误：</p><p>throw new String(“want to throw”);</p><h1 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h1><ol><li><p>一般地，用户自定义异常类都是RuntimeException的子类。</p></li><li><p>通常需要编写几个重载的构造器。</p></li><li><p>需要提供serialVersionUID</p></li><li><p>通过throw抛出。</p></li><li><p>最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</p></li><li><p>用户自己的异常类必须继承现有的异常类。</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e65c851dbbef2850c3047383a8e4554c.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（六）面向对象（下）</title>
      <link href="/2022/05/15/javanotes/java6/"/>
      <url>/2022/05/15/javanotes/java6/</url>
      
        <content type="html"><![CDATA[<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><h2 id="类属性、类方法"><a href="#类属性、类方法" class="headerlink" title="类属性、类方法"></a>类属性、类方法</h2><p>类属性作为该类各个对象之间共享的变量。在设计类时,分析哪些属性不因对象的不同而改变，将这些属性设置为类属性。相应的方法设置为类方法。<br>类变量（类属性）由该类的所有实例共享.<br>如果方法与调用者无关，则这样的方法通常被声明为类方法，由于不需要创建对象就可以调用类方法，从而简化了方法的调用。</p><h2 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h2><p>在Java类中，可用static修饰：属性、方法、代码块、内部类 </p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>A.随着类的加载而加载 </p><p>B.优先于对象存在 </p><p>C.修饰的成员，被所有对象所共享 </p><p>D.访问权限允许时，可不创建对象，直接被类调用(如Person.id、Person.add(int num) )</p><p>E.调用时，在一处修改了static的变量或方法，所有调用该static的均同步变化。</p><p>F.在static方法内部只能访问类的static修饰的属性或方法，不能访问类的非static结构。</p><p>G.因为不需要实例就可访问static方法，因此static方法内部不能有this,也不能有super 。</p><p>H.static修饰的方法不能被重写。</p><h1 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h1><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式。“套路” </p><h2 id="单例设计模式-1"><a href="#单例设计模式-1" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造器的访问权限设置为private，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的该类对象的变量也必须定义成静态的。</p><h2 id="单例-饿汉式"><a href="#单例-饿汉式" class="headerlink" title="单例-饿汉式"></a>单例-饿汉式</h2><p>一加载类就new好了，等待调用。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/000000000000.png"></p><h2 id="单例-懒汉式"><a href="#单例-懒汉式" class="headerlink" title="单例-懒汉式"></a>单例-懒汉式</h2><p>用的时候再new</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/111.png"></p><h2 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h2><p>由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p><h2 id="单例设计模式应用"><a href="#单例设计模式应用" class="headerlink" title="单例设计模式应用"></a>单例设计模式应用</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/131.png"></p><h1 id="main"><a href="#main" class="headerlink" title="main"></a>main</h1><p>因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>对Java类或对象进行初始化</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>一个类中代码块若有修饰符，则只能被static修饰，称为静态代码块(static block)，没有使用static修饰的，为非静态代码块。</p><p>static代码块通常用于初始化static的属性</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>A.静态代码块：用static 修饰的代码块</p><ol><li><p>可以有输出语句。</p></li><li><p>可以对类的属性、类的声明进行初始化操作。</p></li><li><p>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</p></li><li><p>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</p></li><li><p>静态代码块的执行要先于非静态代码块。</p></li><li><p>静态代码块随着类的加载而加载，且只执行一次。</p></li></ol><p>B.非静态代码块：没有static修饰的代码块</p><ol><li><p>可以有输出语句。</p></li><li><p>可以对类的属性、类的声明进行初始化操作。</p></li><li><p>除了调用非静态的结构外，还可以调用静态的变量或方法。</p></li><li><p>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</p></li><li><p>每次创建对象的时候，都会执行一次。且先于构造器执行。</p></li></ol><h2 id="分析运行顺序"><a href="#分析运行顺序" class="headerlink" title="分析运行顺序"></a>分析运行顺序</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/sssss.png"></p><p>先执行的是father的static代码块，然后son的static代码块，才是打印“777777777”，因为main方法的运行，需要son类的加载，又继承了father，所以从father开始打印。</p><h2 id="属性赋值的位置"><a href="#属性赋值的位置" class="headerlink" title="属性赋值的位置"></a>属性赋值的位置</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/sdafafafa.png"></p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。</p><p>A.final标记的类不能被继承。提高安全性，提高程序的可读性。</p><p>如：String类、System类、StringBuffer类</p><p>B.final标记的方法不能被子类重写。</p><p>如：Object类中的getClass()。</p><p>C.final标记的变量(成员变量或局部变量)称为常量。名称大写，且只能被赋值一次,不可修改。final标记的成员变量必须在声明时或在每个构造器中或代码块中显式赋值，然后才能使用。</p><p>如：final double MY_PI &#x3D; 3.14;</p><p>static final：全局常量</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>第一题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">++</span>x<span class="token punctuation">;</span> 错误，对x进行修改了<span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 正确，对x没有变化，只是用x进行运算。<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Other o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOne</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">final</span> Other o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 错误，对象o重新赋值。        o<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span> 正确，对象o的属性依然可以重新改写。    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Other</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="final属性赋值位置"><a href="#final属性赋值位置" class="headerlink" title="final属性赋值位置"></a>final属性赋值位置</h2><p>加载类之前一定要赋值,否则此属性不能再赋值了。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/faaa.png"></p><h1 id="抽象类、抽象方法"><a href="#抽象类、抽象方法" class="headerlink" title="抽象类、抽象方法"></a>抽象类、抽象方法</h1><p>有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>A.用abstract关键字来修饰一个类，这个类叫做抽象类。</p><p>B.用abstract来修饰一个方法，该方法叫做抽象方法。</p><p>抽象方法：只有方法的声明，没有方法的实现。以分号结束：</p><p>比如：public abstract void talk();</p><p>C.含有抽象方法的类必须被声明为抽象类。</p><p>D.抽象类不能被实例化。抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。若没有重写全部的抽象方法，仍为抽象类。</p><p>E.不能用abstract修饰变量、代码块、构造器；</p><p>F.不能用abstract修饰私有方法、静态方法、final的方法、final的类。</p><p>个人理解：相当于规定了子类应该有哪些方法，各个子类根据实际情况执行自己的代码。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>超类声明一个方法但不提供实现，该方法的实现由子类提供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。</p><h2 id="模板方法设计模式（多态的应用）"><a href="#模板方法设计模式（多态的应用）" class="headerlink" title="模板方法设计模式（多态的应用）"></a>模板方法设计模式（多态的应用）</h2><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p>解决的问题：</p><p>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</p><p>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</p><p>另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都支持USB连接。</p><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是&#x2F;要…则必须能…”的思想。继承是一个”是不是”的关系，而接口实现则是 “能不能”的关系。</p><p>接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。</p><p>接口(interface)是抽象方法和常量值定义的集合。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>A.用interface来定义。</p><p>B.接口中的所有成员变量都默认是由public static final修饰的。</p><p>C.接口中的所有抽象方法都默认是由public abstract修饰的。</p><p>D.接口中没有构造器。</p><p>E.接口采用多继承机制。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/sfxgx.png"></p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>A.定义Java类的语法格式：先写extends，后写implements</p><p>class SubClass extends SuperClass implements InterfaceA{ }</p><p>B.一个类可以实现多个接口，接口也可以继承其它接口。</p><p>C.实现接口的类必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍为抽象类。</p><p>D.接口的主要用途就是被实现类实现。（面向接口编程）</p><p>E.与继承关系类似，接口与实现类之间存在多态性</p><p>F.接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。</p><p>G.分别介绍本类、父类、接口的调用：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ffegsgs.png"></p><h1 id="代理模式（接口的应用）"><a href="#代理模式（接口的应用）" class="headerlink" title="代理模式（接口的应用）"></a>代理模式（接口的应用）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><pre><code>A.安全代理：屏蔽对真实角色的直接访问。B.远程代理：通过代理类处理远程方法调用（RMI）C.延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</code></pre><p>比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有100MB，在打开文件时，不可能将所有的图片都显示出来，这样就可以使用代理模式，当需要查看图片时，用proxy来进行大图片的打开。</p><p>分类:</p><pre><code>静态代理（静态定义代理类）动态代理（动态生成代理类）JDK自带的动态代理，需要反射等知识</code></pre><h1 id="接口与抽象类对比"><a href="#接口与抽象类对比" class="headerlink" title="接口与抽象类对比"></a>接口与抽象类对比</h1><h2 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/aegsah.png"></p><p>在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/agag.png"></p><p>编译错误，接口和继承一个优先级，所以不确定此时x是哪个。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/aggafzxb.png"></p><p>编译错误：The final field Rollable.ball cannot be assigned</p><p>任何在interface里声明的interface variable (接口变量，也可称成员变量)，默认为public static final。不可修改参数</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/agagwfjy.png"></p><h2 id="java-8的改进"><a href="#java-8的改进" class="headerlink" title="java 8的改进"></a>java 8的改进</h2><p>Java 8中，你可以为接口添加静态方法和默认方法。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p><p>静态方法：使用static 关键字修饰。可以通过接口直接调用静态方法，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。你可以在标准库中找到像Collection&#x2F;Collections或者Path&#x2F;Paths这样成对的接口和类。</p><p>默认方法：默认方法使用default 关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</p><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><p>若一个接口中定义了一个默认方法，而另外一个接口中也定义了一个同名同参数的方法（不管此方法是否是默认方法），在实现类同时实现了这两个接口时，会出现：接口冲突。</p><p>解决办法：实现类必须覆盖接口中同名同参数的方法，来解决冲突。</p><p>若一个接口中定义了一个默认方法，而父类中也定义了一个同名同参数的非抽象方法，则不会出现冲突问题。因为此时遵守：类优先原则。接口中具有相同名称和参数的默认方法会被忽略。</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><p>成员内部类作为类的成员的角色：</p><p>A.和外部类不同，Inner class还可以声明为private或protected；</p><p>B.可以调用外部类的结构;</p><p>C.可以声明为static的，但此时就不能再使用外层类的非static的成员变量；</p><p>成员内部类作为类的角色：</p><p>A.可以在内部定义属性、方法、构造器等结构</p><p>B.可以声明为abstract类，因此可以被其它的内部类继承</p><p>C.可以声明为final的</p><p>D.编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）</p><p>【注意】</p><ol><li><p>非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。</p></li><li><p>外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式</p></li><li><p>成员内部类可以直接使用外部类的所有成员，包括私有的数据</p></li><li><p>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</p></li></ol><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/hkuilllhl.png"></p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p>A.内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。</p><p>B.只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。</p><p>C.局部内部类可以使用外部类的成员，包括私有的。</p><p>D.局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致。</p><p>E.局部内部类和局部变量地位类似，不能使用public,protected,缺省,private</p><p>F.局部内部类不能使用static修饰，因此也不能包含静态成员</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（五）面向对象中</title>
      <link href="/2022/04/29/javanotes/java5/"/>
      <url>/2022/04/29/javanotes/java5/</url>
      
        <content type="html"><![CDATA[<h1 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h1><h2 id="为什么要有继承"><a href="#为什么要有继承" class="headerlink" title="为什么要有继承"></a>为什么要有继承</h2><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。</p><p>此处的多个类称为子类(派生类)，单独的这个类称为父类(基类或超类)。</p><h2 id="类继承语法规则"><a href="#类继承语法规则" class="headerlink" title="类继承语法规则"></a>类继承语法规则</h2><p><code>class Subclass extends SuperClass&#123; &#125;</code></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li><p>减少了代码冗余，提高了代码的复用性。</p></li><li><p>更有利于功能的扩展。</p></li><li><p>让类与类之间产生了关系，提供了多态的前提。</p></li></ol><p>注意：不要仅为了获取其他类中某个功能而去继承</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>子类继承了父类，就继承了父类的方法和属性。</p></li><li><p>在子类中，可以使用父类中定义的方法和属性，也可以创建新的数据和方法。</p></li><li><p>在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集，而是对父类的“扩展”。</p></li><li><p>关于继承的规则：</p></li></ol><p>子类不能直接访问父类中私有的(private)的成员变量和方法。但此时，依然继承了这个私有的变量、方法。</p><ol start="5"><li>Java只支持单继承和多层继承，不允许多重继承</li></ol><p>一个子类只能有一个父类</p><p>一个父类可以派生出多个子类</p><p><code>class SubDemo extends Demo&#123; &#125; //ok</code></p><p><code>class SubDemo extends Demo1,Demo2...//error</code></p><ol start="6"><li>如果没有显示生命一个父类，则继承java.lang.object类。</li></ol><p>且所有类直接或间接继承java.lang.object类</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>第一次打印定义base类，运行的是base2类，所以相当于在base2类要找base类重写的方法。</p><p>第二次打印定义base2类，运行的也是base2类，所以直接在base2里找方法，优先匹配形式一致的方法。</p><h1 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h1><h2 id="定义：-override-x2F-overwrite"><a href="#定义：-override-x2F-overwrite" class="headerlink" title="定义：(override&#x2F;overwrite)"></a>定义：(override&#x2F;overwrite)</h2><p>在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。</p><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ol><li><p>子类重写的方法必须和父类被重写的方法具有相同的方法名称、参数列表</p></li><li><p>子类重写的方法的返回值类型不能大于父类被重写的方法的返回值类型</p></li><li><p>子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限</p></li></ol><p>子类不能重写父类中声明为private权限的方法</p><p>子类方法抛出的异常不能大于父类被重写方法的异常</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为 static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p><h1 id="super"><a href="#super" class="headerlink" title="super"></a>super</h1><h2 id="在Java类中使用super来调用父类中的指定操作："><a href="#在Java类中使用super来调用父类中的指定操作：" class="headerlink" title="在Java类中使用super来调用父类中的指定操作："></a>在Java类中使用super来调用父类中的指定操作：</h2><ol><li><p>super可用于访问父类中定义的属性</p></li><li><p>super可用于调用父类中定义的成员方法</p></li><li><p>super可用于在子类构造器中调用父类的构造器</p></li></ol><h2 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h2><ol><li><p>尤其当子父类出现同名成员时，可以用super表明调用的是父类中的成员</p></li><li><p>super的追溯不仅限于直接父类</p></li><li><p>super和this的用法相像，this代表本类对象的引用，super代表父类内存空间的标识</p></li></ol><h2 id="调用父类的构造器："><a href="#调用父类的构造器：" class="headerlink" title="调用父类的构造器："></a>调用父类的构造器：</h2><ol><li><p>子类中所有的构造器默认都会访问父类中空参数的构造器</p></li><li><p>当父类中没有空参数的构造器时，子类的构造器必须通过this(参数列表)或者super(参数列表)语句指定调用本类或者父类中相应的构造器。同时，只能”二选一”，且必须放在构造器的首行</p></li><li><p>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错</p></li></ol><h2 id="this和super的区别"><a href="#this和super的区别" class="headerlink" title="this和super的区别"></a>this和super的区别</h2><h1 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li><p>多态性，是面向对象中最重要的概念，在Java中的体现：</p></li><li><p>对象的多态性：父类的引用指向子类的对象。可以直接应用在抽象类和接口上</p></li><li><p>Java引用变量有两个类型：编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。简称：编译时，看左边；运行时，看右边。</p></li></ol><p>若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)</p><p>多态情况下，“看左边”：看的是父类的引用（父类中不具备子类特有的方法）</p><p>“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</p><h2 id="对象的多态"><a href="#对象的多态" class="headerlink" title="对象的多态"></a>对象的多态</h2><ol><li>在Java中,子类的对象可以替代父类的对象使用</li></ol><p>一个变量只能有一种确定的数据类型</p><p>一个引用类型变量可能指向(引用)多种不同类型的对象</p><p>Person p &#x3D; new Student();</p><p>Object o &#x3D; new Person();&#x2F;&#x2F;Object类型的变量o，指向Person类型的对象</p><p>o &#x3D; new Student(); &#x2F;&#x2F;Object类型的变量o，指向Student类型的对象</p><ol start="2"><li><p>子类可看做是特殊的父类，所以父类类型的引用可以指向子类的对象：向上转型(upcasting)。</p></li><li><p>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法</p></li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h2 id="方法的重载与重写"><a href="#方法的重载与重写" class="headerlink" title="方法的重载与重写"></a>方法的重载与重写</h2><p>从编译和运行的角度看：</p><p>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</p><p>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</p><p>而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。</p><h2 id="多态小结"><a href="#多态小结" class="headerlink" title="多态小结"></a>多态小结</h2><p>多态作用：</p><p>提高了代码的通用性，常称作接口重用</p><p>前提：</p><p>需要存在继承或者实现关系</p><p>有方法的重写</p><p>成员方法：</p><p>编译时：要查看引用变量所声明的类中是否有所调用的方法。</p><p>运行时：调用实际new的对象所属的类中的重写方法。</p><p>成员变量：</p><p>不具备多态性，只看引用变量所声明的类。</p><h2 id="子类继承父类"><a href="#子类继承父类" class="headerlink" title="子类继承父类"></a>子类继承父类</h2><p>若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。</p><p>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量</p><p>即：多态性，把父类和子类的属性和方法都加载在堆中，运行的是父类的属性（子类的属性加载进来但不能调用）和子类重写的方法（此方法父类中必须包含）。</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>x instanceof A：检验变量x是否为类A的对象，返回值为boolean型。</p><p>要求x所属的类与类A必须是子类和父类的关系，否则编译错误。</p><p>如果x属于类A的子类B，x instanceof A值也为true。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graduate</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span>Person e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 处理Person类及其子类对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//处理Student类及其子类对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Graduate</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//处理Graduate类及其子类对象</span><span class="token punctuation">}</span></code></pre><h2 id="对象类型转换-Casting"><a href="#对象类型转换-Casting" class="headerlink" title="对象类型转换(Casting )"></a>对象类型转换(Casting )</h2><p>1.基本数据类型的Casting：</p><p>自动类型转换：小的数据类型可以自动转换成大的数据类型</p><p>如long g&#x3D;20; double d&#x3D;12.0f</p><p>强制类型转换：可以把大的数据类型强制转换(casting)成小的数据类型</p><p>如float f&#x3D;(float)12.0; int a&#x3D;(int)1200L</p><p>2.对Java对象的强制类型转换称为造型</p><p>从子类到父类的类型转换可以自动进行</p><p>从父类到子类的类型转换必须通过造型(强制类型转换)实现</p><p>无继承关系的引用类型间的转换是非法的</p><p>在造型前可以使用instanceof操作符测试一个对象的类型</p><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>在方法名上面加入@Test注解，然后add导包，即可对其中一个方法进行测试。</p><p>要求：类为public、有public无参构造器、方法名public且无返回值无形参。</p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>Object类是所有Java类的根父类</p><p>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</p><h2 id="x3D-x3D"><a href="#x3D-x3D" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>A.基本类型比较值:只要两个变量的值相等，即为true。</p><p>int a&#x3D;5; if(a&#x3D;&#x3D;6){…}</p><p>B.引用类型比较引用(是否指向同一个对象)：只有指向同一个对象时，&#x3D;&#x3D;才返回true。</p><p>Person p1&#x3D;new Person();</p><p>Person p2&#x3D;new Person();</p><p>if (p1&#x3D;&#x3D;p2){…}</p><p>此时比较的是p1、p2是否是同一地址。用“&#x3D;&#x3D;”进行比较时，符号两边的数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错。</p><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><p>A.所有类都继承了Object，也就获得了equals()方法。还可以重写。</p><p>B.只能比较引用类型，其作用与“&#x3D;&#x3D;”相同,比较是否指向同一个对象。（地址值）</p><p>格式:obj1.equals(obj2)</p><p>C.特例：</p><p>当用equals()方法进行比较时，对类File、String、Date及包装类（Wrapper Class）来说，是比较类型及内容而不考虑引用的是否是同一个对象；</p><p>原因：</p><p>在这些类中重写了Object类的equals()方法。当自定义使用equals()时，可以重写。用于比较两个对象的“内容”是否都相等</p><p>D.任何情况下</p><p>x.equals(null)，永远返回是“false”；</p><p>x.equals(和x不同类型的对象)永远返回是“false”。</p><h2 id="x3D-x3D-和equals的区别"><a href="#x3D-x3D-和equals的区别" class="headerlink" title="&#x3D;&#x3D;和equals的区别"></a>&#x3D;&#x3D;和equals的区别</h2><ol><li><p>&#x3D;&#x3D; 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址</p></li><li><p>equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也</p></li></ol><p>是&#x3D;&#x3D;;我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中用的比较多，久而久之，形成了equals是比较值的错误观点。</p><ol start="3"><li><p>具体要看自定义类里有没有重写Object的equals方法来判断。</p></li><li><p>通常情况下，重写equals方法，会比较类中的相应属性是否都相等。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> it <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token keyword">float</span> fl <span class="token operator">=</span> <span class="token number">65.0f</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token number">65</span>和<span class="token number">65.0f</span>是否相等？” <span class="token operator">+</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> fl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> <span class="token keyword">char</span> ch2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"65和'A'是否相等？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> ch1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token number">12</span>和ch2是否相等？" <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">==</span> ch2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><ol><li><p>toString()方法在Object类中定义，其返回值是String类型，返回类名和它的引用地址。</p></li><li><p>在进行String与其它类型数据的连接操作时，自动调用toString()方法</p></li></ol><p>Date now&#x3D;new Date();</p><p>System.out.println(“now&#x3D;”+now); 相当于System.out.println(“now&#x3D;”+now.toString());</p><ol start="3"><li>可以根据需要在用户自定义类型中重写toString()方法</li></ol><p>如String 类重写了toString()方法，返回字符串的值。</p><p>s1&#x3D;“hello”;</p><p>System.out.println(s1);&#x2F;&#x2F;相当于System.out.println(s1.toString());</p><p>基本类型数据转换为String类型时，调用了对应包装类的toString()方法</p><p>int a&#x3D;10; System.out.println(“a&#x3D;”+a);</p><p>面试题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//abc</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[I@1c655221</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[D@58d25a40</span></code></pre><h1 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h1><h2 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h2><p>JDK1.5之后，支持自动装箱，自动拆箱。但类型必须匹配。</p><p>A.基本数据类型包装成包装类的实例—装箱</p><p>通过包装类的构造器实现：</p><p><code>int i = 500; Integer t = new Integer(i);</code></p><p>还可以通过字符串参数构造包装类对象：</p><p><code>Float f = new Float(“4.56”);</code></p><p><code>Long l = new Long(“asdf”); //NumberFormatException</code></p><p>B.获得包装类对象中包装的基本类型变量—拆箱</p><p>调用包装类的.xxxValue()方法：</p><p><code>boolean b = flag.booleanValue();</code></p><h2 id="字符串、基本数据类型转换"><a href="#字符串、基本数据类型转换" class="headerlink" title="字符串、基本数据类型转换"></a>字符串、基本数据类型转换</h2><p>A.字符串转换成基本数据类型</p><p>通过包装类的构造器实现：</p><p><code>int i = new Integer(“12”);</code></p><p>通过包装类的parseXxx(String s)静态方法：</p><p><code>Float f = Float.parseFloat(“12.1”);</code></p><p>B.基本数据类型转换成字符串</p><p>调用字符串重载的valueOf()方法：</p><p><code>String fstr = String.valueOf(2.34f);</code></p><p>更直接的方式：</p><p><code>String intStr = 5 + “”</code></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><pre class=" language-java"><code class="language-java">Object o1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.0</span>执行三元判断时，都运行了，所以<span class="token keyword">int</span>型，类型提升Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false （两个地址值不一样）</span>Integer m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Integer n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>（为快速加载，该类提前定义数组<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span>，<span class="token number">127</span><span class="token punctuation">]</span>，所以没有经过<span class="token keyword">new</span>，两个<span class="token number">1</span>均从数组里取值）Integer x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>Integer y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false （超过127，需要重新new）</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（四）面向对象上</title>
      <link href="/2022/04/20/javanotes/java4/"/>
      <url>/2022/04/20/javanotes/java4/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="面向过程-POP-与-面向对象-OOP"><a href="#面向过程-POP-与-面向对象-OOP" class="headerlink" title="面向过程(POP) 与 面向对象(OOP)"></a>面向过程(POP) 与 面向对象(OOP)</h2><p>二者都是一种思想，面向对象是相对于面向过程而言的。</p><p>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。</p><p>面向对象，将功能封装进对象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。</p><h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><p>封装(Encapsulation)</p><p>继承(Inheritance)</p><p>多态(Polymorphism)</p><h2 id="面向对象的思想概述"><a href="#面向对象的思想概述" class="headerlink" title="面向对象的思想概述"></a>面向对象的思想概述</h2><p>类(Class)和对象(Object)是面向对象的核心概念。</p><p>类是对一类事物的描述，是抽象的、概念上的定义</p><p>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。</p><h2 id="常见的类的成员"><a href="#常见的类的成员" class="headerlink" title="常见的类的成员"></a>常见的类的成员</h2><p>属性：对应类中的成员变量</p><p>行为：对应类中的成员方法</p><p>Field &#x3D; 属性&#x3D; 成员变量，Method &#x3D; (成员)方法&#x3D; 函数</p><h2 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h2><p>步骤：</p><ol><li><p>定义类（考虑修饰符、类名）</p></li><li><p>编写类的属性（考虑修饰符、属性类型、属性名、初始化值）</p></li><li><p>编写类的方法（考虑修饰符、返回值类型、方法名、形参等）</p></li></ol><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>语法：类名 对象名&#x3D; new 类名();</p><p>使用 “对象名.对象成员” 的方式访问对象成员（包括属性和方法）</p><h2 id="类的访问机制："><a href="#类的访问机制：" class="headerlink" title="类的访问机制："></a>类的访问机制：</h2><p>在一个类中的访问机制：类中的方法可以直接访问类中的成员变量。（例外：static方法访问非static，编译不通过。）</p><p>在不同类中的访问机制：先创建要访问类的对象，再用对象访问类中定义的成员。</p><h2 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h2><p>堆（Heap），此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p><p>栈（Stack），是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char 、short 、int 、float 、long 、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。</p><p>方法区（Method Area），用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。</p><p>如：new Person().shout();</p><p>使用情况：如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。我们经常将匿名对象作为实参传递给一个方法调用。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><p>修饰符 数据类型 属性名&#x3D; 初始化值;</p><p>说明1: 修饰符</p><p>常用的权限修饰符有：private、缺省、protected、public</p><p>其他修饰符：static、final (暂不考虑)</p><p>说明2：数据类型</p><p>任何基本数据类型(如int、Boolean) 或任何引用数据类型。</p><p>说明3：属性名</p><p>属于标识符，符合命名规则和规范即可。</p><h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><p>在方法体外，类体内声明的变量称为 成员变量。</p><p>在方法体内部声明的变量称为 局部变量。</p><h2 id="赋值的位置："><a href="#赋值的位置：" class="headerlink" title="赋值的位置："></a>赋值的位置：</h2><p>① 默认初始化</p><p>② 显式初始化</p><p>③ 构造器中初始化</p><p>④ 通过“对象.属性“或“对象.方法”的方式赋值</p><p>赋值的先后顺序：</p><p>① - ② - ③ - ④</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>如果循环体外还想用变量，可以把变量的声明放在外面，复制在循环体里面，这样循环完还可以继续用这个变量</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为函数或过程。将功能封装为方法的目的是，可以实现代码重用，简化代码</p><p>Java里的方法不能独立存在，所有的方法必须定义在类里。</p><h2 id="声明格式"><a href="#声明格式" class="headerlink" title="声明格式"></a>声明格式</h2><p>修饰符 返回值 类型 方法名（参数类型形参1, 参数类型形参2, ….）｛</p><p>方法体 程序代码</p><p>return 返回值;</p><p>｝</p><p>方法中只能调用方法或属性，不可以在方法内部定义方法。</p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>概念：</p><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同。</p><p>特点：</p><p>与返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。</p><h2 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h2><p>&#x2F;&#x2F;JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</p><p>public static void test(int a ,String[] books);</p><p>&#x2F;&#x2F;JDK5.0：采用可变个数形参来定义方法，传入多个同一类型变量</p><p>public static void test(int a ,String…books);</p><p>说明：</p><ol><li><p>声明格式：方法名(参数的类型名 …参数名)</p></li><li><p>可变参数：方法参数部分指定类型的参数个数是可变多个：0个，1个或多个</p></li><li><p>可变个数形参的方法与同名的方法之间，彼此构成重载</p></li><li><p>可变参数方法的使用与方法参数部分使用数组是一致的</p></li><li><p>方法的参数部分有可变形参，需要放在形参声明的最后</p></li><li><p>在一个方法的形参位置，最多只能声明一个可变个数形参</p></li></ol><h2 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h2><p>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</p><p>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</p><p>失败：change会新创建一个变量放在栈里，两个x各走各的。</p><p>成功：change和main共用一个对象，放在堆里，修改的是一个对象。</p><p>拓展题目：</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>一个方法体内调用它自身。</p><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</p><p>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p><h2 id="封装和隐藏"><a href="#封装和隐藏" class="headerlink" title="封装和隐藏"></a>封装和隐藏</h2><p>我们程序设计追求“高内聚，低耦合”。</p><p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉；</p><p>低耦合：仅对外暴露少量的方法用于使用。</p><p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p><p>通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx()和setXxx()实现对该属性的操作，以实现下述目的：</p><p>隐藏一个类中不需要对外提供的实现细节；</p><p>便于修改，增强代码的可维护性；</p><p>只能通过事先定制好的方法来访问数据，可以加入控制逻辑，限制对属性的不合理操作；</p><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><h2 id="语法格式：-1"><a href="#语法格式：-1" class="headerlink" title="语法格式："></a>语法格式：</h2><p>修饰符类名(参数列表) {</p><p>初始化语句；</p><p>}</p><h2 id="构造器的特征："><a href="#构造器的特征：" class="headerlink" title="构造器的特征："></a>构造器的特征：</h2><ol><li><p>它具有与类相同的名称</p></li><li><p>它不声明返回值类型。（与声明为void不同）</p></li><li><p>不能被static、final、synchronized、abstract、native修饰，不能有return语句返回值</p></li></ol><h2 id="构造器的作用："><a href="#构造器的作用：" class="headerlink" title="构造器的作用："></a>构造器的作用：</h2><ol><li><p>创建对象；</p></li><li><p>给对象进行初始化</p></li></ol><p>如：Order o &#x3D; new Order(); Person p &#x3D; new Person(“Peter”,15);</p><p>如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</p><p>创建Animal类的实例：Animal a &#x3D; new Animal(); 调用构造器，将legs初始化为4。</p><p>根据参数不同，构造器可以分为如下两类：</p><ol><li><p>隐式无参构造器（系统默认提供）</p></li><li><p>显式定义一个或多个构造器（无参、有参）</p></li></ol><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ol><li><p>Java语言中，每个类都至少有一个构造器</p></li><li><p>默认构造器的修饰符与所属类的修饰符一致</p></li><li><p>一旦显式定义了构造器，则系统不再提供默认构造器</p></li><li><p>一个类可以创建多个重载的构造器</p></li><li><p>父类的构造器不可被子类继承</p></li></ol><h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><p>JavaBean是一种Java语言写成的可重用组件。</p><p>所谓javaBean，是指符合如下标准的Java类：</p><ol><li><p>类是公共的</p></li><li><p>有一个无参的公共的构造器</p></li><li><p>有属性，且有对应的get、set方法</p></li></ol><p>用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p><h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><ol><li><p>+表示public 类型，- 表示private 类型，#表示protected类型</p></li><li><p>方法的写法: 方法的类型(+、-) 方法名(参数名：参数类型)：返回值类型</p></li></ol><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li><p>它在方法内部使用，即这个方法所属对象的引用；<br>它在构造器内部使用，表示该构造器正在初始化的对象。</p></li><li><p>this可以调用类的属性、方法和构造器</p></li><li><p>当在方法内需要用到调用该方法的对象时，就用this。</p></li></ol><p>具体的：我们可以用this来区分属性和局部变量。</p><p>比如：this.name &#x3D; name;</p><h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><ol><li><p>在任意方法或构造器内，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的阅读性。不过，通常我们都习惯省略this。</p></li><li><p>当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量</p></li><li><p>使用this访问属性和方法时，如果在本类中未找到，会从父类中查找</p></li><li><p>this可以作为一个类中构造器相互调用的特殊格式</p></li></ol><p>(3)注意（构造器相互调用）：<br>1.可以在类的构造器中使用”this(形参列表)”的方式，调用本类中重载的其他的构造器！</p><p>2.明确：构造器中不能通过”this(形参列表)”的方式调用自身构造器</p><p>3.如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了”this(形参列表)”</p><p>4.”this(形参列表)”必须声明在类的构造器的首行！</p><p>5.在类的一个构造器中，最多只能声明一个”this(形参列表)”</p><h1 id="package"><a href="#package" class="headerlink" title="package"></a>package</h1><p>package语句作为Java源文件的第一条语句，指明该文件中定义的类所在的包。(若缺省该语句，则指定为无名包)。它的格式为：</p><p>package 顶层包名.子包名;</p><p>包对应于文件系统的目录，package语句中，用“.” 来指明包(目录)的层次；</p><p>包通常用小写单词标识。通常使用所在公司域名的倒置：com.atguigu.xxx</p><p>举例：pack1\pack2\PackageTest.java</p><p>package pack1.pack2; &#x2F;&#x2F;指定类PackageTest属于包pack1.pack2</p><h1 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h1><p> 192 节 课后练习4</p><p>定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</p><p>问题一：打印出3年级(state值为3）的学生信息。</p><p>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（三）数组</title>
      <link href="/2022/04/12/javanotes/java3/"/>
      <url>/2022/04/12/javanotes/java3/</url>
      
        <content type="html"><![CDATA[<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/77767409030bc88b31f380d640998dda.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/c6bcc7a0e0f6b15c390869c63f27c32b.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/a5c4aaf447f8b313c04a2439efd43e3d.png"></p><p>打印二维数组的外层数组，其实相当于打印一个一维数组，只会打印出这个数组存放的地址。其中“[I@15db…”的‘[’表示一维，‘I’ 表示int型。</p><p>倒数第二行为null，即使二维数组是double，但里面的元素数组还未定义类型，而数组的为初始化为null。报错是因为未初始化就取值会报错。</p><h1 id="数组的赋值与复制"><a href="#数组的赋值与复制" class="headerlink" title="数组的赋值与复制"></a>数组的赋值与复制</h1><p>（1）数组的赋值：</p><p>慎用array1 &#x3D; array2 来赋值，虽然把array2 赋值给array1，但修改array1同样修改的是array2，只是将array2的地址给了array1，他俩共用一个数组。</p><p>（2）数组的复制：</p><p>开辟一个新的堆，存放新数组</p><pre class=" language-java"><code class="language-java">array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>array2<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="打印数组"><a href="#打印数组" class="headerlink" title="打印数组"></a>打印数组</h1><p>将数组转成String：Arrays.toString()</p><p>System.out.println(“等级” + Arrays.toString(abcd));</p><h1 id="数组算法"><a href="#数组算法" class="headerlink" title="数组算法"></a>数组算法</h1><p>（1）衡量排序算法的优劣</p><p>1.时间复杂度：分析关键字的比较次数和记录的移动次数</p><p>2.空间复杂度：分析排序算法中需要多少辅助内存</p><p>3.稳定性：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种排序算法是稳定的。</p><p>（2）排序算法分类</p><p>内部排序和外部排序。</p><p>内部排序：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。</p><p>外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。</p><p>（3）十大内部排序算法</p><p>a选择排序</p><p>直接选择排序、堆排序</p><p>b交换排序</p><p>冒泡排序、快速排序</p><p>c插入排序</p><p>直接插入排序、折半插入排序、Shell排序</p><p>d归并排序</p><p>e桶式排序</p><p>f基数排序</p><p>(3)冒泡排序</p><p>介绍：</p><p>冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p>排序思想：</p><ol><li><p>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</p></li><li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</p></li></ol><p>(4)快速排序</p><p>介绍：</p><p>快速排序通常明显比同为O(nlogn)的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见掌握快排的重要性。</p><p>快速排序（Quick Sort）由图灵奖获得者Tony Hoare发明，被列为20世纪十大算法之一，是迄今为止所有内排序算法中速度最快的一种。冒泡排序的升级版，交换排序的一种。快速排序的时间复杂度为O(nlog(n))。</p><p>排序思想：</p><ol><li><p>从数列中挑出一个元素，称为”基准”（pivot），</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p></li><li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p></li><li><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（二）基本语法</title>
      <link href="/2022/04/06/javanotes/java2/"/>
      <url>/2022/04/06/javanotes/java2/</url>
      
        <content type="html"><![CDATA[<h1 id="关键字-keyword"><a href="#关键字-keyword" class="headerlink" title="关键字(keyword)"></a>关键字(keyword)</h1><p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</p><p>特点：关键字中所有字母都为小写</p><h1 id="保留字-reserved-word"><a href="#保留字-reserved-word" class="headerlink" title="保留字(reserved word)"></a>保留字(reserved word)</h1><p>现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字：</p><p>goto 、const</p><h1 id="标识符-Identifier"><a href="#标识符-Identifier" class="headerlink" title="标识符(Identifier)"></a>标识符(Identifier)</h1><p>Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><h2 id="定义合法标识符规则："><a href="#定义合法标识符规则：" class="headerlink" title="定义合法标识符规则："></a>定义合法标识符规则：</h2><p>A.由26个英文字母大小写，0-9 ，_或$ 组成</p><p>B.数字不可以开头。</p><p>C.不可以使用关键字和保留字，但能包含关键字和保留字。</p><p>D.Java中严格区分大小写，长度无限制。</p><p>E.标识符不能包含空格。</p><h2 id="Java中的名称命名规范："><a href="#Java中的名称命名规范：" class="headerlink" title="Java中的名称命名规范："></a>Java中的名称命名规范：</h2><p>包名：多单词组成时所有字母都小写：xxxyyyzzz</p><p>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</p><p>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个开始首字母大写：xxxYyyZzz</p><p>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</p><p>注意1：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p><p>注意2：java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</p><h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><h3 id="按数据类型"><a href="#按数据类型" class="headerlink" title="按数据类型"></a>按数据类型</h3><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/5f627a070ac3741d7c8bcd3c54955412.png"></p><h3 id="按声明的位置的不同"><a href="#按声明的位置的不同" class="headerlink" title="按声明的位置的不同"></a>按声明的位置的不同</h3><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/7ad96ec73c6094764e008806c67f1458.png"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><p>（1）整数类型：byte、short、int、long</p><p>整型常量默认为int 型，声明long型常量须后加‘l’或‘L’ ，否则默认为int。</p><p>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long。</p><p>（2）浮点类型：float、double</p><p>double:双精度，精度是float的两倍。通常采用此类型。</p><p>浮点型常量默认为double型，声明float型常量，须后加‘f’或‘F’。否则默认为double。</p><p>如下图：因为b1已经为int，f1已经为double。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/fa88680fb758f54fff69db8fc35d790a.png"></p><h3 id="字符型：char"><a href="#字符型：char" class="headerlink" title="字符型：char"></a>字符型：char</h3><p>用来表示通常意义上“字符”(2字节) ，Java中的所有字符都使用Unicode编码，</p><p>故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</p><p>字符型变量的三种表现形式：</p><p>（1）字符常量是用单引号(‘ ’)括起来的单个字符。</p><p>例如：char c1 &#x3D; ‘a’; char c2 &#x3D; ‘中’; char c3 &#x3D; ‘9’;</p><p>（2）Java中还允许使用转义字符‘\’来将其后的字符转变为特殊字符型常量。</p><p>例如：char c3 &#x3D; ‘\n’; &#x2F;&#x2F; ‘\n’表示换行符</p><p>（3）直接用Unicode值表示字符型常量：‘\uXXXX’。XXXX代表一个十六进制整数。</p><p>例如：\u000a 表示\n。</p><p>char类型是可以进行运算的。因为它都对应有Unicode码。</p><p>Char c1 &#x3D; 97; 和char c2 &#x3D; ‘97’; 是不一样的，c1输出的是Unicode码，c2输出的是符号对应的Unicode码。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/201eac85b29cc67fed3887802ab7c07d.png"></p><h3 id="布尔型：boolean"><a href="#布尔型：boolean" class="headerlink" title="布尔型：boolean"></a>布尔型：boolean</h3><p>只允许取值true和false，无null。</p><p>不可以使用0或非0 的整数替代false和true，这点和C语言不同。</p><p>编译后使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>字符串类型：String , String不是基本数据类型，属于引用数据类型</p><h2 id="使用变量注意"><a href="#使用变量注意" class="headerlink" title="使用变量注意"></a>使用变量注意</h2><p>A.Java中每个变量必须先声明，后使用</p><p>B.使用变量名来访问这块区域的数据</p><p>C.变量的作用域：其定义所在的一对{ }内</p><p>D.变量只有在其作用域内才有效</p><p>E.同一个作用域内，不能定义重名的变量</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>A.语法：&lt;数据类型&gt; &lt;变量名称&gt;</p><p>例如：int var;</p><p>B.变量的赋值</p><p>语法：&lt;变量名称&gt; &#x3D; &lt;值&gt;</p><p>例如：var &#x3D; 10;</p><p>C.声明和赋值变量</p><p>语法：&lt;数据类型&gt; &lt;变量名&gt; &#x3D; &lt;初始化值&gt;</p><p>例如：int var &#x3D; 10;</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/27b11274ffd79db659683643d0b4f71b.png"></p><p>A.有多种类型的数据混合运算时，自动将所有数据转换成容量最大的类型，再进行计算。</p><p>B. byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</p><p>C. boolean类型不能与其它数据类型运算。</p><p>D.当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/6e1abbe118542ffbf58749a624e8deed.png"></p><p> ‘a’为char，和后面的int 1 自动升级int值97，97 +1 &#x3D; 98 再升级为字符串</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/5c1c56fc02373c2d8cf48ede348966b0.png"></p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。</p><p>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。如：String a &#x3D; “43”; int i &#x3D; Integer.parseInt(a);</p><p>boolean类型不可以转换为其它的数据类型。</p><p>例子：byte b &#x3D; 3;</p><p>b &#x3D; (byte)(b+4); 因为b+4，所以b本应该转为int，强制转为byte。</p><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>计算机以二进制补码的形式保存所有的整数。</p><p>二进制的整数有如下三种形式：</p><p>原码：直接将一个数值换成二进制数。最高位是符号位</p><p>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。</p><p>负数的补码：其反码加1。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/179340a832b9598d2647f5a9a945cca6.png"></p><p>注意：</p><p>（1）算术“与”，是他们的二进制对位相乘</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/b6173a8c4299bc0ac4c4ef3a4255a451.png"></p><p>十进制的60转为十六进制</p><p>第三行强制转char，就可以把i2-10（int） + ‘A’（char）输出char型的字符</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/97036da0445e779eee4093d4e43a3033.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/4364d6b2393b25cbb8f13607f76be3bc.png"></p><p>练习：表示三位数的各个位：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/d701ed856ca0f8ab75265be767d04ed7.png"></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;</p><p>以+&#x3D;为例，格式都一样的:</p><p>x +&#x3D; 2； (不改变数据类型)</p><p>x &#x3D; x + 2; （x初始为short，输出的x应为int，所以编译错误，没有强行转换）</p><p>练习：</p><p>int n &#x3D; 10;</p><p>n +&#x3D; (n++) + (++n);</p><p>System.out.println(n); 答案：n &#x3D; 32；</p><p>解答：n &#x3D; n + (n++) + (++n)</p><p>每个n对应的值： 10 10 12</p><h2 id="比较运算符（关系运算符）"><a href="#比较运算符（关系运算符）" class="headerlink" title="比较运算符（关系运算符）"></a>比较运算符（关系运算符）</h2><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/2feb64c93276156a1d4d76a76dc11858.png"></p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/15dea6b312bcf143fefe414eaf182f07.png"></p><p> 第七行是把true赋值给y，这个（y&#x3D;true）括号就为真</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>&amp;—逻辑与| —逻辑或！—逻辑非</p><p>&amp;&amp; —短路与|| —短路或^ —逻辑异或</p><p>开发中推荐 &amp;&amp; 和 ||</p><p>A.“&amp;”和“&amp;&amp;”的区别：</p><p>&amp;时，左边无论真假，右边都进行运算；</p><p>&amp;&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</p><p>int n &#x3D; 10;</p><p>false &amp; (n++); n &#x3D; 11 true&amp; (n++); n &#x3D; 11</p><p>false &amp;&amp; (n++); n &#x3D; 10 true&amp;&amp; (n++); n &#x3D; 11</p><p>B.“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。</p><p>C.异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。</p><p>理解：异或，追求的是“异”!</p><p>D.在Java中不可以写成3&lt;x&lt;6，应该写成x&gt;3 &amp; x&lt;6 。因为前面3&lt;x已经为布尔型数据，不能再和6去比较了。</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算是直接对整数的二进制进行的运算</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/31adb1eae51860922821e7ae1afd859d.png"></p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/19ac3471509dba3505b8823a23201b3a.png"></p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/6518e66a4d8449126432f613ccbea5f1.png"></p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e8dc59a21791b53e9c35d00a21c9ebc9.png"></p><p> 表达式1和表达式2为同种类型，可以嵌套</p><p>三元运算符与if-else的联系与区别：</p><p>1）三元运算符可简化if-else语句,比if -else运行效率高。</p><p>2）三元运算符要求必须返回一个结果。</p><p>3）if后的代码块可有多个语句</p><p>练习：</p><p>A.两个数比大小</p><p>int n &#x3D; 10;</p><p>int m &#x3D; 20;</p><p>int out &#x3D; (m&gt;n) ? “m大” ：（(n &#x3D;&#x3D; m) ? “m和n一样大” ：“n大”）</p><p>B.三个数取最大</p><p>Int n &#x3D; 10;</p><p>int m &#x3D; 20;</p><p>int z &#x3D; 30;</p><p>int max &#x3D; (n&lt;m) ? ((m&lt;z) ? z : m) : ((n&gt;z) ? n : z)</p><h1 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h1><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e1147b40591a9cc107f80be9e2578c3f.png"></p><p> 通过Scanner类来输入，如果是String，调用next（），其他类型数据就nextXxx（）。</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/e31ca3f0cc7045a7ef0d1a0e2aa39e89.png"></p><h1 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h1><p>流程控制语句是用来控制程序中各语句执行顺序的语句</p><h2 id="三种基本流程结构"><a href="#三种基本流程结构" class="headerlink" title="三种基本流程结构:"></a>三种基本流程结构:</h2><p>A.顺序结构</p><p>B.分支结构</p><p>根据条件，选择性地执行某段代码。</p><p>有if…else和switch-case两种分支语句。</p><p>C.循环结构</p><p>根据循环条件，重复性的执行某段代码。</p><p>有while、do…while、for三种循环语句。</p><p>注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素。</p><p>循环语句的四个组成部分：</p><p>A.初始化部分(init_statement)</p><p>B.循环条件部分(test_exp)</p><p>C.循环体部分(body_statement)</p><p>D.迭代部分(alter_statement)</p><h2 id="if-else结构"><a href="#if-else结构" class="headerlink" title="if-else结构"></a>if-else结构</h2><p>注意：</p><p>当多个条件是“互斥”关系时，条件判断语句及执行语句间顺序无所谓</p><p>当多个条件是“包含”关系时，“小上大下 &#x2F; 子上父下”</p><h2 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch-case结构"></a>switch-case结构</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// break;</span>    <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>        语句<span class="token number">2</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// break;</span>     … …    <span class="token keyword">case</span> 常量N<span class="token operator">:</span>        语句N<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// break;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// break;</span><span class="token punctuation">}</span></code></pre><p>switch和if语句的对比：</p><p>（1）如果判断的具体数值不多，而且符合byte、short 、char、int、String、枚举等几</p><p>种类型。虽然两个语句都可以使用，建议使用swtich语句。因为效率稍高。</p><p>（2）其他情况：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广。</p><p>也就是说，使用switch-case的，都可以改写为if-else。反之不成立。</p><p>注意：</p><p>（1）switch(表达式)中表达式的值必须是下述几种类型之一：</p><p>byte，short，char，int，枚举(jdk 5.0)，String (jdk 7.0)；</p><p>（2）case子句中的值必须是常量，不能是变量名或不确定的表达式值；</p><p>（3）同一个switch语句，所有case子句中的常量值互不相同；</p><p>（4）break语句用来在执行完一个case分支后使程序跳出switch语句块；</p><p>如果没有break，程序会顺序执行到switch结尾</p><p>（5）default子句是可任选的。同时，位置也是灵活的。当没有匹配的case时，执行default</p><p>（6）多个case执行相同语句，可以考虑合并</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3a91ccc7b58fb53e845fdb107744ddc4.png"></p><p>（7）编写程序：从键盘上输入2019年的“month”和“day”，要求通过程序输出输入的日期为2019年的第几天。</p><p>break不加的情况。</p><p>倒着写，把前面的结果累加。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/96138c3f812a2d5cfb6d06167868f7a5.png"></p><p>每次加的是上个月的天数，最后加一下本月的天数。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>①初始化部分<span class="token punctuation">;</span> ②循环条件部分<span class="token punctuation">;</span> ④迭代部分<span class="token punctuation">)</span>｛③循环体部分<span class="token punctuation">;</span>｝</code></pre><p>执行过程：<br>①-②-③-④-②-③-④-②-③-④-…..-②</p><p>说明：</p><p>②循环条件部分为boolean类型表达式，当值为false时，退出循环</p><p>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</p><p>④可以有多个变量更新，用逗号分隔</p><p>题目：输入两个正整数m和n，求其最大公约数和最小公倍数。</p><p>比如：12和20的最大公约数是4，最小公倍数是60。</p><p>说明：break关键字的使用。比如公约数为1，2，4，找最大，可以倒着判断，从大到小取模，会先找到4，4ok就退出循环。</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/929c119a33c59f0de3aacd04c466ae99.png"></p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>语法格式</p><pre class=" language-java"><code class="language-java">①初始化部分<span class="token keyword">while</span><span class="token punctuation">(</span>②循环条件部分<span class="token punctuation">)</span>｛    ③循环体部分<span class="token punctuation">;</span>    ④迭代部分<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行过程：</p><p>①-②-③-④-②-③-④-②-③-④-…-②</p><p>说明：</p><p>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</p><p>for循环和while循环可以相互转换</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/543e421b7d51a9b188265fc3f21c52d0.png"></p><p> 不确定循环次数，通过循环体内容判断，然后break跳出循环体。</p><p>Boolean isFlag &#x3D; true；</p><p>while（isFlag）{</p><p>…….</p><p>If(…….){</p><p>…..</p><p>Break;</p><p>}</p><p>}</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/31fa3ecfe1d4d863e8c85901b21d0216.png"></p><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><p>语法格式</p><p>①初始化部分;</p><p>do{</p><p>③循环体部分</p><p>④迭代部分</p><p>}while(②循环条件部分);</p><p>执行过程：</p><p>①-③-④-②-③-④-②-③-④-…②</p><p>说明：</p><p>do-while循环至少执行一次循环体。</p><p>练习：100以内的所有质数</p><p> <img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/ecf81322038570559e05accbaa55309f.png"></p><p> 1.Math.sqrt()为开根号，如果可以被除开，或有一对数，一大一小，小的数&lt;开根号，极大提高速度。</p><p>2.break，发现有一个被除开，就不要继续运算了</p><h2 id="break、continue、return"><a href="#break、continue、return" class="headerlink" title="break、continue、return"></a>break、continue、return</h2><p>（1）break</p><p>break语句用于终止某个语句块的执行</p><p>{ ……</p><p>break;</p><p>……</p><p>}</p><p>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是</p><p>哪一层语句块</p><p>label1: { ……</p><p>label2: { ……</p><p>label3: { ……</p><p>break label2;</p><p>……</p><p>}</p><p>}</p><p>}</p><p>（2）continue</p><p>continue只能使用在循环结构中</p><p>continue语句用于跳过其所在循环语句块的一次执行，继续下一次循环</p><p>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</p><p>（3）return</p><p>并非专门用于结束循环的，它的功能是结束一个方法。</p><p>当一个方法执行到一个return语句时，这个方法将被结束。</p><p>与break和continue不同的是，return直接结束整个方法，不管return处于多少层循环之内</p><p>总结：</p><p>break只能用于switch语句和循环语句中。</p><p>continue 只能用于循环语句中。</p><p>二者功能类似，但continue是终止本次循环，break是终止本层循环。</p><p>break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句。</p><p>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。</p><p>很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它。但使程序容易出错。Java中的break和continue是不同于goto的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java零碎知识</title>
      <link href="/2022/04/05/javanotes/java12/"/>
      <url>/2022/04/05/javanotes/java12/</url>
      
        <content type="html"><![CDATA[<p>1.在字符串“”中，加入双引号，会与方法中的“”混淆。</p><p>分别在前面加 \ ,即可打印出双引号</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/949868f61ded78a8084ad5ed940b29a5.png"></p><p>2.产生随机数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">90</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [10.0, 100.0)</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">)</span></code></pre><p>3.\t</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制表符：这是一个 \t 空格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个斜杠t：\\t ，双斜杠取消修饰符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/28e5cf22c4063fa83f1e1797d6c76b58.png"></p><p>4.数组是有序的，对数组其中一位删除，后面的要依次往前补一个</p><p>5.判断数据是否等于某字符串时，把字符串放在前面，避免data出现空指针（.equals报错）</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/3a5573c36513d23751dfacf16bfd172b.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（一）语言概述</title>
      <link href="/2022/03/28/javanotes/java1/"/>
      <url>/2022/03/28/javanotes/java1/</url>
      
        <content type="html"><![CDATA[<h1 id="java语言的特点是什么？"><a href="#java语言的特点是什么？" class="headerlink" title="java语言的特点是什么？"></a>java语言的特点是什么？</h1><p>面向对象性：两个基本概念（要素）：类、对象；三大特性：封装、继承、多态<br>健壮性：吸收了C&#x2F;C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制<br>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”</p><h1 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h1><p>软件，即一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分。</p><p>系统软件：windows、mac os、linux、android、ios…</p><p>应用软件：ppt、画图板、word…</p><h1 id="人机交互方式"><a href="#人机交互方式" class="headerlink" title="人机交互方式"></a>人机交互方式</h1><p>图形化界面(Graphical User Interface GUI)：这种方式简单直观</p><p>命令行方式(Command Line Interface CLI)：需要有一个控制台，输入特定的指令，让计算机完成一些操作。</p><p>Pascal之父Nicklaus Wirth：“Algorithms+Data Structures&#x3D;Programs”</p><p>应用程序 &#x3D; 算法 + 数据结构</p><h1 id="常用的DOS命令（cmd）"><a href="#常用的DOS命令（cmd）" class="headerlink" title="常用的DOS命令（cmd）"></a>常用的DOS命令（cmd）</h1><p>dir : 列出当前目录下的文件以及文件夹</p><p>md : 创建目录</p><p>rd : 删除目录</p><p>cd : 进入指定目录</p><p>cd.. : 退回到上一级目录</p><p>cd: 退回到根目录</p><p>del : 删除文件</p><p>exit : 退出dos 命令行</p><h1 id="Java优势"><a href="#Java优势" class="headerlink" title="Java优势"></a>Java优势</h1><p>A.纯粹的面向对象</p><p>B.舍弃了C语言中容易引起错误的指针</p><p>C.增加了垃圾回收器功能</p><h1 id="Java两种核心机制"><a href="#Java两种核心机制" class="headerlink" title="Java两种核心机制"></a>Java两种核心机制</h1><p>Java虚拟机（Java Virtal Machine），JVM</p><p>垃圾收集机制（Garbage Collection），也会出现内存泄漏、内存溢出事件。</p><h1 id="System-out-println-和System-out-print-什么区别呢？"><a href="#System-out-println-和System-out-print-什么区别呢？" class="headerlink" title="System.out.println()和System.out.print()什么区别呢？"></a>System.out.println()和System.out.print()什么区别呢？</h1><p>System.out.println();打印完后，会换行。</p><p>System.out.print();打印完后，不会换行。</p><p>\n(换行)，\t(制表符)</p><h1 id="一个”-java”源文件中是否可以包括多个类（不是内部类）？"><a href="#一个”-java”源文件中是否可以包括多个类（不是内部类）？" class="headerlink" title="一个”.java”源文件中是否可以包括多个类（不是内部类）？"></a>一个”.java”源文件中是否可以包括多个类（不是内部类）？</h1><p>答：可以。但最多只有一个类名声明为public，与文件名相同。</p><h1 id="文件名和类名"><a href="#文件名和类名" class="headerlink" title="文件名和类名"></a>文件名和类名</h1><p>Something类的文件名叫OtherThing.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Something</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> something_to_do<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Do something ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个很明显。</p><p>答案: 正确。从来没有人说过Java的class名字必须和其文件名相同。但public class的名字必须和文件名相同。</p><h1 id="配置环境变量为什么要设置path（设置path的目的是什么）？"><a href="#配置环境变量为什么要设置path（设置path的目的是什么）？" class="headerlink" title="配置环境变量为什么要设置path（设置path的目的是什么）？"></a>配置环境变量为什么要设置path（设置path的目的是什么）？</h1><p>目的是为了在控制台的任何文件路径下，都可以调用jdk指定目录下的所有指令。</p><h1 id="JDK-JRE和JVM，以及关系是什么？"><a href="#JDK-JRE和JVM，以及关系是什么？" class="headerlink" title="JDK,JRE和JVM，以及关系是什么？"></a>JDK,JRE和JVM，以及关系是什么？</h1><p>JDK: Java Development Kit Java 开发工具包</p><p>JRE: Java Runtime Environment Java运行环境</p><p>关系：</p><p>使用JDK的开发工具完成的Java程序，交给JRE运行。</p><p>JDK包含JRE，JRE包含JVM.</p><p>JDK &#x3D; JRE + 开发工具集（如javac编译工具）</p><p>JRE &#x3D; JVM + Java SE 标准类库</p><h1 id="终端／cmd运行程序格式？"><a href="#终端／cmd运行程序格式？" class="headerlink" title="终端／cmd运行程序格式？"></a>终端／cmd运行程序格式？</h1><p>编译：javac 源文件名.java （会生成类名.calss的文件，称为字节码文件）</p><p>运行：java 类名 （不要加后缀.class）</p><h1 id="程序的入口"><a href="#程序的入口" class="headerlink" title="程序的入口"></a>程序的入口</h1><p>main()方法</p><p>Public static void main(String[] args)</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>分为单行注释、多行注释、文档注释（java特有）</p><p>单行注释、多行注释——对程序进行说明，增加可读性，不参与编译，.class文件不包含。</p><p>文档注释——可以被jdk提供的工具javadoc解析，生成一套以网页文件形式的说明文档。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同时关联多个git远程仓库</title>
      <link href="/2022/02/22/gitssh/"/>
      <url>/2022/02/22/gitssh/</url>
      
        <content type="html"><![CDATA[<h1 id="查看已有ssh-key"><a href="#查看已有ssh-key" class="headerlink" title="查看已有ssh key"></a>查看已有ssh key</h1><p>首先确保能够查看<strong>隐藏目录</strong>，进入C:\Users\XXXXX.ssh目录，查看是否生成过密钥。</p><p>id_rsa.pub和id_rsa分别为一对公&#x2F;私密钥</p><p>多个账户可再次创建密钥，但默认的名字需要修改，不能相同，否则会被提示是否重写</p><p>默认为id_rsa，因此第二个密钥我修改了名字为id_rsa_lbx</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/fed2c1f003e72c4df11316926279109a.png"></p><h1 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h1><blockquote><p>ssh-keygen -t rsa -C <strong>“<a href="mailto:&#121;&#x6f;&#117;&#114;&#101;&#109;&#97;&#x69;&#108;&#64;&#x79;&#x6f;&#117;&#114;&#99;&#x6f;&#109;&#x70;&#x61;&#110;&#121;&#46;&#99;&#111;&#109;">&#121;&#x6f;&#117;&#114;&#101;&#109;&#97;&#x69;&#108;&#64;&#x79;&#x6f;&#117;&#114;&#99;&#x6f;&#109;&#x70;&#x61;&#110;&#121;&#46;&#99;&#111;&#109;</a>“</strong></p></blockquote><p>蓝色加粗字体为你的<strong>邮箱</strong>，不同ssh key需要绑定<strong>不同</strong>邮箱</p><p>如果已经生成多个ssh key，如上图，则跳过此步</p><h1 id="设置ssh-key的代理"><a href="#设置ssh-key的代理" class="headerlink" title="设置ssh key的代理"></a>设置ssh key的代理</h1><h2 id="首先查看代理"><a href="#首先查看代理" class="headerlink" title="首先查看代理"></a>首先查看代理</h2><blockquote><p>ssh-add -l</p></blockquote><p>如果提示</p><blockquote><p>Could not open a connection to your authentication agent.</p></blockquote><p>则系统代理里没有任何key，执行如下操作</p><blockquote><p>exec ssh-agent bash</p></blockquote><p>若系统已经有ssh-key 代理 ,可以删除</p><blockquote><p>ssh-add -D</p></blockquote><h2 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h2><p>添加两个私钥</p><blockquote><p>ssh-add ~&#x2F;.ssh&#x2F;id_rsa<br>ssh-add ~&#x2F;.ssh&#x2F;id_rsa_lbx</p></blockquote><h2 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h2><p>在目标账户<strong>github</strong>的<strong>ssh管理</strong>页面，添加对应的公钥（刚才生成的ssh key，如id_rsa.pub 等<strong>以.pub</strong>结尾的文件内容）。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/bda572998d7df66a7ff85fde7d2b783b.png"></p><h2 id="新建并编辑配置文件config"><a href="#新建并编辑配置文件config" class="headerlink" title="新建并编辑配置文件config"></a>新建并编辑配置文件config</h2><p>在 ~&#x2F;.ssh 目录下新建一个config文件</p><blockquote><p>touch ~&#x2F;.ssh&#x2F;config</p></blockquote><p>添加内容</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>#github</p><p>Host github.com</p><p>HostName github.com</p><p>PreferredAuthentications publickey</p><p>IdentityFile ~&#x2F;.ssh&#x2F; <strong>id_rsa</strong></p><p>user git</p></blockquote><p>其中，id_rsa 为<strong>你要关联的账户</strong>对应的密钥，电脑需要关联哪个账户，这边就写哪个</p><p>如此，ssh就会根据登陆的不同域，来读取对应的私钥文件</p><p>如需要用到其他账户的远程仓库，则在此处修改目标仓库生成的ssh key即可。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/1ad8a7aad4e6cb0147e671aafff44cb6.png"></p><p>同时将两个ssh key同时写入，但区分Host名称即可，并且对应的ssh key文件对应好。</p><p>并且以后在github.com前面加上前缀（Host名称），就可以跳转到各个账号的仓库。</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/f7c2af2a074b8ebb153622a5bf178070.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/6622342838ee544af637a76a724099ee.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a></p></blockquote><p>若出现</p><blockquote><p>Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>则表示成功。查看XXX是否为关联的账户</p><p>可以查看分支，看看对应的仓库地址：</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230517001459.png"></p><h2 id="选择仓库"><a href="#选择仓库" class="headerlink" title="选择仓库"></a>选择仓库</h2><p>拉：</p><blockquote><p>git pull lbx-AIO main</p></blockquote><p>解决冲突：</p><blockquote><p>idea处理即可</p></blockquote><p>提交：</p><blockquote><p>git add .<br>git commit -m ‘XXX’</p></blockquote><p>推：</p><blockquote><p>git push lbx-AIO main</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2022/02/20/git/"/>
      <url>/2022/02/20/git/</url>
      
        <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul><li><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git init</code></pre><ul><li><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git status</code></pre><h1 id="推"><a href="#推" class="headerlink" title="推"></a>推</h1><ul><li><h2 id="添加到暂缓区"><a href="#添加到暂缓区" class="headerlink" title="添加到暂缓区"></a>添加到暂缓区</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git add .</code></pre><ul><li><h2 id="提交至本地库"><a href="#提交至本地库" class="headerlink" title="提交至本地库"></a>提交至本地库</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git commit -m '提交信息'</code></pre><ul><li><h2 id="推到远程仓库"><a href="#推到远程仓库" class="headerlink" title="推到远程仓库"></a>推到远程仓库</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git push</code></pre><h1 id="拉"><a href="#拉" class="headerlink" title="拉"></a>拉</h1><ul><li><h2 id="下拉并与本地合并"><a href="#下拉并与本地合并" class="headerlink" title="下拉并与本地合并"></a>下拉并与本地合并</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git pull</code></pre><ul><li><h2 id="如未知关联的仓库"><a href="#如未知关联的仓库" class="headerlink" title="如未知关联的仓库"></a>如未知关联的仓库</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git pull 仓库名 分支名</code></pre><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>冲突产生的表现：后面状态为MERGING</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/57e02acec7b8b8e0f654934c039e9bb3.png"></p><ul><li>查看状态</li></ul><pre class=" language-Bash"><code class="language-Bash">git status</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/fd0174cbfce59addaf90bb936b2fd5eb.png"></p><p>解决合并问题：</p><p>1）编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><p>特殊符号：<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码======= 合并过来的代码&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code></p><p>2）添加到暂存区</p><pre class=" language-Bash"><code class="language-Bash">git add XXXX（文件名） 或 git add .</code></pre><p>3）查看解决状态，全部绿色（modified修改过）</p><pre class=" language-Bash"><code class="language-Bash">git status</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/552a8ad42e123ea5e10a70e027dba00e.png"></p><p>4）执行提交（注意：此时使用git commit 命令时不能带文件名）</p><pre class=" language-Bash"><code class="language-Bash">git commit -m ' '</code></pre><p>发现后面MERGING 消失，变为正常</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/52b7fdf6e1ddb65b57e28ce92189a6ec.png"></p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul><li><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git branch 分支名</code></pre><ul><li><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git branch -v</code></pre><ul><li><h2 id="切换分支（切换分支的本质就是移动HEAD-指针）"><a href="#切换分支（切换分支的本质就是移动HEAD-指针）" class="headerlink" title="切换分支（切换分支的本质就是移动HEAD 指针）"></a>切换分支（切换分支的本质就是移动HEAD 指针）</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git checkout 分支名</code></pre><ul><li><h2 id="指定分支合并到当前分支"><a href="#指定分支合并到当前分支" class="headerlink" title="指定分支合并到当前分支"></a>指定分支合并到当前分支</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git merge 分支名</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/b2ac0f41fb9fa4621cdc29209adcd2bd.png"></p><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><ul><li><h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git reflog</code></pre><ul><li><h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2></li></ul><pre class=" language-Bash"><code class="language-Bash">git reset --hard 版本号</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/ed7d30769d8dcd9b6b10fc6b00e47bca.png"></p><h1 id="vim相关操作"><a href="#vim相关操作" class="headerlink" title="vim相关操作"></a>vim相关操作</h1><p>主要用到：</p><p>“a”进入编辑</p><p>“Esc”退出编辑</p><p>“shift + :”开始编辑命令</p><p>“:wq”保存</p><p>“:q”退出vim</p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/5320d98f969a0ceb31459fc7709aee67.png"></p><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/4be93568a0522540764bf5a8f66b6ae7.png"></p><h1 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h1><pre><code>git remote add 仓库名（本地自拟） git@xxx.github.com:用户名/仓库.git</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/83939ba5a3ff4ac70ac4de6a49408d18.png"><br>如果是推到新的仓库，出现以下情况，</p><p>则是：远程仓库中有着本地仓库没有的文件，由于远程仓库和本地仓库没有共同的commit，需要先pull<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/a7b47c89caeca75e6a55961785655fa6.png"><br>拒绝合并不相关的历史<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/bff674eb63d3e263de3d7c57612ec168.png"><br>所以需要：</p><pre class=" language-Bash"><code class="language-Bash">git pull origin master --allow-unrelated-histories</code></pre><p><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/img/6afab4a5a34889f623d1dfdb69f11007.png"><br>完成！</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="出现"><a href="#出现" class="headerlink" title="出现"></a>出现</h3><ul><li>fatal: Out of memory, malloc failed (tried to allocate 889192478 bytes)</li><li>error: failed to push some refs to ‘<a href="https://github.com/Shark-NJU/AIO.git">https://github.com/Shark-NJU/AIO.git</a>‘</li></ul><p>修改.git文件下config文件</p><p>将http改为git连接<br><img src="https://raw.githubusercontent.com/luan-bx/PicGO/main/java/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230621232948.png"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2022/02/16/markdown/"/>
      <url>/2022/02/16/markdown/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入html标签。<br>注意：符号后面必须跟至少1个空格才有效！</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span></code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>Red</li><li>Green</li><li>Blue</li></ul><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> Red<span class="token list punctuation">-</span> Green<span class="token list punctuation">-</span> Blue</code></pre><h2 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h2><ol><li>Red</li><li>Green</li><li>Blue</li></ol><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> Red<span class="token list punctuation">2.</span> Green<span class="token list punctuation">3.</span> Blue</code></pre><h2 id="打开本地服务器"><a href="#打开本地服务器" class="headerlink" title="打开本地服务器"></a>打开本地服务器</h2><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><blockquote><p>引用 ，注意：在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre></blockquote><blockquote><p>代码例子：<br>    protected void onCreate(Bundle savedInstanceState) {<br>        super.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    }</p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 一级引用<span class="token blockquote punctuation">> ></span> 二级引用<span class="token blockquote punctuation">> > ></span> 三级引用</code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 引用 ，注意：在<span class="token code keyword">`>`</span>后面有 1 个空格<span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span><span class="token code keyword">     这是引用的代码块形式    //在`>`后面有 5 个空格</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 代码例子：<span class="token code keyword">    protected void onCreate(Bundle savedInstanceState) {</span><span class="token code keyword">        super.onCreate(savedInstanceState);</span><span class="token code keyword">        setContentView(R.layout.activity_main);</span><span class="token code keyword">    }</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2022/02/15/hexo/"/>
      <url>/2022/02/15/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><pre class=" language-bash"><code class="language-bash">hexo clean</code></pre><h2 id="构建静态文件"><a href="#构建静态文件" class="headerlink" title="构建静态文件"></a>构建静态文件</h2><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><h2 id="上传至仓库"><a href="#上传至仓库" class="headerlink" title="上传至仓库"></a>上传至仓库</h2><pre class=" language-bash"><code class="language-bash">hexo d</code></pre><h2 id="打开本地服务器"><a href="#打开本地服务器" class="headerlink" title="打开本地服务器"></a>打开本地服务器</h2><pre class=" language-bash"><code class="language-bash">hexo server //可进行本地调试</code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
